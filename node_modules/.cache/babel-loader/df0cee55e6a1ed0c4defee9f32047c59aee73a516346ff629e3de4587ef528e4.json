{"ast":null,"code":"'use strict';\n\nconst EventEmitter = require('events');\nconst fs = require('fs');\nconst {\n  constants\n} = fs;\nconst {\n  Readable: ReadableStream,\n  Writable: WritableStream\n} = require('stream');\nconst {\n  inherits,\n  isDate\n} = require('util');\nconst FastBuffer = Buffer[Symbol.species];\nconst {\n  bufferCopy,\n  bufferSlice,\n  makeBufferParser,\n  writeUInt32BE\n} = require('./utils.js');\nconst ATTR = {\n  SIZE: 0x00000001,\n  UIDGID: 0x00000002,\n  PERMISSIONS: 0x00000004,\n  ACMODTIME: 0x00000008,\n  EXTENDED: 0x80000000\n};\n\n// Large enough to store all possible attributes\nconst ATTRS_BUF = Buffer.alloc(28);\nconst STATUS_CODE = {\n  OK: 0,\n  EOF: 1,\n  NO_SUCH_FILE: 2,\n  PERMISSION_DENIED: 3,\n  FAILURE: 4,\n  BAD_MESSAGE: 5,\n  NO_CONNECTION: 6,\n  CONNECTION_LOST: 7,\n  OP_UNSUPPORTED: 8\n};\nconst VALID_STATUS_CODES = new Map(Object.values(STATUS_CODE).map(n => [n, 1]));\nconst STATUS_CODE_STR = {\n  [STATUS_CODE.OK]: 'No error',\n  [STATUS_CODE.EOF]: 'End of file',\n  [STATUS_CODE.NO_SUCH_FILE]: 'No such file or directory',\n  [STATUS_CODE.PERMISSION_DENIED]: 'Permission denied',\n  [STATUS_CODE.FAILURE]: 'Failure',\n  [STATUS_CODE.BAD_MESSAGE]: 'Bad message',\n  [STATUS_CODE.NO_CONNECTION]: 'No connection',\n  [STATUS_CODE.CONNECTION_LOST]: 'Connection lost',\n  [STATUS_CODE.OP_UNSUPPORTED]: 'Operation unsupported'\n};\nconst REQUEST = {\n  INIT: 1,\n  OPEN: 3,\n  CLOSE: 4,\n  READ: 5,\n  WRITE: 6,\n  LSTAT: 7,\n  FSTAT: 8,\n  SETSTAT: 9,\n  FSETSTAT: 10,\n  OPENDIR: 11,\n  READDIR: 12,\n  REMOVE: 13,\n  MKDIR: 14,\n  RMDIR: 15,\n  REALPATH: 16,\n  STAT: 17,\n  RENAME: 18,\n  READLINK: 19,\n  SYMLINK: 20,\n  EXTENDED: 200\n};\nconst RESPONSE = {\n  VERSION: 2,\n  STATUS: 101,\n  HANDLE: 102,\n  DATA: 103,\n  NAME: 104,\n  ATTRS: 105,\n  EXTENDED: 201\n};\nconst OPEN_MODE = {\n  READ: 0x00000001,\n  WRITE: 0x00000002,\n  APPEND: 0x00000004,\n  CREAT: 0x00000008,\n  TRUNC: 0x00000010,\n  EXCL: 0x00000020\n};\nconst PKT_RW_OVERHEAD = 2 * 1024;\nconst MAX_REQID = 2 ** 32 - 1;\nconst CLIENT_VERSION_BUFFER = Buffer.from([0, 0, 0, 5 /* length */, REQUEST.INIT, 0, 0, 0, 3 /* version */]);\n\nconst SERVER_VERSION_BUFFER = Buffer.from([0, 0, 0, 5 /* length */, RESPONSE.VERSION, 0, 0, 0, 3 /* version */]);\n\nconst RE_OPENSSH = /^SSH-2.0-(?:OpenSSH|dropbear)/;\nconst OPENSSH_MAX_PKT_LEN = 256 * 1024;\nconst bufferParser = makeBufferParser();\nconst fakeStderr = {\n  readable: false,\n  writable: false,\n  push: data => {},\n  once: () => {},\n  on: () => {},\n  emit: () => {},\n  end: () => {}\n};\nfunction noop() {}\n\n// Emulates enough of `Channel` to be able to be used as a drop-in replacement\n// in order to process incoming data with as little overhead as possible\nclass SFTP extends EventEmitter {\n  constructor(client, chanInfo, cfg) {\n    super();\n    if (typeof cfg !== 'object' || !cfg) cfg = {};\n    const remoteIdentRaw = client._protocol._remoteIdentRaw;\n    this.server = !!cfg.server;\n    this._debug = typeof cfg.debug === 'function' ? cfg.debug : undefined;\n    this._isOpenSSH = remoteIdentRaw && RE_OPENSSH.test(remoteIdentRaw);\n    this._version = -1;\n    this._extensions = {};\n    this._biOpt = cfg.biOpt;\n    this._pktLenBytes = 0;\n    this._pktLen = 0;\n    this._pktPos = 0;\n    this._pktType = 0;\n    this._pktData = undefined;\n    this._writeReqid = -1;\n    this._requests = {};\n    this._maxInPktLen = OPENSSH_MAX_PKT_LEN;\n    this._maxOutPktLen = 34000;\n    this._maxReadLen = (this._isOpenSSH ? OPENSSH_MAX_PKT_LEN : 34000) - PKT_RW_OVERHEAD;\n    this._maxWriteLen = (this._isOpenSSH ? OPENSSH_MAX_PKT_LEN : 34000) - PKT_RW_OVERHEAD;\n    this.maxOpenHandles = undefined;\n\n    // Channel compatibility\n    this._client = client;\n    this._protocol = client._protocol;\n    this._callbacks = [];\n    this._hasX11 = false;\n    this._exit = {\n      code: undefined,\n      signal: undefined,\n      dump: undefined,\n      desc: undefined\n    };\n    this._waitWindow = false; // SSH-level backpressure\n    this._chunkcb = undefined;\n    this._buffer = [];\n    this.type = chanInfo.type;\n    this.subtype = undefined;\n    this.incoming = chanInfo.incoming;\n    this.outgoing = chanInfo.outgoing;\n    this.stderr = fakeStderr;\n    this.readable = true;\n  }\n\n  // This handles incoming data to parse\n  push(data) {\n    if (data === null) {\n      cleanupRequests(this);\n      if (!this.readable) return;\n      // No more incoming data from the remote side\n      this.readable = false;\n      this.emit('end');\n      return;\n    }\n    /*\n        uint32             length\n        byte               type\n        byte[length - 1]   data payload\n    */\n    let p = 0;\n    while (p < data.length) {\n      if (this._pktLenBytes < 4) {\n        let nb = Math.min(4 - this._pktLenBytes, data.length - p);\n        this._pktLenBytes += nb;\n        while (nb--) this._pktLen = (this._pktLen << 8) + data[p++];\n        if (this._pktLenBytes < 4) return;\n        if (this._pktLen === 0) return doFatalSFTPError(this, 'Invalid packet length');\n        if (this._pktLen > this._maxInPktLen) {\n          const max = this._maxInPktLen;\n          return doFatalSFTPError(this, `Packet length ${this._pktLen} exceeds max length of ${max}`);\n        }\n        if (p >= data.length) return;\n      }\n      if (this._pktPos < this._pktLen) {\n        const nb = Math.min(this._pktLen - this._pktPos, data.length - p);\n        if (p !== 0 || nb !== data.length) {\n          if (nb === this._pktLen) {\n            this._pkt = new FastBuffer(data.buffer, data.byteOffset + p, nb);\n          } else {\n            if (!this._pkt) this._pkt = Buffer.allocUnsafe(this._pktLen);\n            this._pkt.set(new Uint8Array(data.buffer, data.byteOffset + p, nb), this._pktPos);\n          }\n        } else if (nb === this._pktLen) {\n          this._pkt = data;\n        } else {\n          if (!this._pkt) this._pkt = Buffer.allocUnsafe(this._pktLen);\n          this._pkt.set(data, this._pktPos);\n        }\n        p += nb;\n        this._pktPos += nb;\n        if (this._pktPos < this._pktLen) return;\n      }\n      const type = this._pkt[0];\n      const payload = this._pkt;\n\n      // Prepare for next packet\n      this._pktLen = 0;\n      this._pktLenBytes = 0;\n      this._pkt = undefined;\n      this._pktPos = 0;\n      const handler = this.server ? SERVER_HANDLERS[type] : CLIENT_HANDLERS[type];\n      if (!handler) return doFatalSFTPError(this, `Unknown packet type ${type}`);\n      if (this._version === -1) {\n        if (this.server) {\n          if (type !== REQUEST.INIT) return doFatalSFTPError(this, `Expected INIT packet, got ${type}`);\n        } else if (type !== RESPONSE.VERSION) {\n          return doFatalSFTPError(this, `Expected VERSION packet, got ${type}`);\n        }\n      }\n      if (handler(this, payload) === false) return;\n    }\n  }\n  end() {\n    this.destroy();\n  }\n  destroy() {\n    if (this.outgoing.state === 'open' || this.outgoing.state === 'eof') {\n      this.outgoing.state = 'closing';\n      this._protocol.channelClose(this.outgoing.id);\n    }\n  }\n  _init() {\n    this._init = noop;\n    if (!this.server) sendOrBuffer(this, CLIENT_VERSION_BUFFER);\n  }\n\n  // ===========================================================================\n  // Client-specific ===========================================================\n  // ===========================================================================\n  createReadStream(path, options) {\n    if (this.server) throw new Error('Client-only method called in server mode');\n    return new ReadStream(this, path, options);\n  }\n  createWriteStream(path, options) {\n    if (this.server) throw new Error('Client-only method called in server mode');\n    return new WriteStream(this, path, options);\n  }\n  open(path, flags_, attrs, cb) {\n    if (this.server) throw new Error('Client-only method called in server mode');\n    if (typeof attrs === 'function') {\n      cb = attrs;\n      attrs = undefined;\n    }\n    const flags = typeof flags_ === 'number' ? flags_ : stringToFlags(flags_);\n    if (flags === null) throw new Error(`Unknown flags string: ${flags_}`);\n    let attrsFlags = 0;\n    let attrsLen = 0;\n    if (typeof attrs === 'string' || typeof attrs === 'number') attrs = {\n      mode: attrs\n    };\n    if (typeof attrs === 'object' && attrs !== null) {\n      attrs = attrsToBytes(attrs);\n      attrsFlags = attrs.flags;\n      attrsLen = attrs.nb;\n    }\n\n    /*\n      uint32        id\n      string        filename\n      uint32        pflags\n      ATTRS         attrs\n    */\n    const pathLen = Buffer.byteLength(path);\n    let p = 9;\n    const buf = Buffer.allocUnsafe(4 + 1 + 4 + 4 + pathLen + 4 + 4 + attrsLen);\n    writeUInt32BE(buf, buf.length - 4, 0);\n    buf[4] = REQUEST.OPEN;\n    const reqid = this._writeReqid = this._writeReqid + 1 & MAX_REQID;\n    writeUInt32BE(buf, reqid, 5);\n    writeUInt32BE(buf, pathLen, p);\n    buf.utf8Write(path, p += 4, pathLen);\n    writeUInt32BE(buf, flags, p += pathLen);\n    writeUInt32BE(buf, attrsFlags, p += 4);\n    if (attrsLen) {\n      p += 4;\n      if (attrsLen === ATTRS_BUF.length) buf.set(ATTRS_BUF, p);else bufferCopy(ATTRS_BUF, buf, 0, attrsLen, p);\n      p += attrsLen;\n    }\n    this._requests[reqid] = {\n      cb\n    };\n    const isBuffered = sendOrBuffer(this, buf);\n    this._debug && this._debug(`SFTP: Outbound: ${isBuffered ? 'Buffered' : 'Sending'} OPEN`);\n  }\n  close(handle, cb) {\n    if (this.server) throw new Error('Client-only method called in server mode');\n    if (!Buffer.isBuffer(handle)) throw new Error('handle is not a Buffer');\n\n    /*\n      uint32     id\n      string     handle\n    */\n    const handleLen = handle.length;\n    let p = 9;\n    const buf = Buffer.allocUnsafe(4 + 1 + 4 + 4 + handleLen);\n    writeUInt32BE(buf, buf.length - 4, 0);\n    buf[4] = REQUEST.CLOSE;\n    const reqid = this._writeReqid = this._writeReqid + 1 & MAX_REQID;\n    writeUInt32BE(buf, reqid, 5);\n    writeUInt32BE(buf, handleLen, p);\n    buf.set(handle, p += 4);\n    this._requests[reqid] = {\n      cb\n    };\n    const isBuffered = sendOrBuffer(this, buf);\n    this._debug && this._debug(`SFTP: Outbound: ${isBuffered ? 'Buffered' : 'Sending'} CLOSE`);\n  }\n  read(handle, buf, off, len, position, cb) {\n    if (this.server) throw new Error('Client-only method called in server mode');\n    if (!Buffer.isBuffer(handle)) throw new Error('handle is not a Buffer');\n    if (!Buffer.isBuffer(buf)) throw new Error('buffer is not a Buffer');\n    if (off >= buf.length) throw new Error('offset is out of bounds');\n    if (off + len > buf.length) throw new Error('length extends beyond buffer');\n    if (position === null) throw new Error('null position currently unsupported');\n    read_(this, handle, buf, off, len, position, cb);\n  }\n  readData(handle, buf, off, len, position, cb) {\n    // Backwards compatibility\n    this.read(handle, buf, off, len, position, cb);\n  }\n  write(handle, buf, off, len, position, cb) {\n    if (this.server) throw new Error('Client-only method called in server mode');\n    if (!Buffer.isBuffer(handle)) throw new Error('handle is not a Buffer');\n    if (!Buffer.isBuffer(buf)) throw new Error('buffer is not a Buffer');\n    if (off > buf.length) throw new Error('offset is out of bounds');\n    if (off + len > buf.length) throw new Error('length extends beyond buffer');\n    if (position === null) throw new Error('null position currently unsupported');\n    if (!len) {\n      cb && process.nextTick(cb, undefined, 0);\n      return;\n    }\n    const maxDataLen = this._maxWriteLen;\n    const overflow = Math.max(len - maxDataLen, 0);\n    const origPosition = position;\n    if (overflow) len = maxDataLen;\n\n    /*\n      uint32     id\n      string     handle\n      uint64     offset\n      string     data\n    */\n    const handleLen = handle.length;\n    let p = 9;\n    const out = Buffer.allocUnsafe(4 + 1 + 4 + 4 + handleLen + 8 + 4 + len);\n    writeUInt32BE(out, out.length - 4, 0);\n    out[4] = REQUEST.WRITE;\n    const reqid = this._writeReqid = this._writeReqid + 1 & MAX_REQID;\n    writeUInt32BE(out, reqid, 5);\n    writeUInt32BE(out, handleLen, p);\n    out.set(handle, p += 4);\n    p += handleLen;\n    for (let i = 7; i >= 0; --i) {\n      out[p + i] = position & 0xFF;\n      position /= 256;\n    }\n    writeUInt32BE(out, len, p += 8);\n    bufferCopy(buf, out, off, off + len, p += 4);\n    this._requests[reqid] = {\n      cb: err => {\n        if (err) {\n          if (typeof cb === 'function') cb(err);\n        } else if (overflow) {\n          this.write(handle, buf, off + len, overflow, origPosition + len, cb);\n        } else if (typeof cb === 'function') {\n          cb(undefined, off + len);\n        }\n      }\n    };\n    const isSent = sendOrBuffer(this, out);\n    if (this._debug) {\n      const how = isSent ? 'Sent' : 'Buffered';\n      this._debug(`SFTP: Outbound: ${how} WRITE (id:${reqid})`);\n    }\n  }\n  writeData(handle, buf, off, len, position, cb) {\n    // Backwards compatibility\n    this.write(handle, buf, off, len, position, cb);\n  }\n  fastGet(remotePath, localPath, opts, cb) {\n    if (this.server) throw new Error('Client-only method called in server mode');\n    fastXfer(this, fs, remotePath, localPath, opts, cb);\n  }\n  fastPut(localPath, remotePath, opts, cb) {\n    if (this.server) throw new Error('Client-only method called in server mode');\n    fastXfer(fs, this, localPath, remotePath, opts, cb);\n  }\n  readFile(path, options, callback_) {\n    if (this.server) throw new Error('Client-only method called in server mode');\n    let callback;\n    if (typeof callback_ === 'function') {\n      callback = callback_;\n    } else if (typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    if (typeof options === 'string') options = {\n      encoding: options,\n      flag: 'r'\n    };else if (!options) options = {\n      encoding: null,\n      flag: 'r'\n    };else if (typeof options !== 'object') throw new TypeError('Bad arguments');\n    const encoding = options.encoding;\n    if (encoding && !Buffer.isEncoding(encoding)) throw new Error(`Unknown encoding: ${encoding}`);\n\n    // First stat the file, so we know the size.\n    let size;\n    let buffer; // Single buffer with file data\n    let buffers; // List for when size is unknown\n    let pos = 0;\n    let handle;\n\n    // SFTPv3 does not support using -1 for read position, so we have to track\n    // read position manually\n    let bytesRead = 0;\n    const flag = options.flag || 'r';\n    const read = () => {\n      if (size === 0) {\n        buffer = Buffer.allocUnsafe(8192);\n        this.read(handle, buffer, 0, 8192, bytesRead, afterRead);\n      } else {\n        this.read(handle, buffer, pos, size - pos, bytesRead, afterRead);\n      }\n    };\n    const afterRead = (er, nbytes) => {\n      let eof;\n      if (er) {\n        eof = er.code === STATUS_CODE.EOF;\n        if (!eof) {\n          return this.close(handle, () => {\n            return callback && callback(er);\n          });\n        }\n      } else {\n        eof = false;\n      }\n      if (eof || size === 0 && nbytes === 0) return close();\n      bytesRead += nbytes;\n      pos += nbytes;\n      if (size !== 0) {\n        if (pos === size) close();else read();\n      } else {\n        // Unknown size, just read until we don't get bytes.\n        buffers.push(bufferSlice(buffer, 0, nbytes));\n        read();\n      }\n    };\n    afterRead._wantEOFError = true;\n    const close = () => {\n      this.close(handle, er => {\n        if (size === 0) {\n          // Collect the data into the buffers list.\n          buffer = Buffer.concat(buffers, pos);\n        } else if (pos < size) {\n          buffer = bufferSlice(buffer, 0, pos);\n        }\n        if (encoding) buffer = buffer.toString(encoding);\n        return callback && callback(er, buffer);\n      });\n    };\n    this.open(path, flag, 0o666, (er, handle_) => {\n      if (er) return callback && callback(er);\n      handle = handle_;\n      const tryStat = (er, st) => {\n        if (er) {\n          // Try stat() for sftp servers that may not support fstat() for\n          // whatever reason\n          this.stat(path, (er_, st_) => {\n            if (er_) {\n              return this.close(handle, () => {\n                callback && callback(er);\n              });\n            }\n            tryStat(null, st_);\n          });\n          return;\n        }\n        size = st.size || 0;\n        if (size === 0) {\n          // The kernel lies about many files.\n          // Go ahead and try to read some bytes.\n          buffers = [];\n          return read();\n        }\n        buffer = Buffer.allocUnsafe(size);\n        read();\n      };\n      this.fstat(handle, tryStat);\n    });\n  }\n  writeFile(path, data, options, callback_) {\n    if (this.server) throw new Error('Client-only method called in server mode');\n    let callback;\n    if (typeof callback_ === 'function') {\n      callback = callback_;\n    } else if (typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    if (typeof options === 'string') options = {\n      encoding: options,\n      mode: 0o666,\n      flag: 'w'\n    };else if (!options) options = {\n      encoding: 'utf8',\n      mode: 0o666,\n      flag: 'w'\n    };else if (typeof options !== 'object') throw new TypeError('Bad arguments');\n    if (options.encoding && !Buffer.isEncoding(options.encoding)) throw new Error(`Unknown encoding: ${options.encoding}`);\n    const flag = options.flag || 'w';\n    this.open(path, flag, options.mode, (openErr, handle) => {\n      if (openErr) {\n        callback && callback(openErr);\n      } else {\n        const buffer = Buffer.isBuffer(data) ? data : Buffer.from('' + data, options.encoding || 'utf8');\n        const position = /a/.test(flag) ? null : 0;\n\n        // SFTPv3 does not support the notion of 'current position'\n        // (null position), so we just attempt to append to the end of the file\n        // instead\n        if (position === null) {\n          const tryStat = (er, st) => {\n            if (er) {\n              // Try stat() for sftp servers that may not support fstat() for\n              // whatever reason\n              this.stat(path, (er_, st_) => {\n                if (er_) {\n                  return this.close(handle, () => {\n                    callback && callback(er);\n                  });\n                }\n                tryStat(null, st_);\n              });\n              return;\n            }\n            writeAll(this, handle, buffer, 0, buffer.length, st.size, callback);\n          };\n          this.fstat(handle, tryStat);\n          return;\n        }\n        writeAll(this, handle, buffer, 0, buffer.length, position, callback);\n      }\n    });\n  }\n  appendFile(path, data, options, callback_) {\n    if (this.server) throw new Error('Client-only method called in server mode');\n    let callback;\n    if (typeof callback_ === 'function') {\n      callback = callback_;\n    } else if (typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    if (typeof options === 'string') options = {\n      encoding: options,\n      mode: 0o666,\n      flag: 'a'\n    };else if (!options) options = {\n      encoding: 'utf8',\n      mode: 0o666,\n      flag: 'a'\n    };else if (typeof options !== 'object') throw new TypeError('Bad arguments');\n    if (!options.flag) options = Object.assign({\n      flag: 'a'\n    }, options);\n    this.writeFile(path, data, options, callback);\n  }\n  exists(path, cb) {\n    if (this.server) throw new Error('Client-only method called in server mode');\n    this.stat(path, err => {\n      cb && cb(err ? false : true);\n    });\n  }\n  unlink(filename, cb) {\n    if (this.server) throw new Error('Client-only method called in server mode');\n\n    /*\n      uint32     id\n      string     filename\n    */\n    const fnameLen = Buffer.byteLength(filename);\n    let p = 9;\n    const buf = Buffer.allocUnsafe(4 + 1 + 4 + 4 + fnameLen);\n    writeUInt32BE(buf, buf.length - 4, 0);\n    buf[4] = REQUEST.REMOVE;\n    const reqid = this._writeReqid = this._writeReqid + 1 & MAX_REQID;\n    writeUInt32BE(buf, reqid, 5);\n    writeUInt32BE(buf, fnameLen, p);\n    buf.utf8Write(filename, p += 4, fnameLen);\n    this._requests[reqid] = {\n      cb\n    };\n    const isBuffered = sendOrBuffer(this, buf);\n    this._debug && this._debug(`SFTP: Outbound: ${isBuffered ? 'Buffered' : 'Sending'} REMOVE`);\n  }\n  rename(oldPath, newPath, cb) {\n    if (this.server) throw new Error('Client-only method called in server mode');\n\n    /*\n      uint32     id\n      string     oldpath\n      string     newpath\n    */\n    const oldLen = Buffer.byteLength(oldPath);\n    const newLen = Buffer.byteLength(newPath);\n    let p = 9;\n    const buf = Buffer.allocUnsafe(4 + 1 + 4 + 4 + oldLen + 4 + newLen);\n    writeUInt32BE(buf, buf.length - 4, 0);\n    buf[4] = REQUEST.RENAME;\n    const reqid = this._writeReqid = this._writeReqid + 1 & MAX_REQID;\n    writeUInt32BE(buf, reqid, 5);\n    writeUInt32BE(buf, oldLen, p);\n    buf.utf8Write(oldPath, p += 4, oldLen);\n    writeUInt32BE(buf, newLen, p += oldLen);\n    buf.utf8Write(newPath, p += 4, newLen);\n    this._requests[reqid] = {\n      cb\n    };\n    const isBuffered = sendOrBuffer(this, buf);\n    this._debug && this._debug(`SFTP: Outbound: ${isBuffered ? 'Buffered' : 'Sending'} RENAME`);\n  }\n  mkdir(path, attrs, cb) {\n    if (this.server) throw new Error('Client-only method called in server mode');\n    let flags = 0;\n    let attrsLen = 0;\n    if (typeof attrs === 'function') {\n      cb = attrs;\n      attrs = undefined;\n    }\n    if (typeof attrs === 'object' && attrs !== null) {\n      attrs = attrsToBytes(attrs);\n      flags = attrs.flags;\n      attrsLen = attrs.nb;\n    }\n\n    /*\n      uint32     id\n      string     path\n      ATTRS      attrs\n    */\n    const pathLen = Buffer.byteLength(path);\n    let p = 9;\n    const buf = Buffer.allocUnsafe(4 + 1 + 4 + 4 + pathLen + 4 + attrsLen);\n    writeUInt32BE(buf, buf.length - 4, 0);\n    buf[4] = REQUEST.MKDIR;\n    const reqid = this._writeReqid = this._writeReqid + 1 & MAX_REQID;\n    writeUInt32BE(buf, reqid, 5);\n    writeUInt32BE(buf, pathLen, p);\n    buf.utf8Write(path, p += 4, pathLen);\n    writeUInt32BE(buf, flags, p += pathLen);\n    if (attrsLen) {\n      p += 4;\n      if (attrsLen === ATTRS_BUF.length) buf.set(ATTRS_BUF, p);else bufferCopy(ATTRS_BUF, buf, 0, attrsLen, p);\n      p += attrsLen;\n    }\n    this._requests[reqid] = {\n      cb\n    };\n    const isBuffered = sendOrBuffer(this, buf);\n    this._debug && this._debug(`SFTP: Outbound: ${isBuffered ? 'Buffered' : 'Sending'} MKDIR`);\n  }\n  rmdir(path, cb) {\n    if (this.server) throw new Error('Client-only method called in server mode');\n\n    /*\n      uint32     id\n      string     path\n    */\n    const pathLen = Buffer.byteLength(path);\n    let p = 9;\n    const buf = Buffer.allocUnsafe(4 + 1 + 4 + 4 + pathLen);\n    writeUInt32BE(buf, buf.length - 4, 0);\n    buf[4] = REQUEST.RMDIR;\n    const reqid = this._writeReqid = this._writeReqid + 1 & MAX_REQID;\n    writeUInt32BE(buf, reqid, 5);\n    writeUInt32BE(buf, pathLen, p);\n    buf.utf8Write(path, p += 4, pathLen);\n    this._requests[reqid] = {\n      cb\n    };\n    const isBuffered = sendOrBuffer(this, buf);\n    this._debug && this._debug(`SFTP: Outbound: ${isBuffered ? 'Buffered' : 'Sending'} RMDIR`);\n  }\n  readdir(where, opts, cb) {\n    if (this.server) throw new Error('Client-only method called in server mode');\n    if (typeof opts === 'function') {\n      cb = opts;\n      opts = {};\n    }\n    if (typeof opts !== 'object' || opts === null) opts = {};\n    const doFilter = opts && opts.full ? false : true;\n    if (!Buffer.isBuffer(where) && typeof where !== 'string') throw new Error('missing directory handle or path');\n    if (typeof where === 'string') {\n      const entries = [];\n      let e = 0;\n      const reread = (err, handle) => {\n        if (err) return cb(err);\n        this.readdir(handle, opts, (err, list) => {\n          const eof = err && err.code === STATUS_CODE.EOF;\n          if (err && !eof) return this.close(handle, () => cb(err));\n          if (eof) {\n            return this.close(handle, err => {\n              if (err) return cb(err);\n              cb(undefined, entries);\n            });\n          }\n          for (let i = 0; i < list.length; ++i, ++e) entries[e] = list[i];\n          reread(undefined, handle);\n        });\n      };\n      return this.opendir(where, reread);\n    }\n\n    /*\n      uint32     id\n      string     handle\n    */\n    const handleLen = where.length;\n    let p = 9;\n    const buf = Buffer.allocUnsafe(4 + 1 + 4 + 4 + handleLen);\n    writeUInt32BE(buf, buf.length - 4, 0);\n    buf[4] = REQUEST.READDIR;\n    const reqid = this._writeReqid = this._writeReqid + 1 & MAX_REQID;\n    writeUInt32BE(buf, reqid, 5);\n    writeUInt32BE(buf, handleLen, p);\n    buf.set(where, p += 4);\n    this._requests[reqid] = {\n      cb: doFilter ? (err, list) => {\n        if (typeof cb !== 'function') return;\n        if (err) return cb(err);\n        for (let i = list.length - 1; i >= 0; --i) {\n          if (list[i].filename === '.' || list[i].filename === '..') list.splice(i, 1);\n        }\n        cb(undefined, list);\n      } : cb\n    };\n    const isBuffered = sendOrBuffer(this, buf);\n    this._debug && this._debug(`SFTP: Outbound: ${isBuffered ? 'Buffered' : 'Sending'} READDIR`);\n  }\n  fstat(handle, cb) {\n    if (this.server) throw new Error('Client-only method called in server mode');\n    if (!Buffer.isBuffer(handle)) throw new Error('handle is not a Buffer');\n\n    /*\n      uint32     id\n      string     handle\n    */\n    const handleLen = handle.length;\n    let p = 9;\n    const buf = Buffer.allocUnsafe(4 + 1 + 4 + 4 + handleLen);\n    writeUInt32BE(buf, buf.length - 4, 0);\n    buf[4] = REQUEST.FSTAT;\n    const reqid = this._writeReqid = this._writeReqid + 1 & MAX_REQID;\n    writeUInt32BE(buf, reqid, 5);\n    writeUInt32BE(buf, handleLen, p);\n    buf.set(handle, p += 4);\n    this._requests[reqid] = {\n      cb\n    };\n    const isBuffered = sendOrBuffer(this, buf);\n    this._debug && this._debug(`SFTP: Outbound: ${isBuffered ? 'Buffered' : 'Sending'} FSTAT`);\n  }\n  stat(path, cb) {\n    if (this.server) throw new Error('Client-only method called in server mode');\n\n    /*\n      uint32     id\n      string     path\n    */\n    const pathLen = Buffer.byteLength(path);\n    let p = 9;\n    const buf = Buffer.allocUnsafe(4 + 1 + 4 + 4 + pathLen);\n    writeUInt32BE(buf, buf.length - 4, 0);\n    buf[4] = REQUEST.STAT;\n    const reqid = this._writeReqid = this._writeReqid + 1 & MAX_REQID;\n    writeUInt32BE(buf, reqid, 5);\n    writeUInt32BE(buf, pathLen, p);\n    buf.utf8Write(path, p += 4, pathLen);\n    this._requests[reqid] = {\n      cb\n    };\n    const isBuffered = sendOrBuffer(this, buf);\n    this._debug && this._debug(`SFTP: Outbound: ${isBuffered ? 'Buffered' : 'Sending'} STAT`);\n  }\n  lstat(path, cb) {\n    if (this.server) throw new Error('Client-only method called in server mode');\n\n    /*\n      uint32     id\n      string     path\n    */\n    const pathLen = Buffer.byteLength(path);\n    let p = 9;\n    const buf = Buffer.allocUnsafe(4 + 1 + 4 + 4 + pathLen);\n    writeUInt32BE(buf, buf.length - 4, 0);\n    buf[4] = REQUEST.LSTAT;\n    const reqid = this._writeReqid = this._writeReqid + 1 & MAX_REQID;\n    writeUInt32BE(buf, reqid, 5);\n    writeUInt32BE(buf, pathLen, p);\n    buf.utf8Write(path, p += 4, pathLen);\n    this._requests[reqid] = {\n      cb\n    };\n    const isBuffered = sendOrBuffer(this, buf);\n    this._debug && this._debug(`SFTP: Outbound: ${isBuffered ? 'Buffered' : 'Sending'} LSTAT`);\n  }\n  opendir(path, cb) {\n    if (this.server) throw new Error('Client-only method called in server mode');\n\n    /*\n      uint32     id\n      string     path\n    */\n    const pathLen = Buffer.byteLength(path);\n    let p = 9;\n    const buf = Buffer.allocUnsafe(4 + 1 + 4 + 4 + pathLen);\n    writeUInt32BE(buf, buf.length - 4, 0);\n    buf[4] = REQUEST.OPENDIR;\n    const reqid = this._writeReqid = this._writeReqid + 1 & MAX_REQID;\n    writeUInt32BE(buf, reqid, 5);\n    writeUInt32BE(buf, pathLen, p);\n    buf.utf8Write(path, p += 4, pathLen);\n    this._requests[reqid] = {\n      cb\n    };\n    const isBuffered = sendOrBuffer(this, buf);\n    this._debug && this._debug(`SFTP: Outbound: ${isBuffered ? 'Buffered' : 'Sending'} OPENDIR`);\n  }\n  setstat(path, attrs, cb) {\n    if (this.server) throw new Error('Client-only method called in server mode');\n    let flags = 0;\n    let attrsLen = 0;\n    if (typeof attrs === 'object' && attrs !== null) {\n      attrs = attrsToBytes(attrs);\n      flags = attrs.flags;\n      attrsLen = attrs.nb;\n    } else if (typeof attrs === 'function') {\n      cb = attrs;\n    }\n\n    /*\n      uint32     id\n      string     path\n      ATTRS      attrs\n    */\n    const pathLen = Buffer.byteLength(path);\n    let p = 9;\n    const buf = Buffer.allocUnsafe(4 + 1 + 4 + 4 + pathLen + 4 + attrsLen);\n    writeUInt32BE(buf, buf.length - 4, 0);\n    buf[4] = REQUEST.SETSTAT;\n    const reqid = this._writeReqid = this._writeReqid + 1 & MAX_REQID;\n    writeUInt32BE(buf, reqid, 5);\n    writeUInt32BE(buf, pathLen, p);\n    buf.utf8Write(path, p += 4, pathLen);\n    writeUInt32BE(buf, flags, p += pathLen);\n    if (attrsLen) {\n      p += 4;\n      if (attrsLen === ATTRS_BUF.length) buf.set(ATTRS_BUF, p);else bufferCopy(ATTRS_BUF, buf, 0, attrsLen, p);\n      p += attrsLen;\n    }\n    this._requests[reqid] = {\n      cb\n    };\n    const isBuffered = sendOrBuffer(this, buf);\n    this._debug && this._debug(`SFTP: Outbound: ${isBuffered ? 'Buffered' : 'Sending'} SETSTAT`);\n  }\n  fsetstat(handle, attrs, cb) {\n    if (this.server) throw new Error('Client-only method called in server mode');\n    if (!Buffer.isBuffer(handle)) throw new Error('handle is not a Buffer');\n    let flags = 0;\n    let attrsLen = 0;\n    if (typeof attrs === 'object' && attrs !== null) {\n      attrs = attrsToBytes(attrs);\n      flags = attrs.flags;\n      attrsLen = attrs.nb;\n    } else if (typeof attrs === 'function') {\n      cb = attrs;\n    }\n\n    /*\n      uint32     id\n      string     handle\n      ATTRS      attrs\n    */\n    const handleLen = handle.length;\n    let p = 9;\n    const buf = Buffer.allocUnsafe(4 + 1 + 4 + 4 + handleLen + 4 + attrsLen);\n    writeUInt32BE(buf, buf.length - 4, 0);\n    buf[4] = REQUEST.FSETSTAT;\n    const reqid = this._writeReqid = this._writeReqid + 1 & MAX_REQID;\n    writeUInt32BE(buf, reqid, 5);\n    writeUInt32BE(buf, handleLen, p);\n    buf.set(handle, p += 4);\n    writeUInt32BE(buf, flags, p += handleLen);\n    if (attrsLen) {\n      p += 4;\n      if (attrsLen === ATTRS_BUF.length) buf.set(ATTRS_BUF, p);else bufferCopy(ATTRS_BUF, buf, 0, attrsLen, p);\n      p += attrsLen;\n    }\n    this._requests[reqid] = {\n      cb\n    };\n    const isBuffered = sendOrBuffer(this, buf);\n    this._debug && this._debug(`SFTP: Outbound: ${isBuffered ? 'Buffered' : 'Sending'} FSETSTAT`);\n  }\n  futimes(handle, atime, mtime, cb) {\n    return this.fsetstat(handle, {\n      atime: toUnixTimestamp(atime),\n      mtime: toUnixTimestamp(mtime)\n    }, cb);\n  }\n  utimes(path, atime, mtime, cb) {\n    return this.setstat(path, {\n      atime: toUnixTimestamp(atime),\n      mtime: toUnixTimestamp(mtime)\n    }, cb);\n  }\n  fchown(handle, uid, gid, cb) {\n    return this.fsetstat(handle, {\n      uid: uid,\n      gid: gid\n    }, cb);\n  }\n  chown(path, uid, gid, cb) {\n    return this.setstat(path, {\n      uid: uid,\n      gid: gid\n    }, cb);\n  }\n  fchmod(handle, mode, cb) {\n    return this.fsetstat(handle, {\n      mode: mode\n    }, cb);\n  }\n  chmod(path, mode, cb) {\n    return this.setstat(path, {\n      mode: mode\n    }, cb);\n  }\n  readlink(path, cb) {\n    if (this.server) throw new Error('Client-only method called in server mode');\n\n    /*\n      uint32     id\n      string     path\n    */\n    const pathLen = Buffer.byteLength(path);\n    let p = 9;\n    const buf = Buffer.allocUnsafe(4 + 1 + 4 + 4 + pathLen);\n    writeUInt32BE(buf, buf.length - 4, 0);\n    buf[4] = REQUEST.READLINK;\n    const reqid = this._writeReqid = this._writeReqid + 1 & MAX_REQID;\n    writeUInt32BE(buf, reqid, 5);\n    writeUInt32BE(buf, pathLen, p);\n    buf.utf8Write(path, p += 4, pathLen);\n    this._requests[reqid] = {\n      cb: (err, names) => {\n        if (typeof cb !== 'function') return;\n        if (err) return cb(err);\n        if (!names || !names.length) return cb(new Error('Response missing link info'));\n        cb(undefined, names[0].filename);\n      }\n    };\n    const isBuffered = sendOrBuffer(this, buf);\n    this._debug && this._debug(`SFTP: Outbound: ${isBuffered ? 'Buffered' : 'Sending'} READLINK`);\n  }\n  symlink(targetPath, linkPath, cb) {\n    if (this.server) throw new Error('Client-only method called in server mode');\n\n    /*\n      uint32     id\n      string     linkpath\n      string     targetpath\n    */\n    const linkLen = Buffer.byteLength(linkPath);\n    const targetLen = Buffer.byteLength(targetPath);\n    let p = 9;\n    const buf = Buffer.allocUnsafe(4 + 1 + 4 + 4 + linkLen + 4 + targetLen);\n    writeUInt32BE(buf, buf.length - 4, 0);\n    buf[4] = REQUEST.SYMLINK;\n    const reqid = this._writeReqid = this._writeReqid + 1 & MAX_REQID;\n    writeUInt32BE(buf, reqid, 5);\n    if (this._isOpenSSH) {\n      // OpenSSH has linkpath and targetpath positions switched\n      writeUInt32BE(buf, targetLen, p);\n      buf.utf8Write(targetPath, p += 4, targetLen);\n      writeUInt32BE(buf, linkLen, p += targetLen);\n      buf.utf8Write(linkPath, p += 4, linkLen);\n    } else {\n      writeUInt32BE(buf, linkLen, p);\n      buf.utf8Write(linkPath, p += 4, linkLen);\n      writeUInt32BE(buf, targetLen, p += linkLen);\n      buf.utf8Write(targetPath, p += 4, targetLen);\n    }\n    this._requests[reqid] = {\n      cb\n    };\n    const isBuffered = sendOrBuffer(this, buf);\n    this._debug && this._debug(`SFTP: Outbound: ${isBuffered ? 'Buffered' : 'Sending'} SYMLINK`);\n  }\n  realpath(path, cb) {\n    if (this.server) throw new Error('Client-only method called in server mode');\n\n    /*\n      uint32     id\n      string     path\n    */\n    const pathLen = Buffer.byteLength(path);\n    let p = 9;\n    const buf = Buffer.allocUnsafe(4 + 1 + 4 + 4 + pathLen);\n    writeUInt32BE(buf, buf.length - 4, 0);\n    buf[4] = REQUEST.REALPATH;\n    const reqid = this._writeReqid = this._writeReqid + 1 & MAX_REQID;\n    writeUInt32BE(buf, reqid, 5);\n    writeUInt32BE(buf, pathLen, p);\n    buf.utf8Write(path, p += 4, pathLen);\n    this._requests[reqid] = {\n      cb: (err, names) => {\n        if (typeof cb !== 'function') return;\n        if (err) return cb(err);\n        if (!names || !names.length) return cb(new Error('Response missing path info'));\n        cb(undefined, names[0].filename);\n      }\n    };\n    const isBuffered = sendOrBuffer(this, buf);\n    this._debug && this._debug(`SFTP: Outbound: ${isBuffered ? 'Buffered' : 'Sending'} REALPATH`);\n  }\n  // extended requests\n  ext_openssh_rename(oldPath, newPath, cb) {\n    if (this.server) throw new Error('Client-only method called in server mode');\n    const ext = this._extensions['posix-rename@openssh.com'];\n    if (!ext || ext !== '1') throw new Error('Server does not support this extended request');\n\n    /*\n      uint32    id\n      string    \"posix-rename@openssh.com\"\n      string    oldpath\n      string    newpath\n    */\n    const oldLen = Buffer.byteLength(oldPath);\n    const newLen = Buffer.byteLength(newPath);\n    let p = 9;\n    const buf = Buffer.allocUnsafe(4 + 1 + 4 + 4 + 24 + 4 + oldLen + 4 + newLen);\n    writeUInt32BE(buf, buf.length - 4, 0);\n    buf[4] = REQUEST.EXTENDED;\n    const reqid = this._writeReqid = this._writeReqid + 1 & MAX_REQID;\n    writeUInt32BE(buf, reqid, 5);\n    writeUInt32BE(buf, 24, p);\n    buf.utf8Write('posix-rename@openssh.com', p += 4, 24);\n    writeUInt32BE(buf, oldLen, p += 24);\n    buf.utf8Write(oldPath, p += 4, oldLen);\n    writeUInt32BE(buf, newLen, p += oldLen);\n    buf.utf8Write(newPath, p += 4, newLen);\n    this._requests[reqid] = {\n      cb\n    };\n    const isBuffered = sendOrBuffer(this, buf);\n    if (this._debug) {\n      const which = isBuffered ? 'Buffered' : 'Sending';\n      this._debug(`SFTP: Outbound: ${which} posix-rename@openssh.com`);\n    }\n  }\n  ext_openssh_statvfs(path, cb) {\n    if (this.server) throw new Error('Client-only method called in server mode');\n    const ext = this._extensions['statvfs@openssh.com'];\n    if (!ext || ext !== '2') throw new Error('Server does not support this extended request');\n\n    /*\n      uint32    id\n      string    \"statvfs@openssh.com\"\n      string    path\n    */\n    const pathLen = Buffer.byteLength(path);\n    let p = 9;\n    const buf = Buffer.allocUnsafe(4 + 1 + 4 + 4 + 19 + 4 + pathLen);\n    writeUInt32BE(buf, buf.length - 4, 0);\n    buf[4] = REQUEST.EXTENDED;\n    const reqid = this._writeReqid = this._writeReqid + 1 & MAX_REQID;\n    writeUInt32BE(buf, reqid, 5);\n    writeUInt32BE(buf, 19, p);\n    buf.utf8Write('statvfs@openssh.com', p += 4, 19);\n    writeUInt32BE(buf, pathLen, p += 19);\n    buf.utf8Write(path, p += 4, pathLen);\n    this._requests[reqid] = {\n      extended: 'statvfs@openssh.com',\n      cb\n    };\n    const isBuffered = sendOrBuffer(this, buf);\n    if (this._debug) {\n      const which = isBuffered ? 'Buffered' : 'Sending';\n      this._debug(`SFTP: Outbound: ${which} statvfs@openssh.com`);\n    }\n  }\n  ext_openssh_fstatvfs(handle, cb) {\n    if (this.server) throw new Error('Client-only method called in server mode');\n    const ext = this._extensions['fstatvfs@openssh.com'];\n    if (!ext || ext !== '2') throw new Error('Server does not support this extended request');\n    if (!Buffer.isBuffer(handle)) throw new Error('handle is not a Buffer');\n\n    /*\n      uint32    id\n      string    \"fstatvfs@openssh.com\"\n      string    handle\n    */\n    const handleLen = handle.length;\n    let p = 9;\n    const buf = Buffer.allocUnsafe(4 + 1 + 4 + 4 + 20 + 4 + handleLen);\n    writeUInt32BE(buf, buf.length - 4, 0);\n    buf[4] = REQUEST.EXTENDED;\n    const reqid = this._writeReqid = this._writeReqid + 1 & MAX_REQID;\n    writeUInt32BE(buf, reqid, 5);\n    writeUInt32BE(buf, 20, p);\n    buf.utf8Write('fstatvfs@openssh.com', p += 4, 20);\n    writeUInt32BE(buf, handleLen, p += 20);\n    buf.set(handle, p += 4);\n    this._requests[reqid] = {\n      extended: 'fstatvfs@openssh.com',\n      cb\n    };\n    const isBuffered = sendOrBuffer(this, buf);\n    if (this._debug) {\n      const which = isBuffered ? 'Buffered' : 'Sending';\n      this._debug(`SFTP: Outbound: ${which} fstatvfs@openssh.com`);\n    }\n  }\n  ext_openssh_hardlink(oldPath, newPath, cb) {\n    if (this.server) throw new Error('Client-only method called in server mode');\n    const ext = this._extensions['hardlink@openssh.com'];\n    if (ext !== '1') throw new Error('Server does not support this extended request');\n\n    /*\n      uint32    id\n      string    \"hardlink@openssh.com\"\n      string    oldpath\n      string    newpath\n    */\n    const oldLen = Buffer.byteLength(oldPath);\n    const newLen = Buffer.byteLength(newPath);\n    let p = 9;\n    const buf = Buffer.allocUnsafe(4 + 1 + 4 + 4 + 20 + 4 + oldLen + 4 + newLen);\n    writeUInt32BE(buf, buf.length - 4, 0);\n    buf[4] = REQUEST.EXTENDED;\n    const reqid = this._writeReqid = this._writeReqid + 1 & MAX_REQID;\n    writeUInt32BE(buf, reqid, 5);\n    writeUInt32BE(buf, 20, p);\n    buf.utf8Write('hardlink@openssh.com', p += 4, 20);\n    writeUInt32BE(buf, oldLen, p += 20);\n    buf.utf8Write(oldPath, p += 4, oldLen);\n    writeUInt32BE(buf, newLen, p += oldLen);\n    buf.utf8Write(newPath, p += 4, newLen);\n    this._requests[reqid] = {\n      cb\n    };\n    const isBuffered = sendOrBuffer(this, buf);\n    if (this._debug) {\n      const which = isBuffered ? 'Buffered' : 'Sending';\n      this._debug(`SFTP: Outbound: ${which} hardlink@openssh.com`);\n    }\n  }\n  ext_openssh_fsync(handle, cb) {\n    if (this.server) throw new Error('Client-only method called in server mode');\n    const ext = this._extensions['fsync@openssh.com'];\n    if (ext !== '1') throw new Error('Server does not support this extended request');\n    if (!Buffer.isBuffer(handle)) throw new Error('handle is not a Buffer');\n\n    /*\n      uint32    id\n      string    \"fsync@openssh.com\"\n      string    handle\n    */\n    const handleLen = handle.length;\n    let p = 9;\n    const buf = Buffer.allocUnsafe(4 + 1 + 4 + 4 + 17 + 4 + handleLen);\n    writeUInt32BE(buf, buf.length - 4, 0);\n    buf[4] = REQUEST.EXTENDED;\n    const reqid = this._writeReqid = this._writeReqid + 1 & MAX_REQID;\n    writeUInt32BE(buf, reqid, 5);\n    writeUInt32BE(buf, 17, p);\n    buf.utf8Write('fsync@openssh.com', p += 4, 17);\n    writeUInt32BE(buf, handleLen, p += 17);\n    buf.set(handle, p += 4);\n    this._requests[reqid] = {\n      cb\n    };\n    const isBuffered = sendOrBuffer(this, buf);\n    this._debug && this._debug(`SFTP: Outbound: ${isBuffered ? 'Buffered' : 'Sending'} fsync@openssh.com`);\n  }\n  ext_openssh_lsetstat(path, attrs, cb) {\n    if (this.server) throw new Error('Client-only method called in server mode');\n    const ext = this._extensions['lsetstat@openssh.com'];\n    if (ext !== '1') throw new Error('Server does not support this extended request');\n    let flags = 0;\n    let attrsLen = 0;\n    if (typeof attrs === 'object' && attrs !== null) {\n      attrs = attrsToBytes(attrs);\n      flags = attrs.flags;\n      attrsLen = attrs.nb;\n    } else if (typeof attrs === 'function') {\n      cb = attrs;\n    }\n\n    /*\n      uint32    id\n      string    \"lsetstat@openssh.com\"\n      string    path\n      ATTRS     attrs\n    */\n    const pathLen = Buffer.byteLength(path);\n    let p = 9;\n    const buf = Buffer.allocUnsafe(4 + 1 + 4 + 4 + 20 + 4 + pathLen + 4 + attrsLen);\n    writeUInt32BE(buf, buf.length - 4, 0);\n    buf[4] = REQUEST.EXTENDED;\n    const reqid = this._writeReqid = this._writeReqid + 1 & MAX_REQID;\n    writeUInt32BE(buf, reqid, 5);\n    writeUInt32BE(buf, 20, p);\n    buf.utf8Write('lsetstat@openssh.com', p += 4, 20);\n    writeUInt32BE(buf, pathLen, p += 20);\n    buf.utf8Write(path, p += 4, pathLen);\n    writeUInt32BE(buf, flags, p += pathLen);\n    if (attrsLen) {\n      p += 4;\n      if (attrsLen === ATTRS_BUF.length) buf.set(ATTRS_BUF, p);else bufferCopy(ATTRS_BUF, buf, 0, attrsLen, p);\n      p += attrsLen;\n    }\n    this._requests[reqid] = {\n      cb\n    };\n    const isBuffered = sendOrBuffer(this, buf);\n    if (this._debug) {\n      const status = isBuffered ? 'Buffered' : 'Sending';\n      this._debug(`SFTP: Outbound: ${status} lsetstat@openssh.com`);\n    }\n  }\n  ext_openssh_expandPath(path, cb) {\n    if (this.server) throw new Error('Client-only method called in server mode');\n    const ext = this._extensions['expand-path@openssh.com'];\n    if (ext !== '1') throw new Error('Server does not support this extended request');\n\n    /*\n      uint32    id\n      string    \"expand-path@openssh.com\"\n      string    path\n    */\n    const pathLen = Buffer.byteLength(path);\n    let p = 9;\n    const buf = Buffer.allocUnsafe(4 + 1 + 4 + 4 + 23 + 4 + pathLen);\n    writeUInt32BE(buf, buf.length - 4, 0);\n    buf[4] = REQUEST.EXTENDED;\n    const reqid = this._writeReqid = this._writeReqid + 1 & MAX_REQID;\n    writeUInt32BE(buf, reqid, 5);\n    writeUInt32BE(buf, 23, p);\n    buf.utf8Write('expand-path@openssh.com', p += 4, 23);\n    writeUInt32BE(buf, pathLen, p += 20);\n    buf.utf8Write(path, p += 4, pathLen);\n    this._requests[reqid] = {\n      cb: (err, names) => {\n        if (typeof cb !== 'function') return;\n        if (err) return cb(err);\n        if (!names || !names.length) return cb(new Error('Response missing expanded path'));\n        cb(undefined, names[0].filename);\n      }\n    };\n    const isBuffered = sendOrBuffer(this, buf);\n    if (this._debug) {\n      const status = isBuffered ? 'Buffered' : 'Sending';\n      this._debug(`SFTP: Outbound: ${status} expand-path@openssh.com`);\n    }\n  }\n  ext_copy_data(srcHandle, srcOffset, len, dstHandle, dstOffset, cb) {\n    if (this.server) throw new Error('Client-only method called in server mode');\n    const ext = this._extensions['copy-data'];\n    if (ext !== '1') throw new Error('Server does not support this extended request');\n    if (!Buffer.isBuffer(srcHandle)) throw new Error('Source handle is not a Buffer');\n    if (!Buffer.isBuffer(dstHandle)) throw new Error('Destination handle is not a Buffer');\n\n    /*\n      uint32    id\n      string    \"copy-data\"\n      string    read-from-handle\n      uint64    read-from-offset\n      uint64    read-data-length\n      string    write-to-handle\n      uint64    write-to-offset\n    */\n    let p = 0;\n    const buf = Buffer.allocUnsafe(4 + 1 + 4 + 4 + 9 + 4 + srcHandle.length + 8 + 8 + 4 + dstHandle.length + 8);\n    writeUInt32BE(buf, buf.length - 4, p);\n    p += 4;\n    buf[p] = REQUEST.EXTENDED;\n    ++p;\n    const reqid = this._writeReqid = this._writeReqid + 1 & MAX_REQID;\n    writeUInt32BE(buf, reqid, p);\n    p += 4;\n    writeUInt32BE(buf, 9, p);\n    p += 4;\n    buf.utf8Write('copy-data', p, 9);\n    p += 9;\n    writeUInt32BE(buf, srcHandle.length, p);\n    p += 4;\n    buf.set(srcHandle, p);\n    p += srcHandle.length;\n    for (let i = 7; i >= 0; --i) {\n      buf[p + i] = srcOffset & 0xFF;\n      srcOffset /= 256;\n    }\n    p += 8;\n    for (let i = 7; i >= 0; --i) {\n      buf[p + i] = len & 0xFF;\n      len /= 256;\n    }\n    p += 8;\n    writeUInt32BE(buf, dstHandle.length, p);\n    p += 4;\n    buf.set(dstHandle, p);\n    p += dstHandle.length;\n    for (let i = 7; i >= 0; --i) {\n      buf[p + i] = dstOffset & 0xFF;\n      dstOffset /= 256;\n    }\n    this._requests[reqid] = {\n      cb\n    };\n    const isBuffered = sendOrBuffer(this, buf);\n    if (this._debug) {\n      const status = isBuffered ? 'Buffered' : 'Sending';\n      this._debug(`SFTP: Outbound: ${status} copy-data`);\n    }\n  }\n  ext_home_dir(username, cb) {\n    if (this.server) throw new Error('Client-only method called in server mode');\n    const ext = this._extensions['home-directory'];\n    if (ext !== '1') throw new Error('Server does not support this extended request');\n    if (typeof username !== 'string') throw new TypeError('username is not a string');\n\n    /*\n      uint32    id\n      string    \"home-directory\"\n      string    username\n    */\n    let p = 0;\n    const usernameLen = Buffer.byteLength(username);\n    const buf = Buffer.allocUnsafe(4 + 1 + 4 + 4 + 14 + 4 + usernameLen);\n    writeUInt32BE(buf, buf.length - 4, p);\n    p += 4;\n    buf[p] = REQUEST.EXTENDED;\n    ++p;\n    const reqid = this._writeReqid = this._writeReqid + 1 & MAX_REQID;\n    writeUInt32BE(buf, reqid, p);\n    p += 4;\n    writeUInt32BE(buf, 14, p);\n    p += 4;\n    buf.utf8Write('home-directory', p, 14);\n    p += 14;\n    writeUInt32BE(buf, usernameLen, p);\n    p += 4;\n    buf.utf8Write(username, p, usernameLen);\n    p += usernameLen;\n    this._requests[reqid] = {\n      cb: (err, names) => {\n        if (typeof cb !== 'function') return;\n        if (err) return cb(err);\n        if (!names || !names.length) return cb(new Error('Response missing home directory'));\n        cb(undefined, names[0].filename);\n      }\n    };\n    const isBuffered = sendOrBuffer(this, buf);\n    if (this._debug) {\n      const status = isBuffered ? 'Buffered' : 'Sending';\n      this._debug(`SFTP: Outbound: ${status} home-directory`);\n    }\n  }\n  ext_users_groups(uids, gids, cb) {\n    if (this.server) throw new Error('Client-only method called in server mode');\n    const ext = this._extensions['users-groups-by-id@openssh.com'];\n    if (ext !== '1') throw new Error('Server does not support this extended request');\n    if (!Array.isArray(uids)) throw new TypeError('uids is not an array');\n    for (const val of uids) {\n      if (!Number.isInteger(val) || val < 0 || val > 2 ** 32 - 1) throw new Error('uid values must all be 32-bit unsigned integers');\n    }\n    if (!Array.isArray(gids)) throw new TypeError('gids is not an array');\n    for (const val of gids) {\n      if (!Number.isInteger(val) || val < 0 || val > 2 ** 32 - 1) throw new Error('gid values must all be 32-bit unsigned integers');\n    }\n\n    /*\n      uint32    id\n      string    \"users-groups-by-id@openssh.com\"\n      string    uids\n        uint32    uid1\n        ...\n      string    gids\n        uint32    gid1\n        ...\n    */\n    let p = 0;\n    const buf = Buffer.allocUnsafe(4 + 1 + 4 + 4 + 30 + 4 + 4 * uids.length + 4 + 4 * gids.length);\n    writeUInt32BE(buf, buf.length - 4, p);\n    p += 4;\n    buf[p] = REQUEST.EXTENDED;\n    ++p;\n    const reqid = this._writeReqid = this._writeReqid + 1 & MAX_REQID;\n    writeUInt32BE(buf, reqid, p);\n    p += 4;\n    writeUInt32BE(buf, 30, p);\n    p += 4;\n    buf.utf8Write('users-groups-by-id@openssh.com', p, 30);\n    p += 30;\n    writeUInt32BE(buf, 4 * uids.length, p);\n    p += 4;\n    for (const val of uids) {\n      writeUInt32BE(buf, val, p);\n      p += 4;\n    }\n    writeUInt32BE(buf, 4 * gids.length, p);\n    p += 4;\n    for (const val of gids) {\n      writeUInt32BE(buf, val, p);\n      p += 4;\n    }\n    this._requests[reqid] = {\n      extended: 'users-groups-by-id@openssh.com',\n      cb\n    };\n    const isBuffered = sendOrBuffer(this, buf);\n    if (this._debug) {\n      const status = isBuffered ? 'Buffered' : 'Sending';\n      this._debug(`SFTP: Outbound: ${status} users-groups-by-id@openssh.com`);\n    }\n  }\n  // ===========================================================================\n  // Server-specific ===========================================================\n  // ===========================================================================\n  handle(reqid, handle) {\n    if (!this.server) throw new Error('Server-only method called in client mode');\n    if (!Buffer.isBuffer(handle)) throw new Error('handle is not a Buffer');\n    const handleLen = handle.length;\n    if (handleLen > 256) throw new Error('handle too large (> 256 bytes)');\n    let p = 9;\n    const buf = Buffer.allocUnsafe(4 + 1 + 4 + 4 + handleLen);\n    writeUInt32BE(buf, buf.length - 4, 0);\n    buf[4] = RESPONSE.HANDLE;\n    writeUInt32BE(buf, reqid, 5);\n    writeUInt32BE(buf, handleLen, p);\n    if (handleLen) buf.set(handle, p += 4);\n    const isBuffered = sendOrBuffer(this, buf);\n    this._debug && this._debug(`SFTP: Outbound: ${isBuffered ? 'Buffered' : 'Sending'} HANDLE`);\n  }\n  status(reqid, code, message) {\n    if (!this.server) throw new Error('Server-only method called in client mode');\n    if (!VALID_STATUS_CODES.has(code)) throw new Error(`Bad status code: ${code}`);\n    message || (message = '');\n    const msgLen = Buffer.byteLength(message);\n    let p = 9;\n    const buf = Buffer.allocUnsafe(4 + 1 + 4 + 4 + 4 + msgLen + 4);\n    writeUInt32BE(buf, buf.length - 4, 0);\n    buf[4] = RESPONSE.STATUS;\n    writeUInt32BE(buf, reqid, 5);\n    writeUInt32BE(buf, code, p);\n    writeUInt32BE(buf, msgLen, p += 4);\n    p += 4;\n    if (msgLen) {\n      buf.utf8Write(message, p, msgLen);\n      p += msgLen;\n    }\n    writeUInt32BE(buf, 0, p); // Empty language tag\n\n    const isBuffered = sendOrBuffer(this, buf);\n    this._debug && this._debug(`SFTP: Outbound: ${isBuffered ? 'Buffered' : 'Sending'} STATUS`);\n  }\n  data(reqid, data, encoding) {\n    if (!this.server) throw new Error('Server-only method called in client mode');\n    const isBuffer = Buffer.isBuffer(data);\n    if (!isBuffer && typeof data !== 'string') throw new Error('data is not a Buffer or string');\n    let isUTF8;\n    if (!isBuffer && !encoding) {\n      encoding = undefined;\n      isUTF8 = true;\n    }\n    const dataLen = isBuffer ? data.length : Buffer.byteLength(data, encoding);\n    let p = 9;\n    const buf = Buffer.allocUnsafe(4 + 1 + 4 + 4 + dataLen);\n    writeUInt32BE(buf, buf.length - 4, 0);\n    buf[4] = RESPONSE.DATA;\n    writeUInt32BE(buf, reqid, 5);\n    writeUInt32BE(buf, dataLen, p);\n    if (dataLen) {\n      if (isBuffer) buf.set(data, p += 4);else if (isUTF8) buf.utf8Write(data, p += 4, dataLen);else buf.write(data, p += 4, dataLen, encoding);\n    }\n    const isBuffered = sendOrBuffer(this, buf);\n    this._debug && this._debug(`SFTP: Outbound: ${isBuffered ? 'Buffered' : 'Sending'} DATA`);\n  }\n  name(reqid, names) {\n    if (!this.server) throw new Error('Server-only method called in client mode');\n    if (!Array.isArray(names)) {\n      if (typeof names !== 'object' || names === null) throw new Error('names is not an object or array');\n      names = [names];\n    }\n    const count = names.length;\n    let namesLen = 0;\n    let nameAttrs;\n    const attrs = [];\n    for (let i = 0; i < count; ++i) {\n      const name = names[i];\n      const filename = !name || !name.filename || typeof name.filename !== 'string' ? '' : name.filename;\n      namesLen += 4 + Buffer.byteLength(filename);\n      const longname = !name || !name.longname || typeof name.longname !== 'string' ? '' : name.longname;\n      namesLen += 4 + Buffer.byteLength(longname);\n      if (typeof name.attrs === 'object' && name.attrs !== null) {\n        nameAttrs = attrsToBytes(name.attrs);\n        namesLen += 4 + nameAttrs.nb;\n        if (nameAttrs.nb) {\n          let bytes;\n          if (nameAttrs.nb === ATTRS_BUF.length) {\n            bytes = new Uint8Array(ATTRS_BUF);\n          } else {\n            bytes = new Uint8Array(nameAttrs.nb);\n            bufferCopy(ATTRS_BUF, bytes, 0, nameAttrs.nb, 0);\n          }\n          nameAttrs.bytes = bytes;\n        }\n        attrs.push(nameAttrs);\n      } else {\n        namesLen += 4;\n        attrs.push(null);\n      }\n    }\n    let p = 9;\n    const buf = Buffer.allocUnsafe(4 + 1 + 4 + 4 + namesLen);\n    writeUInt32BE(buf, buf.length - 4, 0);\n    buf[4] = RESPONSE.NAME;\n    writeUInt32BE(buf, reqid, 5);\n    writeUInt32BE(buf, count, p);\n    p += 4;\n    for (let i = 0; i < count; ++i) {\n      const name = names[i];\n      {\n        const filename = !name || !name.filename || typeof name.filename !== 'string' ? '' : name.filename;\n        const len = Buffer.byteLength(filename);\n        writeUInt32BE(buf, len, p);\n        p += 4;\n        if (len) {\n          buf.utf8Write(filename, p, len);\n          p += len;\n        }\n      }\n      {\n        const longname = !name || !name.longname || typeof name.longname !== 'string' ? '' : name.longname;\n        const len = Buffer.byteLength(longname);\n        writeUInt32BE(buf, len, p);\n        p += 4;\n        if (len) {\n          buf.utf8Write(longname, p, len);\n          p += len;\n        }\n      }\n      const attr = attrs[i];\n      if (attr) {\n        writeUInt32BE(buf, attr.flags, p);\n        p += 4;\n        if (attr.flags && attr.bytes) {\n          buf.set(attr.bytes, p);\n          p += attr.nb;\n        }\n      } else {\n        writeUInt32BE(buf, 0, p);\n        p += 4;\n      }\n    }\n    const isBuffered = sendOrBuffer(this, buf);\n    this._debug && this._debug(`SFTP: Outbound: ${isBuffered ? 'Buffered' : 'Sending'} NAME`);\n  }\n  attrs(reqid, attrs) {\n    if (!this.server) throw new Error('Server-only method called in client mode');\n    if (typeof attrs !== 'object' || attrs === null) throw new Error('attrs is not an object');\n    attrs = attrsToBytes(attrs);\n    const flags = attrs.flags;\n    const attrsLen = attrs.nb;\n    let p = 9;\n    const buf = Buffer.allocUnsafe(4 + 1 + 4 + 4 + attrsLen);\n    writeUInt32BE(buf, buf.length - 4, 0);\n    buf[4] = RESPONSE.ATTRS;\n    writeUInt32BE(buf, reqid, 5);\n    writeUInt32BE(buf, flags, p);\n    if (attrsLen) {\n      p += 4;\n      if (attrsLen === ATTRS_BUF.length) buf.set(ATTRS_BUF, p);else bufferCopy(ATTRS_BUF, buf, 0, attrsLen, p);\n      p += attrsLen;\n    }\n    const isBuffered = sendOrBuffer(this, buf);\n    this._debug && this._debug(`SFTP: Outbound: ${isBuffered ? 'Buffered' : 'Sending'} ATTRS`);\n  }\n}\nfunction tryCreateBuffer(size) {\n  try {\n    return Buffer.allocUnsafe(size);\n  } catch (ex) {\n    return ex;\n  }\n}\nfunction read_(self, handle, buf, off, len, position, cb, req_) {\n  const maxDataLen = self._maxReadLen;\n  const overflow = Math.max(len - maxDataLen, 0);\n  if (overflow) len = maxDataLen;\n\n  /*\n    uint32     id\n    string     handle\n    uint64     offset\n    uint32     len\n  */\n  const handleLen = handle.length;\n  let p = 9;\n  let pos = position;\n  const out = Buffer.allocUnsafe(4 + 1 + 4 + 4 + handleLen + 8 + 4);\n  writeUInt32BE(out, out.length - 4, 0);\n  out[4] = REQUEST.READ;\n  const reqid = self._writeReqid = self._writeReqid + 1 & MAX_REQID;\n  writeUInt32BE(out, reqid, 5);\n  writeUInt32BE(out, handleLen, p);\n  out.set(handle, p += 4);\n  p += handleLen;\n  for (let i = 7; i >= 0; --i) {\n    out[p + i] = pos & 0xFF;\n    pos /= 256;\n  }\n  writeUInt32BE(out, len, p += 8);\n  if (typeof cb !== 'function') cb = noop;\n  const req = req_ || {\n    nb: 0,\n    position,\n    off,\n    origOff: off,\n    len: undefined,\n    overflow: undefined,\n    cb: (err, data, nb) => {\n      const len = req.len;\n      const overflow = req.overflow;\n      if (err) {\n        if (cb._wantEOFError || err.code !== STATUS_CODE.EOF) return cb(err);\n      } else if (nb > len) {\n        return cb(new Error('Received more data than requested'));\n      } else if (nb === len && overflow) {\n        req.nb += nb;\n        req.position += nb;\n        req.off += nb;\n        read_(self, handle, buf, req.off, overflow, req.position, cb, req);\n        return;\n      }\n      nb = nb || 0;\n      if (req.origOff === 0 && buf.length === req.nb) data = buf;else data = bufferSlice(buf, req.origOff, req.origOff + req.nb + nb);\n      cb(undefined, req.nb + nb, data, req.position);\n    },\n    buffer: undefined\n  };\n  req.len = len;\n  req.overflow = overflow;\n\n  // TODO: avoid creating multiple buffer slices when we need to re-call read_()\n  // because of overflow\n  req.buffer = bufferSlice(buf, off, off + len);\n  self._requests[reqid] = req;\n  const isBuffered = sendOrBuffer(self, out);\n  self._debug && self._debug(`SFTP: Outbound: ${isBuffered ? 'Buffered' : 'Sending'} READ`);\n}\nfunction fastXfer(src, dst, srcPath, dstPath, opts, cb) {\n  let concurrency = 64;\n  let chunkSize = 32768;\n  let onstep;\n  let mode;\n  let fileSize;\n  if (typeof opts === 'function') {\n    cb = opts;\n  } else if (typeof opts === 'object' && opts !== null) {\n    if (typeof opts.concurrency === 'number' && opts.concurrency > 0 && !isNaN(opts.concurrency)) {\n      concurrency = opts.concurrency;\n    }\n    if (typeof opts.chunkSize === 'number' && opts.chunkSize > 0 && !isNaN(opts.chunkSize)) {\n      chunkSize = opts.chunkSize;\n    }\n    if (typeof opts.fileSize === 'number' && opts.fileSize > 0 && !isNaN(opts.fileSize)) {\n      fileSize = opts.fileSize;\n    }\n    if (typeof opts.step === 'function') onstep = opts.step;\n    if (typeof opts.mode === 'string' || typeof opts.mode === 'number') mode = modeNum(opts.mode);\n  }\n\n  // Internal state variables\n  let fsize;\n  let pdst = 0;\n  let total = 0;\n  let hadError = false;\n  let srcHandle;\n  let dstHandle;\n  let readbuf;\n  let bufsize = chunkSize * concurrency;\n  function onerror(err) {\n    if (hadError) return;\n    hadError = true;\n    let left = 0;\n    let cbfinal;\n    if (srcHandle || dstHandle) {\n      cbfinal = () => {\n        if (--left === 0) cb(err);\n      };\n      if (srcHandle && (src === fs || src.outgoing.state === 'open')) ++left;\n      if (dstHandle && (dst === fs || dst.outgoing.state === 'open')) ++left;\n      if (srcHandle && (src === fs || src.outgoing.state === 'open')) src.close(srcHandle, cbfinal);\n      if (dstHandle && (dst === fs || dst.outgoing.state === 'open')) dst.close(dstHandle, cbfinal);\n    } else {\n      cb(err);\n    }\n  }\n  src.open(srcPath, 'r', (err, sourceHandle) => {\n    if (err) return onerror(err);\n    srcHandle = sourceHandle;\n    if (fileSize === undefined) src.fstat(srcHandle, tryStat);else tryStat(null, {\n      size: fileSize\n    });\n    function tryStat(err, attrs) {\n      if (err) {\n        if (src !== fs) {\n          // Try stat() for sftp servers that may not support fstat() for\n          // whatever reason\n          src.stat(srcPath, (err_, attrs_) => {\n            if (err_) return onerror(err);\n            tryStat(null, attrs_);\n          });\n          return;\n        }\n        return onerror(err);\n      }\n      fsize = attrs.size;\n      dst.open(dstPath, 'w', (err, destHandle) => {\n        if (err) return onerror(err);\n        dstHandle = destHandle;\n        if (fsize <= 0) return onerror();\n\n        // Use less memory where possible\n        while (bufsize > fsize) {\n          if (concurrency === 1) {\n            bufsize = fsize;\n            break;\n          }\n          bufsize -= chunkSize;\n          --concurrency;\n        }\n        readbuf = tryCreateBuffer(bufsize);\n        if (readbuf instanceof Error) return onerror(readbuf);\n        if (mode !== undefined) {\n          dst.fchmod(dstHandle, mode, function tryAgain(err) {\n            if (err) {\n              // Try chmod() for sftp servers that may not support fchmod()\n              // for whatever reason\n              dst.chmod(dstPath, mode, err_ => tryAgain());\n              return;\n            }\n            startReads();\n          });\n        } else {\n          startReads();\n        }\n        function onread(err, nb, data, dstpos, datapos, origChunkLen) {\n          if (err) return onerror(err);\n          datapos = datapos || 0;\n          dst.write(dstHandle, readbuf, datapos, nb, dstpos, writeCb);\n          function writeCb(err) {\n            if (err) return onerror(err);\n            total += nb;\n            onstep && onstep(total, nb, fsize);\n            if (nb < origChunkLen) return singleRead(datapos, dstpos + nb, origChunkLen - nb);\n            if (total === fsize) {\n              dst.close(dstHandle, err => {\n                dstHandle = undefined;\n                if (err) return onerror(err);\n                src.close(srcHandle, err => {\n                  srcHandle = undefined;\n                  if (err) return onerror(err);\n                  cb();\n                });\n              });\n              return;\n            }\n            if (pdst >= fsize) return;\n            const chunk = pdst + chunkSize > fsize ? fsize - pdst : chunkSize;\n            singleRead(datapos, pdst, chunk);\n            pdst += chunk;\n          }\n        }\n        function makeCb(psrc, pdst, chunk) {\n          return (err, nb, data) => {\n            onread(err, nb, data, pdst, psrc, chunk);\n          };\n        }\n        function singleRead(psrc, pdst, chunk) {\n          src.read(srcHandle, readbuf, psrc, chunk, pdst, makeCb(psrc, pdst, chunk));\n        }\n        function startReads() {\n          let reads = 0;\n          let psrc = 0;\n          while (pdst < fsize && reads < concurrency) {\n            const chunk = pdst + chunkSize > fsize ? fsize - pdst : chunkSize;\n            singleRead(psrc, pdst, chunk);\n            psrc += chunk;\n            pdst += chunk;\n            ++reads;\n          }\n        }\n      });\n    }\n  });\n}\nfunction writeAll(sftp, handle, buffer, offset, length, position, callback_) {\n  const callback = typeof callback_ === 'function' ? callback_ : undefined;\n  sftp.write(handle, buffer, offset, length, position, (writeErr, written) => {\n    if (writeErr) {\n      return sftp.close(handle, () => {\n        callback && callback(writeErr);\n      });\n    }\n    if (written === length) {\n      sftp.close(handle, callback);\n    } else {\n      offset += written;\n      length -= written;\n      position += written;\n      writeAll(sftp, handle, buffer, offset, length, position, callback);\n    }\n  });\n}\nclass Stats {\n  constructor(initial) {\n    this.mode = initial && initial.mode;\n    this.uid = initial && initial.uid;\n    this.gid = initial && initial.gid;\n    this.size = initial && initial.size;\n    this.atime = initial && initial.atime;\n    this.mtime = initial && initial.mtime;\n    this.extended = initial && initial.extended;\n  }\n  isDirectory() {\n    return (this.mode & constants.S_IFMT) === constants.S_IFDIR;\n  }\n  isFile() {\n    return (this.mode & constants.S_IFMT) === constants.S_IFREG;\n  }\n  isBlockDevice() {\n    return (this.mode & constants.S_IFMT) === constants.S_IFBLK;\n  }\n  isCharacterDevice() {\n    return (this.mode & constants.S_IFMT) === constants.S_IFCHR;\n  }\n  isSymbolicLink() {\n    return (this.mode & constants.S_IFMT) === constants.S_IFLNK;\n  }\n  isFIFO() {\n    return (this.mode & constants.S_IFMT) === constants.S_IFIFO;\n  }\n  isSocket() {\n    return (this.mode & constants.S_IFMT) === constants.S_IFSOCK;\n  }\n}\nfunction attrsToBytes(attrs) {\n  let flags = 0;\n  let nb = 0;\n  if (typeof attrs === 'object' && attrs !== null) {\n    if (typeof attrs.size === 'number') {\n      flags |= ATTR.SIZE;\n      const val = attrs.size;\n      // Big Endian\n      ATTRS_BUF[nb++] = val / 72057594037927940; // 2**56\n      ATTRS_BUF[nb++] = val / 281474976710656; // 2**48\n      ATTRS_BUF[nb++] = val / 1099511627776; // 2**40\n      ATTRS_BUF[nb++] = val / 4294967296; // 2**32\n      ATTRS_BUF[nb++] = val / 16777216; // 2**24\n      ATTRS_BUF[nb++] = val / 65536; // 2**16\n      ATTRS_BUF[nb++] = val / 256; // 2**8\n      ATTRS_BUF[nb++] = val;\n    }\n    if (typeof attrs.uid === 'number' && typeof attrs.gid === 'number') {\n      flags |= ATTR.UIDGID;\n      const uid = attrs.uid;\n      const gid = attrs.gid;\n      // Big Endian\n      ATTRS_BUF[nb++] = uid >>> 24;\n      ATTRS_BUF[nb++] = uid >>> 16;\n      ATTRS_BUF[nb++] = uid >>> 8;\n      ATTRS_BUF[nb++] = uid;\n      ATTRS_BUF[nb++] = gid >>> 24;\n      ATTRS_BUF[nb++] = gid >>> 16;\n      ATTRS_BUF[nb++] = gid >>> 8;\n      ATTRS_BUF[nb++] = gid;\n    }\n    if (typeof attrs.mode === 'number' || typeof attrs.mode === 'string') {\n      const mode = modeNum(attrs.mode);\n      flags |= ATTR.PERMISSIONS;\n      // Big Endian\n      ATTRS_BUF[nb++] = mode >>> 24;\n      ATTRS_BUF[nb++] = mode >>> 16;\n      ATTRS_BUF[nb++] = mode >>> 8;\n      ATTRS_BUF[nb++] = mode;\n    }\n    if ((typeof attrs.atime === 'number' || isDate(attrs.atime)) && (typeof attrs.mtime === 'number' || isDate(attrs.mtime))) {\n      const atime = toUnixTimestamp(attrs.atime);\n      const mtime = toUnixTimestamp(attrs.mtime);\n      flags |= ATTR.ACMODTIME;\n      // Big Endian\n      ATTRS_BUF[nb++] = atime >>> 24;\n      ATTRS_BUF[nb++] = atime >>> 16;\n      ATTRS_BUF[nb++] = atime >>> 8;\n      ATTRS_BUF[nb++] = atime;\n      ATTRS_BUF[nb++] = mtime >>> 24;\n      ATTRS_BUF[nb++] = mtime >>> 16;\n      ATTRS_BUF[nb++] = mtime >>> 8;\n      ATTRS_BUF[nb++] = mtime;\n    }\n    // TODO: extended attributes\n  }\n\n  return {\n    flags,\n    nb\n  };\n}\nfunction toUnixTimestamp(time) {\n  // eslint-disable-next-line no-self-compare\n  if (typeof time === 'number' && time === time)\n    // Valid, non-NaN number\n    return time;\n  if (isDate(time)) return parseInt(time.getTime() / 1000, 10);\n  throw new Error(`Cannot parse time: ${time}`);\n}\nfunction modeNum(mode) {\n  // eslint-disable-next-line no-self-compare\n  if (typeof mode === 'number' && mode === mode)\n    // Valid, non-NaN number\n    return mode;\n  if (typeof mode === 'string') return modeNum(parseInt(mode, 8));\n  throw new Error(`Cannot parse mode: ${mode}`);\n}\nconst stringFlagMap = {\n  'r': OPEN_MODE.READ,\n  'r+': OPEN_MODE.READ | OPEN_MODE.WRITE,\n  'w': OPEN_MODE.TRUNC | OPEN_MODE.CREAT | OPEN_MODE.WRITE,\n  'wx': OPEN_MODE.TRUNC | OPEN_MODE.CREAT | OPEN_MODE.WRITE | OPEN_MODE.EXCL,\n  'xw': OPEN_MODE.TRUNC | OPEN_MODE.CREAT | OPEN_MODE.WRITE | OPEN_MODE.EXCL,\n  'w+': OPEN_MODE.TRUNC | OPEN_MODE.CREAT | OPEN_MODE.READ | OPEN_MODE.WRITE,\n  'wx+': OPEN_MODE.TRUNC | OPEN_MODE.CREAT | OPEN_MODE.READ | OPEN_MODE.WRITE | OPEN_MODE.EXCL,\n  'xw+': OPEN_MODE.TRUNC | OPEN_MODE.CREAT | OPEN_MODE.READ | OPEN_MODE.WRITE | OPEN_MODE.EXCL,\n  'a': OPEN_MODE.APPEND | OPEN_MODE.CREAT | OPEN_MODE.WRITE,\n  'ax': OPEN_MODE.APPEND | OPEN_MODE.CREAT | OPEN_MODE.WRITE | OPEN_MODE.EXCL,\n  'xa': OPEN_MODE.APPEND | OPEN_MODE.CREAT | OPEN_MODE.WRITE | OPEN_MODE.EXCL,\n  'a+': OPEN_MODE.APPEND | OPEN_MODE.CREAT | OPEN_MODE.READ | OPEN_MODE.WRITE,\n  'ax+': OPEN_MODE.APPEND | OPEN_MODE.CREAT | OPEN_MODE.READ | OPEN_MODE.WRITE | OPEN_MODE.EXCL,\n  'xa+': OPEN_MODE.APPEND | OPEN_MODE.CREAT | OPEN_MODE.READ | OPEN_MODE.WRITE | OPEN_MODE.EXCL\n};\nfunction stringToFlags(str) {\n  const flags = stringFlagMap[str];\n  return flags !== undefined ? flags : null;\n}\nconst flagsToString = (() => {\n  const stringFlagMapKeys = Object.keys(stringFlagMap);\n  return flags => {\n    for (let i = 0; i < stringFlagMapKeys.length; ++i) {\n      const key = stringFlagMapKeys[i];\n      if (stringFlagMap[key] === flags) return key;\n    }\n    return null;\n  };\n})();\nfunction readAttrs(biOpt) {\n  /*\n    uint32   flags\n    uint64   size           present only if flag SSH_FILEXFER_ATTR_SIZE\n    uint32   uid            present only if flag SSH_FILEXFER_ATTR_UIDGID\n    uint32   gid            present only if flag SSH_FILEXFER_ATTR_UIDGID\n    uint32   permissions    present only if flag SSH_FILEXFER_ATTR_PERMISSIONS\n    uint32   atime          present only if flag SSH_FILEXFER_ACMODTIME\n    uint32   mtime          present only if flag SSH_FILEXFER_ACMODTIME\n    uint32   extended_count present only if flag SSH_FILEXFER_ATTR_EXTENDED\n    string   extended_type\n    string   extended_data\n    ...      more extended data (extended_type - extended_data pairs),\n               so that number of pairs equals extended_count\n  */\n  const flags = bufferParser.readUInt32BE();\n  if (flags === undefined) return;\n  const attrs = new Stats();\n  if (flags & ATTR.SIZE) {\n    const size = bufferParser.readUInt64BE(biOpt);\n    if (size === undefined) return;\n    attrs.size = size;\n  }\n  if (flags & ATTR.UIDGID) {\n    const uid = bufferParser.readUInt32BE();\n    const gid = bufferParser.readUInt32BE();\n    if (gid === undefined) return;\n    attrs.uid = uid;\n    attrs.gid = gid;\n  }\n  if (flags & ATTR.PERMISSIONS) {\n    const mode = bufferParser.readUInt32BE();\n    if (mode === undefined) return;\n    attrs.mode = mode;\n  }\n  if (flags & ATTR.ACMODTIME) {\n    const atime = bufferParser.readUInt32BE();\n    const mtime = bufferParser.readUInt32BE();\n    if (mtime === undefined) return;\n    attrs.atime = atime;\n    attrs.mtime = mtime;\n  }\n  if (flags & ATTR.EXTENDED) {\n    const count = bufferParser.readUInt32BE();\n    if (count === undefined) return;\n    const extended = {};\n    for (let i = 0; i < count; ++i) {\n      const type = bufferParser.readString(true);\n      const data = bufferParser.readString();\n      if (data === undefined) return;\n      extended[type] = data;\n    }\n    attrs.extended = extended;\n  }\n  return attrs;\n}\nfunction sendOrBuffer(sftp, payload) {\n  const ret = tryWritePayload(sftp, payload);\n  if (ret !== undefined) {\n    sftp._buffer.push(ret);\n    return false;\n  }\n  return true;\n}\nfunction tryWritePayload(sftp, payload) {\n  const outgoing = sftp.outgoing;\n  if (outgoing.state !== 'open') return;\n  if (outgoing.window === 0) {\n    sftp._waitWindow = true;\n    sftp._chunkcb = drainBuffer;\n    return payload;\n  }\n  let ret;\n  const len = payload.length;\n  let p = 0;\n  while (len - p > 0 && outgoing.window > 0) {\n    const actualLen = Math.min(len - p, outgoing.window, outgoing.packetSize);\n    outgoing.window -= actualLen;\n    if (outgoing.window === 0) {\n      sftp._waitWindow = true;\n      sftp._chunkcb = drainBuffer;\n    }\n    if (p === 0 && actualLen === len) {\n      sftp._protocol.channelData(sftp.outgoing.id, payload);\n    } else {\n      sftp._protocol.channelData(sftp.outgoing.id, bufferSlice(payload, p, p + actualLen));\n    }\n    p += actualLen;\n  }\n  if (len - p > 0) {\n    if (p > 0) ret = bufferSlice(payload, p, len);else ret = payload; // XXX: should never get here?\n  }\n\n  return ret;\n}\nfunction drainBuffer() {\n  this._chunkcb = undefined;\n  const buffer = this._buffer;\n  let i = 0;\n  while (i < buffer.length) {\n    const payload = buffer[i];\n    const ret = tryWritePayload(this, payload);\n    if (ret !== undefined) {\n      if (ret !== payload) buffer[i] = ret;\n      if (i > 0) this._buffer = buffer.slice(i);\n      return;\n    }\n    ++i;\n  }\n  if (i > 0) this._buffer = [];\n}\nfunction doFatalSFTPError(sftp, msg, noDebug) {\n  const err = new Error(msg);\n  err.level = 'sftp-protocol';\n  if (!noDebug && sftp._debug) sftp._debug(`SFTP: Inbound: ${msg}`);\n  sftp.emit('error', err);\n  sftp.destroy();\n  cleanupRequests(sftp);\n  return false;\n}\nfunction cleanupRequests(sftp) {\n  const keys = Object.keys(sftp._requests);\n  if (keys.length === 0) return;\n  const reqs = sftp._requests;\n  sftp._requests = {};\n  const err = new Error('No response from server');\n  for (let i = 0; i < keys.length; ++i) {\n    const req = reqs[keys[i]];\n    if (typeof req.cb === 'function') req.cb(err);\n  }\n}\nfunction requestLimits(sftp, cb) {\n  /*\n    uint32    id\n    string    \"limits@openssh.com\"\n  */\n  let p = 9;\n  const buf = Buffer.allocUnsafe(4 + 1 + 4 + 4 + 18);\n  writeUInt32BE(buf, buf.length - 4, 0);\n  buf[4] = REQUEST.EXTENDED;\n  const reqid = sftp._writeReqid = sftp._writeReqid + 1 & MAX_REQID;\n  writeUInt32BE(buf, reqid, 5);\n  writeUInt32BE(buf, 18, p);\n  buf.utf8Write('limits@openssh.com', p += 4, 18);\n  sftp._requests[reqid] = {\n    extended: 'limits@openssh.com',\n    cb\n  };\n  const isBuffered = sendOrBuffer(sftp, buf);\n  if (sftp._debug) {\n    const which = isBuffered ? 'Buffered' : 'Sending';\n    sftp._debug(`SFTP: Outbound: ${which} limits@openssh.com`);\n  }\n}\nconst CLIENT_HANDLERS = {\n  [RESPONSE.VERSION]: (sftp, payload) => {\n    if (sftp._version !== -1) return doFatalSFTPError(sftp, 'Duplicate VERSION packet');\n    const extensions = {};\n\n    /*\n      uint32 version\n      <extension data>\n    */\n    bufferParser.init(payload, 1);\n    let version = bufferParser.readUInt32BE();\n    while (bufferParser.avail()) {\n      const extName = bufferParser.readString(true);\n      const extData = bufferParser.readString(true);\n      if (extData === undefined) {\n        version = undefined;\n        break;\n      }\n      extensions[extName] = extData;\n    }\n    bufferParser.clear();\n    if (version === undefined) return doFatalSFTPError(sftp, 'Malformed VERSION packet');\n    if (sftp._debug) {\n      const names = Object.keys(extensions);\n      if (names.length) {\n        sftp._debug(`SFTP: Inbound: Received VERSION (v${version}, exts:${names})`);\n      } else {\n        sftp._debug(`SFTP: Inbound: Received VERSION (v${version})`);\n      }\n    }\n    sftp._version = version;\n    sftp._extensions = extensions;\n    if (extensions['limits@openssh.com'] === '1') {\n      return requestLimits(sftp, (err, limits) => {\n        if (!err) {\n          if (limits.maxPktLen > 0) sftp._maxOutPktLen = limits.maxPktLen;\n          if (limits.maxReadLen > 0) sftp._maxReadLen = limits.maxReadLen;\n          if (limits.maxWriteLen > 0) sftp._maxWriteLen = limits.maxWriteLen;\n          sftp.maxOpenHandles = limits.maxOpenHandles > 0 ? limits.maxOpenHandles : Infinity;\n        }\n        sftp.emit('ready');\n      });\n    }\n    sftp.emit('ready');\n  },\n  [RESPONSE.STATUS]: (sftp, payload) => {\n    bufferParser.init(payload, 1);\n    const reqID = bufferParser.readUInt32BE();\n    /*\n      uint32     error/status code\n      string     error message (ISO-10646 UTF-8)\n      string     language tag\n    */\n    const errorCode = bufferParser.readUInt32BE();\n    const errorMsg = bufferParser.readString(true);\n    bufferParser.clear();\n\n    // Note: we avoid checking that the error message and language tag are in\n    // the packet because there are some broken implementations that incorrectly\n    // omit them. The language tag in general was never really used amongst ssh\n    // implementations, so in the case of a missing error message we just\n    // default to something sensible.\n\n    if (sftp._debug) {\n      const jsonMsg = JSON.stringify(errorMsg);\n      sftp._debug(`SFTP: Inbound: Received STATUS (id:${reqID}, ${errorCode}, ${jsonMsg})`);\n    }\n    const req = sftp._requests[reqID];\n    delete sftp._requests[reqID];\n    if (req && typeof req.cb === 'function') {\n      if (errorCode === STATUS_CODE.OK) {\n        req.cb();\n        return;\n      }\n      const err = new Error(errorMsg || STATUS_CODE_STR[errorCode] || 'Unknown status');\n      err.code = errorCode;\n      req.cb(err);\n    }\n  },\n  [RESPONSE.HANDLE]: (sftp, payload) => {\n    bufferParser.init(payload, 1);\n    const reqID = bufferParser.readUInt32BE();\n    /*\n      string     handle\n    */\n    const handle = bufferParser.readString();\n    bufferParser.clear();\n    if (handle === undefined) {\n      if (reqID !== undefined) delete sftp._requests[reqID];\n      return doFatalSFTPError(sftp, 'Malformed HANDLE packet');\n    }\n    sftp._debug && sftp._debug(`SFTP: Inbound: Received HANDLE (id:${reqID})`);\n    const req = sftp._requests[reqID];\n    delete sftp._requests[reqID];\n    if (req && typeof req.cb === 'function') req.cb(undefined, handle);\n  },\n  [RESPONSE.DATA]: (sftp, payload) => {\n    bufferParser.init(payload, 1);\n    const reqID = bufferParser.readUInt32BE();\n    let req;\n    if (reqID !== undefined) {\n      req = sftp._requests[reqID];\n      delete sftp._requests[reqID];\n    }\n    /*\n      string     data\n    */\n    if (req && typeof req.cb === 'function') {\n      if (req.buffer) {\n        // We have already pre-allocated space to store the data\n\n        const nb = bufferParser.readString(req.buffer);\n        bufferParser.clear();\n        if (nb !== undefined) {\n          sftp._debug && sftp._debug(`SFTP: Inbound: Received DATA (id:${reqID}, ${nb})`);\n          req.cb(undefined, req.buffer, nb);\n          return;\n        }\n      } else {\n        const data = bufferParser.readString();\n        bufferParser.clear();\n        if (data !== undefined) {\n          sftp._debug && sftp._debug(`SFTP: Inbound: Received DATA (id:${reqID}, ${data.length})`);\n          req.cb(undefined, data);\n          return;\n        }\n      }\n    } else {\n      const nb = bufferParser.skipString();\n      bufferParser.clear();\n      if (nb !== undefined) {\n        sftp._debug && sftp._debug(`SFTP: Inbound: Received DATA (id:${reqID}, ${nb})`);\n        return;\n      }\n    }\n    return doFatalSFTPError(sftp, 'Malformed DATA packet');\n  },\n  [RESPONSE.NAME]: (sftp, payload) => {\n    bufferParser.init(payload, 1);\n    const reqID = bufferParser.readUInt32BE();\n    let req;\n    if (reqID !== undefined) {\n      req = sftp._requests[reqID];\n      delete sftp._requests[reqID];\n    }\n    /*\n      uint32     count\n      repeats count times:\n              string     filename\n              string     longname\n              ATTRS      attrs\n    */\n    const count = bufferParser.readUInt32BE();\n    if (count !== undefined) {\n      let names = [];\n      for (let i = 0; i < count; ++i) {\n        // We are going to assume UTF-8 for filenames despite the SFTPv3\n        // spec not specifying an encoding because the specs for newer\n        // versions of the protocol all explicitly specify UTF-8 for\n        // filenames\n        const filename = bufferParser.readString(true);\n\n        // `longname` only exists in SFTPv3 and since it typically will\n        // contain the filename, we assume it is also UTF-8\n        const longname = bufferParser.readString(true);\n        const attrs = readAttrs(sftp._biOpt);\n        if (attrs === undefined) {\n          names = undefined;\n          break;\n        }\n        names.push({\n          filename,\n          longname,\n          attrs\n        });\n      }\n      if (names !== undefined) {\n        sftp._debug && sftp._debug(`SFTP: Inbound: Received NAME (id:${reqID}, ${names.length})`);\n        bufferParser.clear();\n        if (req && typeof req.cb === 'function') req.cb(undefined, names);\n        return;\n      }\n    }\n    bufferParser.clear();\n    return doFatalSFTPError(sftp, 'Malformed NAME packet');\n  },\n  [RESPONSE.ATTRS]: (sftp, payload) => {\n    bufferParser.init(payload, 1);\n    const reqID = bufferParser.readUInt32BE();\n    let req;\n    if (reqID !== undefined) {\n      req = sftp._requests[reqID];\n      delete sftp._requests[reqID];\n    }\n    /*\n      ATTRS      attrs\n    */\n    const attrs = readAttrs(sftp._biOpt);\n    bufferParser.clear();\n    if (attrs !== undefined) {\n      sftp._debug && sftp._debug(`SFTP: Inbound: Received ATTRS (id:${reqID})`);\n      if (req && typeof req.cb === 'function') req.cb(undefined, attrs);\n      return;\n    }\n    return doFatalSFTPError(sftp, 'Malformed ATTRS packet');\n  },\n  [RESPONSE.EXTENDED]: (sftp, payload) => {\n    bufferParser.init(payload, 1);\n    const reqID = bufferParser.readUInt32BE();\n    if (reqID !== undefined) {\n      const req = sftp._requests[reqID];\n      if (req) {\n        delete sftp._requests[reqID];\n        switch (req.extended) {\n          case 'statvfs@openssh.com':\n          case 'fstatvfs@openssh.com':\n            {\n              /*\n                uint64    f_bsize   // file system block size\n                uint64    f_frsize  // fundamental fs block size\n                uint64    f_blocks  // number of blocks (unit f_frsize)\n                uint64    f_bfree   // free blocks in file system\n                uint64    f_bavail  // free blocks for non-root\n                uint64    f_files   // total file inodes\n                uint64    f_ffree   // free file inodes\n                uint64    f_favail  // free file inodes for to non-root\n                uint64    f_fsid    // file system id\n                uint64    f_flag    // bit mask of f_flag values\n                uint64    f_namemax // maximum filename length\n              */\n              const biOpt = sftp._biOpt;\n              const stats = {\n                f_bsize: bufferParser.readUInt64BE(biOpt),\n                f_frsize: bufferParser.readUInt64BE(biOpt),\n                f_blocks: bufferParser.readUInt64BE(biOpt),\n                f_bfree: bufferParser.readUInt64BE(biOpt),\n                f_bavail: bufferParser.readUInt64BE(biOpt),\n                f_files: bufferParser.readUInt64BE(biOpt),\n                f_ffree: bufferParser.readUInt64BE(biOpt),\n                f_favail: bufferParser.readUInt64BE(biOpt),\n                f_sid: bufferParser.readUInt64BE(biOpt),\n                f_flag: bufferParser.readUInt64BE(biOpt),\n                f_namemax: bufferParser.readUInt64BE(biOpt)\n              };\n              if (stats.f_namemax === undefined) break;\n              if (sftp._debug) {\n                sftp._debug('SFTP: Inbound: Received EXTENDED_REPLY ' + `(id:${reqID}, ${req.extended})`);\n              }\n              bufferParser.clear();\n              if (typeof req.cb === 'function') req.cb(undefined, stats);\n              return;\n            }\n          case 'limits@openssh.com':\n            {\n              /*\n                uint64          max-packet-length\n                uint64          max-read-length\n                uint64          max-write-length\n                uint64          max-open-handles\n              */\n              const limits = {\n                maxPktLen: bufferParser.readUInt64BE(),\n                maxReadLen: bufferParser.readUInt64BE(),\n                maxWriteLen: bufferParser.readUInt64BE(),\n                maxOpenHandles: bufferParser.readUInt64BE()\n              };\n              if (limits.maxOpenHandles === undefined) break;\n              if (sftp._debug) {\n                sftp._debug('SFTP: Inbound: Received EXTENDED_REPLY ' + `(id:${reqID}, ${req.extended})`);\n              }\n              bufferParser.clear();\n              if (typeof req.cb === 'function') req.cb(undefined, limits);\n              return;\n            }\n          case 'users-groups-by-id@openssh.com':\n            {\n              /*\n                string    usernames\n                  string    username1\n                  ...\n                string    groupnames\n                  string    groupname1\n                  ...\n              */\n              const usernameCount = bufferParser.readUInt32BE();\n              if (usernameCount === undefined) break;\n              const usernames = new Array(usernameCount);\n              for (let i = 0; i < usernames.length; ++i) usernames[i] = bufferParser.readString(true);\n              const groupnameCount = bufferParser.readUInt32BE();\n              if (groupnameCount === undefined) break;\n              const groupnames = new Array(groupnameCount);\n              for (let i = 0; i < groupnames.length; ++i) groupnames[i] = bufferParser.readString(true);\n              if (groupnames.length > 0 && groupnames[groupnames.length - 1] === undefined) {\n                break;\n              }\n              if (sftp._debug) {\n                sftp._debug('SFTP: Inbound: Received EXTENDED_REPLY ' + `(id:${reqID}, ${req.extended})`);\n              }\n              bufferParser.clear();\n              if (typeof req.cb === 'function') req.cb(undefined, usernames, groupnames);\n              return;\n            }\n          default:\n            // Unknown extended request\n            sftp._debug && sftp._debug(`SFTP: Inbound: Received EXTENDED_REPLY (id:${reqID}, ???)`);\n            bufferParser.clear();\n            if (typeof req.cb === 'function') req.cb();\n            return;\n        }\n      } else {\n        sftp._debug && sftp._debug(`SFTP: Inbound: Received EXTENDED_REPLY (id:${reqID}, ???)`);\n        bufferParser.clear();\n        return;\n      }\n    }\n    bufferParser.clear();\n    return doFatalSFTPError(sftp, 'Malformed EXTENDED_REPLY packet');\n  }\n};\nconst SERVER_HANDLERS = {\n  [REQUEST.INIT]: (sftp, payload) => {\n    if (sftp._version !== -1) return doFatalSFTPError(sftp, 'Duplicate INIT packet');\n    const extensions = {};\n\n    /*\n      uint32 version\n      <extension data>\n    */\n    bufferParser.init(payload, 1);\n    let version = bufferParser.readUInt32BE();\n    while (bufferParser.avail()) {\n      const extName = bufferParser.readString(true);\n      const extData = bufferParser.readString(true);\n      if (extData === undefined) {\n        version = undefined;\n        break;\n      }\n      extensions[extName] = extData;\n    }\n    bufferParser.clear();\n    if (version === undefined) return doFatalSFTPError(sftp, 'Malformed INIT packet');\n    if (sftp._debug) {\n      const names = Object.keys(extensions);\n      if (names.length) {\n        sftp._debug(`SFTP: Inbound: Received INIT (v${version}, exts:${names})`);\n      } else {\n        sftp._debug(`SFTP: Inbound: Received INIT (v${version})`);\n      }\n    }\n    sendOrBuffer(sftp, SERVER_VERSION_BUFFER);\n    sftp._version = version;\n    sftp._extensions = extensions;\n    sftp.emit('ready');\n  },\n  [REQUEST.OPEN]: (sftp, payload) => {\n    bufferParser.init(payload, 1);\n    const reqID = bufferParser.readUInt32BE();\n    /*\n      string        filename\n      uint32        pflags\n      ATTRS         attrs\n    */\n    const filename = bufferParser.readString(true);\n    const pflags = bufferParser.readUInt32BE();\n    const attrs = readAttrs(sftp._biOpt);\n    bufferParser.clear();\n    if (attrs === undefined) return doFatalSFTPError(sftp, 'Malformed OPEN packet');\n    sftp._debug && sftp._debug(`SFTP: Inbound: Received OPEN (id:${reqID})`);\n    if (!sftp.emit('OPEN', reqID, filename, pflags, attrs)) {\n      // Automatically reject request if no handler for request type\n      sftp.status(reqID, STATUS_CODE.OP_UNSUPPORTED);\n    }\n  },\n  [REQUEST.CLOSE]: (sftp, payload) => {\n    bufferParser.init(payload, 1);\n    const reqID = bufferParser.readUInt32BE();\n    /*\n      string        handle\n    */\n    const handle = bufferParser.readString();\n    bufferParser.clear();\n    if (handle === undefined || handle.length > 256) return doFatalSFTPError(sftp, 'Malformed CLOSE packet');\n    sftp._debug && sftp._debug(`SFTP: Inbound: Received CLOSE (id:${reqID})`);\n    if (!sftp.emit('CLOSE', reqID, handle)) {\n      // Automatically reject request if no handler for request type\n      sftp.status(reqID, STATUS_CODE.OP_UNSUPPORTED);\n    }\n  },\n  [REQUEST.READ]: (sftp, payload) => {\n    bufferParser.init(payload, 1);\n    const reqID = bufferParser.readUInt32BE();\n    /*\n      string     handle\n      uint64     offset\n      uint32     len\n    */\n    const handle = bufferParser.readString();\n    const offset = bufferParser.readUInt64BE(sftp._biOpt);\n    const len = bufferParser.readUInt32BE();\n    bufferParser.clear();\n    if (len === undefined || handle.length > 256) return doFatalSFTPError(sftp, 'Malformed READ packet');\n    sftp._debug && sftp._debug(`SFTP: Inbound: Received READ (id:${reqID})`);\n    if (!sftp.emit('READ', reqID, handle, offset, len)) {\n      // Automatically reject request if no handler for request type\n      sftp.status(reqID, STATUS_CODE.OP_UNSUPPORTED);\n    }\n  },\n  [REQUEST.WRITE]: (sftp, payload) => {\n    bufferParser.init(payload, 1);\n    const reqID = bufferParser.readUInt32BE();\n    /*\n      string     handle\n      uint64     offset\n      string     data\n    */\n    const handle = bufferParser.readString();\n    const offset = bufferParser.readUInt64BE(sftp._biOpt);\n    const data = bufferParser.readString();\n    bufferParser.clear();\n    if (data === undefined || handle.length > 256) return doFatalSFTPError(sftp, 'Malformed WRITE packet');\n    sftp._debug && sftp._debug(`SFTP: Inbound: Received WRITE (id:${reqID})`);\n    if (!sftp.emit('WRITE', reqID, handle, offset, data)) {\n      // Automatically reject request if no handler for request type\n      sftp.status(reqID, STATUS_CODE.OP_UNSUPPORTED);\n    }\n  },\n  [REQUEST.LSTAT]: (sftp, payload) => {\n    bufferParser.init(payload, 1);\n    const reqID = bufferParser.readUInt32BE();\n    /*\n      string     path\n    */\n    const path = bufferParser.readString(true);\n    bufferParser.clear();\n    if (path === undefined) return doFatalSFTPError(sftp, 'Malformed LSTAT packet');\n    sftp._debug && sftp._debug(`SFTP: Inbound: Received LSTAT (id:${reqID})`);\n    if (!sftp.emit('LSTAT', reqID, path)) {\n      // Automatically reject request if no handler for request type\n      sftp.status(reqID, STATUS_CODE.OP_UNSUPPORTED);\n    }\n  },\n  [REQUEST.FSTAT]: (sftp, payload) => {\n    bufferParser.init(payload, 1);\n    const reqID = bufferParser.readUInt32BE();\n    /*\n      string        handle\n    */\n    const handle = bufferParser.readString();\n    bufferParser.clear();\n    if (handle === undefined || handle.length > 256) return doFatalSFTPError(sftp, 'Malformed FSTAT packet');\n    sftp._debug && sftp._debug(`SFTP: Inbound: Received FSTAT (id:${reqID})`);\n    if (!sftp.emit('FSTAT', reqID, handle)) {\n      // Automatically reject request if no handler for request type\n      sftp.status(reqID, STATUS_CODE.OP_UNSUPPORTED);\n    }\n  },\n  [REQUEST.SETSTAT]: (sftp, payload) => {\n    bufferParser.init(payload, 1);\n    const reqID = bufferParser.readUInt32BE();\n    /*\n      string     path\n      ATTRS      attrs\n    */\n    const path = bufferParser.readString(true);\n    const attrs = readAttrs(sftp._biOpt);\n    bufferParser.clear();\n    if (attrs === undefined) return doFatalSFTPError(sftp, 'Malformed SETSTAT packet');\n    sftp._debug && sftp._debug(`SFTP: Inbound: Received SETSTAT (id:${reqID})`);\n    if (!sftp.emit('SETSTAT', reqID, path, attrs)) {\n      // Automatically reject request if no handler for request type\n      sftp.status(reqID, STATUS_CODE.OP_UNSUPPORTED);\n    }\n  },\n  [REQUEST.FSETSTAT]: (sftp, payload) => {\n    bufferParser.init(payload, 1);\n    const reqID = bufferParser.readUInt32BE();\n    /*\n      string     handle\n      ATTRS      attrs\n    */\n    const handle = bufferParser.readString();\n    const attrs = readAttrs(sftp._biOpt);\n    bufferParser.clear();\n    if (attrs === undefined || handle.length > 256) return doFatalSFTPError(sftp, 'Malformed FSETSTAT packet');\n    sftp._debug && sftp._debug(`SFTP: Inbound: Received FSETSTAT (id:${reqID})`);\n    if (!sftp.emit('FSETSTAT', reqID, handle, attrs)) {\n      // Automatically reject request if no handler for request type\n      sftp.status(reqID, STATUS_CODE.OP_UNSUPPORTED);\n    }\n  },\n  [REQUEST.OPENDIR]: (sftp, payload) => {\n    bufferParser.init(payload, 1);\n    const reqID = bufferParser.readUInt32BE();\n    /*\n      string     path\n    */\n    const path = bufferParser.readString(true);\n    bufferParser.clear();\n    if (path === undefined) return doFatalSFTPError(sftp, 'Malformed OPENDIR packet');\n    sftp._debug && sftp._debug(`SFTP: Inbound: Received OPENDIR (id:${reqID})`);\n    if (!sftp.emit('OPENDIR', reqID, path)) {\n      // Automatically reject request if no handler for request type\n      sftp.status(reqID, STATUS_CODE.OP_UNSUPPORTED);\n    }\n  },\n  [REQUEST.READDIR]: (sftp, payload) => {\n    bufferParser.init(payload, 1);\n    const reqID = bufferParser.readUInt32BE();\n    /*\n      string        handle\n    */\n    const handle = bufferParser.readString();\n    bufferParser.clear();\n    if (handle === undefined || handle.length > 256) return doFatalSFTPError(sftp, 'Malformed READDIR packet');\n    sftp._debug && sftp._debug(`SFTP: Inbound: Received READDIR (id:${reqID})`);\n    if (!sftp.emit('READDIR', reqID, handle)) {\n      // Automatically reject request if no handler for request type\n      sftp.status(reqID, STATUS_CODE.OP_UNSUPPORTED);\n    }\n  },\n  [REQUEST.REMOVE]: (sftp, payload) => {\n    bufferParser.init(payload, 1);\n    const reqID = bufferParser.readUInt32BE();\n    /*\n      string     path\n    */\n    const path = bufferParser.readString(true);\n    bufferParser.clear();\n    if (path === undefined) return doFatalSFTPError(sftp, 'Malformed REMOVE packet');\n    sftp._debug && sftp._debug(`SFTP: Inbound: Received REMOVE (id:${reqID})`);\n    if (!sftp.emit('REMOVE', reqID, path)) {\n      // Automatically reject request if no handler for request type\n      sftp.status(reqID, STATUS_CODE.OP_UNSUPPORTED);\n    }\n  },\n  [REQUEST.MKDIR]: (sftp, payload) => {\n    bufferParser.init(payload, 1);\n    const reqID = bufferParser.readUInt32BE();\n    /*\n      string     path\n      ATTRS      attrs\n    */\n    const path = bufferParser.readString(true);\n    const attrs = readAttrs(sftp._biOpt);\n    bufferParser.clear();\n    if (attrs === undefined) return doFatalSFTPError(sftp, 'Malformed MKDIR packet');\n    sftp._debug && sftp._debug(`SFTP: Inbound: Received MKDIR (id:${reqID})`);\n    if (!sftp.emit('MKDIR', reqID, path, attrs)) {\n      // Automatically reject request if no handler for request type\n      sftp.status(reqID, STATUS_CODE.OP_UNSUPPORTED);\n    }\n  },\n  [REQUEST.RMDIR]: (sftp, payload) => {\n    bufferParser.init(payload, 1);\n    const reqID = bufferParser.readUInt32BE();\n    /*\n      string     path\n    */\n    const path = bufferParser.readString(true);\n    bufferParser.clear();\n    if (path === undefined) return doFatalSFTPError(sftp, 'Malformed RMDIR packet');\n    sftp._debug && sftp._debug(`SFTP: Inbound: Received RMDIR (id:${reqID})`);\n    if (!sftp.emit('RMDIR', reqID, path)) {\n      // Automatically reject request if no handler for request type\n      sftp.status(reqID, STATUS_CODE.OP_UNSUPPORTED);\n    }\n  },\n  [REQUEST.REALPATH]: (sftp, payload) => {\n    bufferParser.init(payload, 1);\n    const reqID = bufferParser.readUInt32BE();\n    /*\n      string     path\n    */\n    const path = bufferParser.readString(true);\n    bufferParser.clear();\n    if (path === undefined) return doFatalSFTPError(sftp, 'Malformed REALPATH packet');\n    sftp._debug && sftp._debug(`SFTP: Inbound: Received REALPATH (id:${reqID})`);\n    if (!sftp.emit('REALPATH', reqID, path)) {\n      // Automatically reject request if no handler for request type\n      sftp.status(reqID, STATUS_CODE.OP_UNSUPPORTED);\n    }\n  },\n  [REQUEST.STAT]: (sftp, payload) => {\n    bufferParser.init(payload, 1);\n    const reqID = bufferParser.readUInt32BE();\n    /*\n      string     path\n    */\n    const path = bufferParser.readString(true);\n    bufferParser.clear();\n    if (path === undefined) return doFatalSFTPError(sftp, 'Malformed STAT packet');\n    sftp._debug && sftp._debug(`SFTP: Inbound: Received STAT (id:${reqID})`);\n    if (!sftp.emit('STAT', reqID, path)) {\n      // Automatically reject request if no handler for request type\n      sftp.status(reqID, STATUS_CODE.OP_UNSUPPORTED);\n    }\n  },\n  [REQUEST.RENAME]: (sftp, payload) => {\n    bufferParser.init(payload, 1);\n    const reqID = bufferParser.readUInt32BE();\n    /*\n      string     oldpath\n      string     newpath\n    */\n    const oldPath = bufferParser.readString(true);\n    const newPath = bufferParser.readString(true);\n    bufferParser.clear();\n    if (newPath === undefined) return doFatalSFTPError(sftp, 'Malformed RENAME packet');\n    sftp._debug && sftp._debug(`SFTP: Inbound: Received RENAME (id:${reqID})`);\n    if (!sftp.emit('RENAME', reqID, oldPath, newPath)) {\n      // Automatically reject request if no handler for request type\n      sftp.status(reqID, STATUS_CODE.OP_UNSUPPORTED);\n    }\n  },\n  [REQUEST.READLINK]: (sftp, payload) => {\n    bufferParser.init(payload, 1);\n    const reqID = bufferParser.readUInt32BE();\n    /*\n      string     path\n    */\n    const path = bufferParser.readString(true);\n    bufferParser.clear();\n    if (path === undefined) return doFatalSFTPError(sftp, 'Malformed READLINK packet');\n    sftp._debug && sftp._debug(`SFTP: Inbound: Received READLINK (id:${reqID})`);\n    if (!sftp.emit('READLINK', reqID, path)) {\n      // Automatically reject request if no handler for request type\n      sftp.status(reqID, STATUS_CODE.OP_UNSUPPORTED);\n    }\n  },\n  [REQUEST.SYMLINK]: (sftp, payload) => {\n    bufferParser.init(payload, 1);\n    const reqID = bufferParser.readUInt32BE();\n    /*\n      string     linkpath\n      string     targetpath\n    */\n    const linkPath = bufferParser.readString(true);\n    const targetPath = bufferParser.readString(true);\n    bufferParser.clear();\n    if (targetPath === undefined) return doFatalSFTPError(sftp, 'Malformed SYMLINK packet');\n    sftp._debug && sftp._debug(`SFTP: Inbound: Received SYMLINK (id:${reqID})`);\n    let handled;\n    if (sftp._isOpenSSH) {\n      // OpenSSH has linkpath and targetpath positions switched\n      handled = sftp.emit('SYMLINK', reqID, targetPath, linkPath);\n    } else {\n      handled = sftp.emit('SYMLINK', reqID, linkPath, targetPath);\n    }\n    if (!handled) {\n      // Automatically reject request if no handler for request type\n      sftp.status(reqID, STATUS_CODE.OP_UNSUPPORTED);\n    }\n  },\n  [REQUEST.EXTENDED]: (sftp, payload) => {\n    bufferParser.init(payload, 1);\n    const reqID = bufferParser.readUInt32BE();\n    /*\n      string     extended-request\n      ... any request-specific data ...\n    */\n    const extName = bufferParser.readString(true);\n    if (extName === undefined) {\n      bufferParser.clear();\n      return doFatalSFTPError(sftp, 'Malformed EXTENDED packet');\n    }\n    let extData;\n    if (bufferParser.avail()) extData = bufferParser.readRaw();\n    bufferParser.clear();\n    sftp._debug && sftp._debug(`SFTP: Inbound: Received EXTENDED (id:${reqID})`);\n    if (!sftp.emit('EXTENDED', reqID, extName, extData)) {\n      // Automatically reject request if no handler for request type\n      sftp.status(reqID, STATUS_CODE.OP_UNSUPPORTED);\n    }\n  }\n};\n\n// =============================================================================\n// ReadStream/WriteStream-related ==============================================\n// =============================================================================\nconst {\n  ERR_INVALID_ARG_TYPE,\n  ERR_OUT_OF_RANGE,\n  validateNumber\n} = require('./node-fs-compat');\nconst kMinPoolSpace = 128;\nlet pool;\n// It can happen that we expect to read a large chunk of data, and reserve\n// a large chunk of the pool accordingly, but the read() call only filled\n// a portion of it. If a concurrently executing read() then uses the same pool,\n// the \"reserved\" portion cannot be used, so we allow it to be re-used as a\n// new pool later.\nconst poolFragments = [];\nfunction allocNewPool(poolSize) {\n  if (poolFragments.length > 0) pool = poolFragments.pop();else pool = Buffer.allocUnsafe(poolSize);\n  pool.used = 0;\n}\n\n// Check the `this.start` and `this.end` of stream.\nfunction checkPosition(pos, name) {\n  if (!Number.isSafeInteger(pos)) {\n    validateNumber(pos, name);\n    if (!Number.isInteger(pos)) throw new ERR_OUT_OF_RANGE(name, 'an integer', pos);\n    throw new ERR_OUT_OF_RANGE(name, '>= 0 and <= 2 ** 53 - 1', pos);\n  }\n  if (pos < 0) throw new ERR_OUT_OF_RANGE(name, '>= 0 and <= 2 ** 53 - 1', pos);\n}\nfunction roundUpToMultipleOf8(n) {\n  return n + 7 & ~7; // Align to 8 byte boundary.\n}\n\nfunction ReadStream(sftp, path, options) {\n  if (options === undefined) options = {};else if (typeof options === 'string') options = {\n    encoding: options\n  };else if (options === null || typeof options !== 'object') throw new TypeError('\"options\" argument must be a string or an object');else options = Object.create(options);\n\n  // A little bit bigger buffer and water marks by default\n  if (options.highWaterMark === undefined) options.highWaterMark = 64 * 1024;\n\n  // For backwards compat do not emit close on destroy.\n  options.emitClose = false;\n  options.autoDestroy = false; // Node 14 major change.\n\n  ReadableStream.call(this, options);\n  this.path = path;\n  this.flags = options.flags === undefined ? 'r' : options.flags;\n  this.mode = options.mode === undefined ? 0o666 : options.mode;\n  this.start = options.start;\n  this.end = options.end;\n  this.autoClose = options.autoClose === undefined ? true : options.autoClose;\n  this.pos = 0;\n  this.bytesRead = 0;\n  this.isClosed = false;\n  this.handle = options.handle === undefined ? null : options.handle;\n  this.sftp = sftp;\n  this._opening = false;\n  if (this.start !== undefined) {\n    checkPosition(this.start, 'start');\n    this.pos = this.start;\n  }\n  if (this.end === undefined) {\n    this.end = Infinity;\n  } else if (this.end !== Infinity) {\n    checkPosition(this.end, 'end');\n    if (this.start !== undefined && this.start > this.end) {\n      throw new ERR_OUT_OF_RANGE('start', `<= \"end\" (here: ${this.end})`, this.start);\n    }\n  }\n  this.on('end', function () {\n    if (this.autoClose) this.destroy();\n  });\n  if (!Buffer.isBuffer(this.handle)) this.open();\n}\ninherits(ReadStream, ReadableStream);\nReadStream.prototype.open = function () {\n  if (this._opening) return;\n  this._opening = true;\n  this.sftp.open(this.path, this.flags, this.mode, (er, handle) => {\n    this._opening = false;\n    if (er) {\n      this.emit('error', er);\n      if (this.autoClose) this.destroy();\n      return;\n    }\n    this.handle = handle;\n    this.emit('open', handle);\n    this.emit('ready');\n    // Start the flow of data.\n    this.read();\n  });\n};\nReadStream.prototype._read = function (n) {\n  if (!Buffer.isBuffer(this.handle)) return this.once('open', () => this._read(n));\n\n  // XXX: safe to remove this?\n  if (this.destroyed) return;\n  if (!pool || pool.length - pool.used < kMinPoolSpace) {\n    // Discard the old pool.\n    allocNewPool(this.readableHighWaterMark || this._readableState.highWaterMark);\n  }\n\n  // Grab another reference to the pool in the case that while we're\n  // in the thread pool another read() finishes up the pool, and\n  // allocates a new one.\n  const thisPool = pool;\n  let toRead = Math.min(pool.length - pool.used, n);\n  const start = pool.used;\n  if (this.end !== undefined) toRead = Math.min(this.end - this.pos + 1, toRead);\n\n  // Already read everything we were supposed to read!\n  // treat as EOF.\n  if (toRead <= 0) return this.push(null);\n\n  // the actual read.\n  this.sftp.read(this.handle, pool, pool.used, toRead, this.pos, (er, bytesRead) => {\n    if (er) {\n      this.emit('error', er);\n      if (this.autoClose) this.destroy();\n      return;\n    }\n    let b = null;\n\n    // Now that we know how much data we have actually read, re-wind the\n    // 'used' field if we can, and otherwise allow the remainder of our\n    // reservation to be used as a new pool later.\n    if (start + toRead === thisPool.used && thisPool === pool) {\n      thisPool.used = roundUpToMultipleOf8(thisPool.used + bytesRead - toRead);\n    } else {\n      // Round down to the next lowest multiple of 8 to ensure the new pool\n      // fragment start and end positions are aligned to an 8 byte boundary.\n      const alignedEnd = start + toRead & ~7;\n      const alignedStart = roundUpToMultipleOf8(start + bytesRead);\n      if (alignedEnd - alignedStart >= kMinPoolSpace) poolFragments.push(thisPool.slice(alignedStart, alignedEnd));\n    }\n    if (bytesRead > 0) {\n      this.bytesRead += bytesRead;\n      b = thisPool.slice(start, start + bytesRead);\n    }\n\n    // Move the pool positions, and internal position for reading.\n    this.pos += bytesRead;\n    this.push(b);\n  });\n  pool.used = roundUpToMultipleOf8(pool.used + toRead);\n};\nReadStream.prototype._destroy = function (err, cb) {\n  if (this._opening && !Buffer.isBuffer(this.handle)) {\n    this.once('open', closeStream.bind(null, this, cb, err));\n    return;\n  }\n  closeStream(this, cb, err);\n  this.handle = null;\n  this._opening = false;\n};\nfunction closeStream(stream, cb, err) {\n  if (!stream.handle) return onclose();\n  stream.sftp.close(stream.handle, onclose);\n  function onclose(er) {\n    er = er || err;\n    cb(er);\n    stream.isClosed = true;\n    if (!er) stream.emit('close');\n  }\n}\nReadStream.prototype.close = function (cb) {\n  this.destroy(null, cb);\n};\nObject.defineProperty(ReadStream.prototype, 'pending', {\n  get() {\n    return this.handle === null;\n  },\n  configurable: true\n});\n\n// TODO: add `concurrency` setting to allow more than one in-flight WRITE\n// request to server to improve throughput\nfunction WriteStream(sftp, path, options) {\n  if (options === undefined) options = {};else if (typeof options === 'string') options = {\n    encoding: options\n  };else if (options === null || typeof options !== 'object') throw new TypeError('\"options\" argument must be a string or an object');else options = Object.create(options);\n\n  // For backwards compat do not emit close on destroy.\n  options.emitClose = false;\n  options.autoDestroy = false; // Node 14 major change.\n\n  WritableStream.call(this, options);\n  this.path = path;\n  this.flags = options.flags === undefined ? 'w' : options.flags;\n  this.mode = options.mode === undefined ? 0o666 : options.mode;\n  this.start = options.start;\n  this.autoClose = options.autoClose === undefined ? true : options.autoClose;\n  this.pos = 0;\n  this.bytesWritten = 0;\n  this.isClosed = false;\n  this.handle = options.handle === undefined ? null : options.handle;\n  this.sftp = sftp;\n  this._opening = false;\n  if (this.start !== undefined) {\n    checkPosition(this.start, 'start');\n    this.pos = this.start;\n  }\n  if (options.encoding) this.setDefaultEncoding(options.encoding);\n\n  // Node v6.x only\n  this.on('finish', function () {\n    if (this._writableState.finalCalled) return;\n    if (this.autoClose) this.destroy();\n  });\n  if (!Buffer.isBuffer(this.handle)) this.open();\n}\ninherits(WriteStream, WritableStream);\nWriteStream.prototype._final = function (cb) {\n  if (this.autoClose) this.destroy();\n  cb();\n};\nWriteStream.prototype.open = function () {\n  if (this._opening) return;\n  this._opening = true;\n  this.sftp.open(this.path, this.flags, this.mode, (er, handle) => {\n    this._opening = false;\n    if (er) {\n      this.emit('error', er);\n      if (this.autoClose) this.destroy();\n      return;\n    }\n    this.handle = handle;\n    const tryAgain = err => {\n      if (err) {\n        // Try chmod() for sftp servers that may not support fchmod() for\n        // whatever reason\n        this.sftp.chmod(this.path, this.mode, err_ => tryAgain());\n        return;\n      }\n\n      // SFTPv3 requires absolute offsets, no matter the open flag used\n      if (this.flags[0] === 'a') {\n        const tryStat = (err, st) => {\n          if (err) {\n            // Try stat() for sftp servers that may not support fstat() for\n            // whatever reason\n            this.sftp.stat(this.path, (err_, st_) => {\n              if (err_) {\n                this.destroy();\n                this.emit('error', err);\n                return;\n              }\n              tryStat(null, st_);\n            });\n            return;\n          }\n          this.pos = st.size;\n          this.emit('open', handle);\n          this.emit('ready');\n        };\n        this.sftp.fstat(handle, tryStat);\n        return;\n      }\n      this.emit('open', handle);\n      this.emit('ready');\n    };\n    this.sftp.fchmod(handle, this.mode, tryAgain);\n  });\n};\nWriteStream.prototype._write = function (data, encoding, cb) {\n  if (!Buffer.isBuffer(data)) {\n    const err = new ERR_INVALID_ARG_TYPE('data', 'Buffer', data);\n    return this.emit('error', err);\n  }\n  if (!Buffer.isBuffer(this.handle)) {\n    return this.once('open', function () {\n      this._write(data, encoding, cb);\n    });\n  }\n  this.sftp.write(this.handle, data, 0, data.length, this.pos, (er, bytes) => {\n    if (er) {\n      if (this.autoClose) this.destroy();\n      return cb(er);\n    }\n    this.bytesWritten += bytes;\n    cb();\n  });\n  this.pos += data.length;\n};\nWriteStream.prototype._writev = function (data, cb) {\n  if (!Buffer.isBuffer(this.handle)) {\n    return this.once('open', function () {\n      this._writev(data, cb);\n    });\n  }\n  const sftp = this.sftp;\n  const handle = this.handle;\n  let writesLeft = data.length;\n  const onwrite = (er, bytes) => {\n    if (er) {\n      this.destroy();\n      return cb(er);\n    }\n    this.bytesWritten += bytes;\n    if (--writesLeft === 0) cb();\n  };\n\n  // TODO: try to combine chunks to reduce number of requests to the server?\n  for (let i = 0; i < data.length; ++i) {\n    const chunk = data[i].chunk;\n    sftp.write(handle, chunk, 0, chunk.length, this.pos, onwrite);\n    this.pos += chunk.length;\n  }\n};\nif (typeof WritableStream.prototype.destroy !== 'function') WriteStream.prototype.destroy = ReadStream.prototype.destroy;\nWriteStream.prototype._destroy = ReadStream.prototype._destroy;\nWriteStream.prototype.close = function (cb) {\n  if (cb) {\n    if (this.isClosed) {\n      process.nextTick(cb);\n      return;\n    }\n    this.on('close', cb);\n  }\n\n  // If we are not autoClosing, we should call\n  // destroy on 'finish'.\n  if (!this.autoClose) this.on('finish', this.destroy.bind(this));\n  this.end();\n};\n\n// There is no shutdown() for files.\nWriteStream.prototype.destroySoon = WriteStream.prototype.end;\nObject.defineProperty(WriteStream.prototype, 'pending', {\n  get() {\n    return this.handle === null;\n  },\n  configurable: true\n});\n// =============================================================================\n\nmodule.exports = {\n  flagsToString,\n  OPEN_MODE,\n  SFTP,\n  Stats,\n  STATUS_CODE,\n  stringToFlags\n};","map":{"version":3,"names":["EventEmitter","require","fs","constants","Readable","ReadableStream","Writable","WritableStream","inherits","isDate","FastBuffer","Buffer","Symbol","species","bufferCopy","bufferSlice","makeBufferParser","writeUInt32BE","ATTR","SIZE","UIDGID","PERMISSIONS","ACMODTIME","EXTENDED","ATTRS_BUF","alloc","STATUS_CODE","OK","EOF","NO_SUCH_FILE","PERMISSION_DENIED","FAILURE","BAD_MESSAGE","NO_CONNECTION","CONNECTION_LOST","OP_UNSUPPORTED","VALID_STATUS_CODES","Map","Object","values","map","n","STATUS_CODE_STR","REQUEST","INIT","OPEN","CLOSE","READ","WRITE","LSTAT","FSTAT","SETSTAT","FSETSTAT","OPENDIR","READDIR","REMOVE","MKDIR","RMDIR","REALPATH","STAT","RENAME","READLINK","SYMLINK","RESPONSE","VERSION","STATUS","HANDLE","DATA","NAME","ATTRS","OPEN_MODE","APPEND","CREAT","TRUNC","EXCL","PKT_RW_OVERHEAD","MAX_REQID","CLIENT_VERSION_BUFFER","from","SERVER_VERSION_BUFFER","RE_OPENSSH","OPENSSH_MAX_PKT_LEN","bufferParser","fakeStderr","readable","writable","push","data","once","on","emit","end","noop","SFTP","constructor","client","chanInfo","cfg","remoteIdentRaw","_protocol","_remoteIdentRaw","server","_debug","debug","undefined","_isOpenSSH","test","_version","_extensions","_biOpt","biOpt","_pktLenBytes","_pktLen","_pktPos","_pktType","_pktData","_writeReqid","_requests","_maxInPktLen","_maxOutPktLen","_maxReadLen","_maxWriteLen","maxOpenHandles","_client","_callbacks","_hasX11","_exit","code","signal","dump","desc","_waitWindow","_chunkcb","_buffer","type","subtype","incoming","outgoing","stderr","cleanupRequests","p","length","nb","Math","min","doFatalSFTPError","max","_pkt","buffer","byteOffset","allocUnsafe","set","Uint8Array","payload","handler","SERVER_HANDLERS","CLIENT_HANDLERS","destroy","state","channelClose","id","_init","sendOrBuffer","createReadStream","path","options","Error","ReadStream","createWriteStream","WriteStream","open","flags_","attrs","cb","flags","stringToFlags","attrsFlags","attrsLen","mode","attrsToBytes","pathLen","byteLength","buf","reqid","utf8Write","isBuffered","close","handle","isBuffer","handleLen","read","off","len","position","read_","readData","write","process","nextTick","maxDataLen","overflow","origPosition","out","i","err","isSent","how","writeData","fastGet","remotePath","localPath","opts","fastXfer","fastPut","readFile","callback_","callback","encoding","flag","TypeError","isEncoding","size","buffers","pos","bytesRead","afterRead","er","nbytes","eof","_wantEOFError","concat","toString","handle_","tryStat","st","stat","er_","st_","fstat","writeFile","openErr","writeAll","appendFile","assign","exists","unlink","filename","fnameLen","rename","oldPath","newPath","oldLen","newLen","mkdir","rmdir","readdir","where","doFilter","full","entries","e","reread","list","opendir","splice","lstat","setstat","fsetstat","futimes","atime","mtime","toUnixTimestamp","utimes","fchown","uid","gid","chown","fchmod","chmod","readlink","names","symlink","targetPath","linkPath","linkLen","targetLen","realpath","ext_openssh_rename","ext","which","ext_openssh_statvfs","extended","ext_openssh_fstatvfs","ext_openssh_hardlink","ext_openssh_fsync","ext_openssh_lsetstat","status","ext_openssh_expandPath","ext_copy_data","srcHandle","srcOffset","dstHandle","dstOffset","ext_home_dir","username","usernameLen","ext_users_groups","uids","gids","Array","isArray","val","Number","isInteger","message","has","msgLen","isUTF8","dataLen","name","count","namesLen","nameAttrs","longname","bytes","attr","tryCreateBuffer","ex","self","req_","req","origOff","src","dst","srcPath","dstPath","concurrency","chunkSize","onstep","fileSize","isNaN","step","modeNum","fsize","pdst","total","hadError","readbuf","bufsize","onerror","left","cbfinal","sourceHandle","err_","attrs_","destHandle","tryAgain","startReads","onread","dstpos","datapos","origChunkLen","writeCb","singleRead","chunk","makeCb","psrc","reads","sftp","offset","writeErr","written","Stats","initial","isDirectory","S_IFMT","S_IFDIR","isFile","S_IFREG","isBlockDevice","S_IFBLK","isCharacterDevice","S_IFCHR","isSymbolicLink","S_IFLNK","isFIFO","S_IFIFO","isSocket","S_IFSOCK","time","parseInt","getTime","stringFlagMap","str","flagsToString","stringFlagMapKeys","keys","key","readAttrs","readUInt32BE","readUInt64BE","readString","ret","tryWritePayload","window","drainBuffer","actualLen","packetSize","channelData","slice","msg","noDebug","level","reqs","requestLimits","extensions","init","version","avail","extName","extData","clear","limits","maxPktLen","maxReadLen","maxWriteLen","Infinity","reqID","errorCode","errorMsg","jsonMsg","JSON","stringify","skipString","stats","f_bsize","f_frsize","f_blocks","f_bfree","f_bavail","f_files","f_ffree","f_favail","f_sid","f_flag","f_namemax","usernameCount","usernames","groupnameCount","groupnames","pflags","handled","readRaw","ERR_INVALID_ARG_TYPE","ERR_OUT_OF_RANGE","validateNumber","kMinPoolSpace","pool","poolFragments","allocNewPool","poolSize","pop","used","checkPosition","isSafeInteger","roundUpToMultipleOf8","create","highWaterMark","emitClose","autoDestroy","call","start","autoClose","isClosed","_opening","prototype","_read","destroyed","readableHighWaterMark","_readableState","thisPool","toRead","b","alignedEnd","alignedStart","_destroy","closeStream","bind","stream","onclose","defineProperty","get","configurable","bytesWritten","setDefaultEncoding","_writableState","finalCalled","_final","_write","_writev","writesLeft","onwrite","destroySoon","module","exports"],"sources":["/home/user/node_modules/ssh2/lib/protocol/SFTP.js"],"sourcesContent":["'use strict';\n\nconst EventEmitter = require('events');\nconst fs = require('fs');\nconst { constants } = fs;\nconst {\n  Readable: ReadableStream,\n  Writable: WritableStream\n} = require('stream');\nconst { inherits, isDate } = require('util');\n\nconst FastBuffer = Buffer[Symbol.species];\n\nconst {\n  bufferCopy,\n  bufferSlice,\n  makeBufferParser,\n  writeUInt32BE,\n} = require('./utils.js');\n\nconst ATTR = {\n  SIZE: 0x00000001,\n  UIDGID: 0x00000002,\n  PERMISSIONS: 0x00000004,\n  ACMODTIME: 0x00000008,\n  EXTENDED: 0x80000000,\n};\n\n// Large enough to store all possible attributes\nconst ATTRS_BUF = Buffer.alloc(28);\n\nconst STATUS_CODE = {\n  OK: 0,\n  EOF: 1,\n  NO_SUCH_FILE: 2,\n  PERMISSION_DENIED: 3,\n  FAILURE: 4,\n  BAD_MESSAGE: 5,\n  NO_CONNECTION: 6,\n  CONNECTION_LOST: 7,\n  OP_UNSUPPORTED: 8\n};\n\nconst VALID_STATUS_CODES = new Map(\n  Object.values(STATUS_CODE).map((n) => [n, 1])\n);\n\nconst STATUS_CODE_STR = {\n  [STATUS_CODE.OK]: 'No error',\n  [STATUS_CODE.EOF]: 'End of file',\n  [STATUS_CODE.NO_SUCH_FILE]: 'No such file or directory',\n  [STATUS_CODE.PERMISSION_DENIED]: 'Permission denied',\n  [STATUS_CODE.FAILURE]: 'Failure',\n  [STATUS_CODE.BAD_MESSAGE]: 'Bad message',\n  [STATUS_CODE.NO_CONNECTION]: 'No connection',\n  [STATUS_CODE.CONNECTION_LOST]: 'Connection lost',\n  [STATUS_CODE.OP_UNSUPPORTED]: 'Operation unsupported',\n};\n\nconst REQUEST = {\n  INIT: 1,\n  OPEN: 3,\n  CLOSE: 4,\n  READ: 5,\n  WRITE: 6,\n  LSTAT: 7,\n  FSTAT: 8,\n  SETSTAT: 9,\n  FSETSTAT: 10,\n  OPENDIR: 11,\n  READDIR: 12,\n  REMOVE: 13,\n  MKDIR: 14,\n  RMDIR: 15,\n  REALPATH: 16,\n  STAT: 17,\n  RENAME: 18,\n  READLINK: 19,\n  SYMLINK: 20,\n  EXTENDED: 200\n};\n\nconst RESPONSE = {\n  VERSION: 2,\n  STATUS: 101,\n  HANDLE: 102,\n  DATA: 103,\n  NAME: 104,\n  ATTRS: 105,\n  EXTENDED: 201\n};\n\nconst OPEN_MODE = {\n  READ: 0x00000001,\n  WRITE: 0x00000002,\n  APPEND: 0x00000004,\n  CREAT: 0x00000008,\n  TRUNC: 0x00000010,\n  EXCL: 0x00000020\n};\n\nconst PKT_RW_OVERHEAD = 2 * 1024;\nconst MAX_REQID = 2 ** 32 - 1;\nconst CLIENT_VERSION_BUFFER = Buffer.from([\n  0, 0, 0, 5 /* length */,\n    REQUEST.INIT,\n    0, 0, 0, 3 /* version */\n]);\nconst SERVER_VERSION_BUFFER = Buffer.from([\n  0, 0, 0, 5 /* length */,\n    RESPONSE.VERSION,\n    0, 0, 0, 3 /* version */\n]);\n\nconst RE_OPENSSH = /^SSH-2.0-(?:OpenSSH|dropbear)/;\nconst OPENSSH_MAX_PKT_LEN = 256 * 1024;\n\nconst bufferParser = makeBufferParser();\n\nconst fakeStderr = {\n  readable: false,\n  writable: false,\n  push: (data) => {},\n  once: () => {},\n  on: () => {},\n  emit: () => {},\n  end: () => {},\n};\n\nfunction noop() {}\n\n// Emulates enough of `Channel` to be able to be used as a drop-in replacement\n// in order to process incoming data with as little overhead as possible\nclass SFTP extends EventEmitter {\n  constructor(client, chanInfo, cfg) {\n    super();\n\n    if (typeof cfg !== 'object' || !cfg)\n      cfg = {};\n\n    const remoteIdentRaw = client._protocol._remoteIdentRaw;\n\n    this.server = !!cfg.server;\n    this._debug = (typeof cfg.debug === 'function' ? cfg.debug : undefined);\n    this._isOpenSSH = (remoteIdentRaw && RE_OPENSSH.test(remoteIdentRaw));\n\n    this._version = -1;\n    this._extensions = {};\n    this._biOpt = cfg.biOpt;\n    this._pktLenBytes = 0;\n    this._pktLen = 0;\n    this._pktPos = 0;\n    this._pktType = 0;\n    this._pktData = undefined;\n    this._writeReqid = -1;\n    this._requests = {};\n    this._maxInPktLen = OPENSSH_MAX_PKT_LEN;\n    this._maxOutPktLen = 34000;\n    this._maxReadLen =\n      (this._isOpenSSH ? OPENSSH_MAX_PKT_LEN : 34000) - PKT_RW_OVERHEAD;\n    this._maxWriteLen =\n      (this._isOpenSSH ? OPENSSH_MAX_PKT_LEN : 34000) - PKT_RW_OVERHEAD;\n\n    this.maxOpenHandles = undefined;\n\n    // Channel compatibility\n    this._client = client;\n    this._protocol = client._protocol;\n    this._callbacks = [];\n    this._hasX11 = false;\n    this._exit = {\n      code: undefined,\n      signal: undefined,\n      dump: undefined,\n      desc: undefined,\n    };\n    this._waitWindow = false; // SSH-level backpressure\n    this._chunkcb = undefined;\n    this._buffer = [];\n    this.type = chanInfo.type;\n    this.subtype = undefined;\n    this.incoming = chanInfo.incoming;\n    this.outgoing = chanInfo.outgoing;\n    this.stderr = fakeStderr;\n    this.readable = true;\n  }\n\n  // This handles incoming data to parse\n  push(data) {\n    if (data === null) {\n      cleanupRequests(this);\n      if (!this.readable)\n        return;\n      // No more incoming data from the remote side\n      this.readable = false;\n      this.emit('end');\n      return;\n    }\n    /*\n        uint32             length\n        byte               type\n        byte[length - 1]   data payload\n    */\n    let p = 0;\n\n    while (p < data.length) {\n      if (this._pktLenBytes < 4) {\n        let nb = Math.min(4 - this._pktLenBytes, data.length - p);\n        this._pktLenBytes += nb;\n\n        while (nb--)\n          this._pktLen = (this._pktLen << 8) + data[p++];\n\n        if (this._pktLenBytes < 4)\n          return;\n        if (this._pktLen === 0)\n          return doFatalSFTPError(this, 'Invalid packet length');\n        if (this._pktLen > this._maxInPktLen) {\n          const max = this._maxInPktLen;\n          return doFatalSFTPError(\n            this,\n            `Packet length ${this._pktLen} exceeds max length of ${max}`\n          );\n        }\n        if (p >= data.length)\n          return;\n      }\n      if (this._pktPos < this._pktLen) {\n        const nb = Math.min(this._pktLen - this._pktPos, data.length - p);\n        if (p !== 0 || nb !== data.length) {\n          if (nb === this._pktLen) {\n            this._pkt = new FastBuffer(data.buffer, data.byteOffset + p, nb);\n          } else {\n            if (!this._pkt)\n              this._pkt = Buffer.allocUnsafe(this._pktLen);\n            this._pkt.set(\n              new Uint8Array(data.buffer, data.byteOffset + p, nb),\n              this._pktPos\n            );\n          }\n        } else if (nb === this._pktLen) {\n          this._pkt = data;\n        } else {\n          if (!this._pkt)\n            this._pkt = Buffer.allocUnsafe(this._pktLen);\n          this._pkt.set(data, this._pktPos);\n        }\n        p += nb;\n        this._pktPos += nb;\n        if (this._pktPos < this._pktLen)\n          return;\n      }\n\n      const type = this._pkt[0];\n      const payload = this._pkt;\n\n      // Prepare for next packet\n      this._pktLen = 0;\n      this._pktLenBytes = 0;\n      this._pkt = undefined;\n      this._pktPos = 0;\n\n      const handler = (this.server\n                       ? SERVER_HANDLERS[type]\n                       : CLIENT_HANDLERS[type]);\n      if (!handler)\n        return doFatalSFTPError(this, `Unknown packet type ${type}`);\n\n      if (this._version === -1) {\n        if (this.server) {\n          if (type !== REQUEST.INIT)\n            return doFatalSFTPError(this, `Expected INIT packet, got ${type}`);\n        } else if (type !== RESPONSE.VERSION) {\n          return doFatalSFTPError(this, `Expected VERSION packet, got ${type}`);\n        }\n      }\n\n      if (handler(this, payload) === false)\n        return;\n    }\n  }\n\n  end() {\n    this.destroy();\n  }\n  destroy() {\n    if (this.outgoing.state === 'open' || this.outgoing.state === 'eof') {\n      this.outgoing.state = 'closing';\n      this._protocol.channelClose(this.outgoing.id);\n    }\n  }\n  _init() {\n    this._init = noop;\n    if (!this.server)\n      sendOrBuffer(this, CLIENT_VERSION_BUFFER);\n  }\n\n  // ===========================================================================\n  // Client-specific ===========================================================\n  // ===========================================================================\n  createReadStream(path, options) {\n    if (this.server)\n      throw new Error('Client-only method called in server mode');\n\n    return new ReadStream(this, path, options);\n  }\n  createWriteStream(path, options) {\n    if (this.server)\n      throw new Error('Client-only method called in server mode');\n\n    return new WriteStream(this, path, options);\n  }\n  open(path, flags_, attrs, cb) {\n    if (this.server)\n      throw new Error('Client-only method called in server mode');\n\n    if (typeof attrs === 'function') {\n      cb = attrs;\n      attrs = undefined;\n    }\n\n    const flags = (typeof flags_ === 'number' ? flags_ : stringToFlags(flags_));\n    if (flags === null)\n      throw new Error(`Unknown flags string: ${flags_}`);\n\n    let attrsFlags = 0;\n    let attrsLen = 0;\n    if (typeof attrs === 'string' || typeof attrs === 'number')\n      attrs = { mode: attrs };\n    if (typeof attrs === 'object' && attrs !== null) {\n      attrs = attrsToBytes(attrs);\n      attrsFlags = attrs.flags;\n      attrsLen = attrs.nb;\n    }\n\n    /*\n      uint32        id\n      string        filename\n      uint32        pflags\n      ATTRS         attrs\n    */\n    const pathLen = Buffer.byteLength(path);\n    let p = 9;\n    const buf = Buffer.allocUnsafe(4 + 1 + 4 + 4 + pathLen + 4 + 4 + attrsLen);\n\n    writeUInt32BE(buf, buf.length - 4, 0);\n    buf[4] = REQUEST.OPEN;\n    const reqid = this._writeReqid = (this._writeReqid + 1) & MAX_REQID;\n    writeUInt32BE(buf, reqid, 5);\n\n    writeUInt32BE(buf, pathLen, p);\n    buf.utf8Write(path, p += 4, pathLen);\n    writeUInt32BE(buf, flags, p += pathLen);\n    writeUInt32BE(buf, attrsFlags, p += 4);\n    if (attrsLen) {\n      p += 4;\n\n      if (attrsLen === ATTRS_BUF.length)\n        buf.set(ATTRS_BUF, p);\n      else\n        bufferCopy(ATTRS_BUF, buf, 0, attrsLen, p);\n\n      p += attrsLen;\n    }\n    this._requests[reqid] = { cb };\n\n    const isBuffered = sendOrBuffer(this, buf);\n    this._debug && this._debug(\n      `SFTP: Outbound: ${isBuffered ? 'Buffered' : 'Sending'} OPEN`\n    );\n  }\n  close(handle, cb) {\n    if (this.server)\n      throw new Error('Client-only method called in server mode');\n\n    if (!Buffer.isBuffer(handle))\n      throw new Error('handle is not a Buffer');\n\n    /*\n      uint32     id\n      string     handle\n    */\n    const handleLen = handle.length;\n    let p = 9;\n    const buf = Buffer.allocUnsafe(4 + 1 + 4 + 4 + handleLen);\n\n    writeUInt32BE(buf, buf.length - 4, 0);\n    buf[4] = REQUEST.CLOSE;\n    const reqid = this._writeReqid = (this._writeReqid + 1) & MAX_REQID;\n    writeUInt32BE(buf, reqid, 5);\n\n    writeUInt32BE(buf, handleLen, p);\n    buf.set(handle, p += 4);\n\n    this._requests[reqid] = { cb };\n\n    const isBuffered = sendOrBuffer(this, buf);\n    this._debug && this._debug(\n      `SFTP: Outbound: ${isBuffered ? 'Buffered' : 'Sending'} CLOSE`\n    );\n  }\n  read(handle, buf, off, len, position, cb) {\n    if (this.server)\n      throw new Error('Client-only method called in server mode');\n    if (!Buffer.isBuffer(handle))\n      throw new Error('handle is not a Buffer');\n    if (!Buffer.isBuffer(buf))\n      throw new Error('buffer is not a Buffer');\n    if (off >= buf.length)\n      throw new Error('offset is out of bounds');\n    if (off + len > buf.length)\n      throw new Error('length extends beyond buffer');\n    if (position === null)\n      throw new Error('null position currently unsupported');\n\n    read_(this, handle, buf, off, len, position, cb);\n  }\n  readData(handle, buf, off, len, position, cb) {\n    // Backwards compatibility\n    this.read(handle, buf, off, len, position, cb);\n  }\n  write(handle, buf, off, len, position, cb) {\n    if (this.server)\n      throw new Error('Client-only method called in server mode');\n\n    if (!Buffer.isBuffer(handle))\n      throw new Error('handle is not a Buffer');\n    if (!Buffer.isBuffer(buf))\n      throw new Error('buffer is not a Buffer');\n    if (off > buf.length)\n      throw new Error('offset is out of bounds');\n    if (off + len > buf.length)\n      throw new Error('length extends beyond buffer');\n    if (position === null)\n      throw new Error('null position currently unsupported');\n\n    if (!len) {\n      cb && process.nextTick(cb, undefined, 0);\n      return;\n    }\n\n    const maxDataLen = this._maxWriteLen;\n    const overflow = Math.max(len - maxDataLen, 0);\n    const origPosition = position;\n\n    if (overflow)\n      len = maxDataLen;\n\n    /*\n      uint32     id\n      string     handle\n      uint64     offset\n      string     data\n    */\n    const handleLen = handle.length;\n    let p = 9;\n    const out = Buffer.allocUnsafe(4 + 1 + 4 + 4 + handleLen + 8 + 4 + len);\n\n    writeUInt32BE(out, out.length - 4, 0);\n    out[4] = REQUEST.WRITE;\n    const reqid = this._writeReqid = (this._writeReqid + 1) & MAX_REQID;\n    writeUInt32BE(out, reqid, 5);\n\n    writeUInt32BE(out, handleLen, p);\n    out.set(handle, p += 4);\n    p += handleLen;\n    for (let i = 7; i >= 0; --i) {\n      out[p + i] = position & 0xFF;\n      position /= 256;\n    }\n    writeUInt32BE(out, len, p += 8);\n    bufferCopy(buf, out, off, off + len, p += 4);\n\n    this._requests[reqid] = {\n      cb: (err) => {\n        if (err) {\n          if (typeof cb === 'function')\n            cb(err);\n        } else if (overflow) {\n          this.write(handle,\n                     buf,\n                     off + len,\n                     overflow,\n                     origPosition + len,\n                     cb);\n        } else if (typeof cb === 'function') {\n          cb(undefined, off + len);\n        }\n      }\n    };\n\n    const isSent = sendOrBuffer(this, out);\n    if (this._debug) {\n      const how = (isSent ? 'Sent' : 'Buffered');\n      this._debug(`SFTP: Outbound: ${how} WRITE (id:${reqid})`);\n    }\n  }\n  writeData(handle, buf, off, len, position, cb) {\n    // Backwards compatibility\n    this.write(handle, buf, off, len, position, cb);\n  }\n  fastGet(remotePath, localPath, opts, cb) {\n    if (this.server)\n      throw new Error('Client-only method called in server mode');\n\n    fastXfer(this, fs, remotePath, localPath, opts, cb);\n  }\n  fastPut(localPath, remotePath, opts, cb) {\n    if (this.server)\n      throw new Error('Client-only method called in server mode');\n\n    fastXfer(fs, this, localPath, remotePath, opts, cb);\n  }\n  readFile(path, options, callback_) {\n    if (this.server)\n      throw new Error('Client-only method called in server mode');\n\n    let callback;\n    if (typeof callback_ === 'function') {\n      callback = callback_;\n    } else if (typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n\n    if (typeof options === 'string')\n      options = { encoding: options, flag: 'r' };\n    else if (!options)\n      options = { encoding: null, flag: 'r' };\n    else if (typeof options !== 'object')\n      throw new TypeError('Bad arguments');\n\n    const encoding = options.encoding;\n    if (encoding && !Buffer.isEncoding(encoding))\n      throw new Error(`Unknown encoding: ${encoding}`);\n\n    // First stat the file, so we know the size.\n    let size;\n    let buffer; // Single buffer with file data\n    let buffers; // List for when size is unknown\n    let pos = 0;\n    let handle;\n\n    // SFTPv3 does not support using -1 for read position, so we have to track\n    // read position manually\n    let bytesRead = 0;\n\n    const flag = options.flag || 'r';\n\n    const read = () => {\n      if (size === 0) {\n        buffer = Buffer.allocUnsafe(8192);\n        this.read(handle, buffer, 0, 8192, bytesRead, afterRead);\n      } else {\n        this.read(handle, buffer, pos, size - pos, bytesRead, afterRead);\n      }\n    };\n\n    const afterRead = (er, nbytes) => {\n      let eof;\n      if (er) {\n        eof = (er.code === STATUS_CODE.EOF);\n        if (!eof) {\n          return this.close(handle, () => {\n            return callback && callback(er);\n          });\n        }\n      } else {\n        eof = false;\n      }\n\n      if (eof || (size === 0 && nbytes === 0))\n        return close();\n\n      bytesRead += nbytes;\n      pos += nbytes;\n      if (size !== 0) {\n        if (pos === size)\n          close();\n        else\n          read();\n      } else {\n        // Unknown size, just read until we don't get bytes.\n        buffers.push(bufferSlice(buffer, 0, nbytes));\n        read();\n      }\n    };\n    afterRead._wantEOFError = true;\n\n    const close = () => {\n      this.close(handle, (er) => {\n        if (size === 0) {\n          // Collect the data into the buffers list.\n          buffer = Buffer.concat(buffers, pos);\n        } else if (pos < size) {\n          buffer = bufferSlice(buffer, 0, pos);\n        }\n\n        if (encoding)\n          buffer = buffer.toString(encoding);\n        return callback && callback(er, buffer);\n      });\n    };\n\n    this.open(path, flag, 0o666, (er, handle_) => {\n      if (er)\n        return callback && callback(er);\n      handle = handle_;\n\n      const tryStat = (er, st) => {\n        if (er) {\n          // Try stat() for sftp servers that may not support fstat() for\n          // whatever reason\n          this.stat(path, (er_, st_) => {\n            if (er_) {\n              return this.close(handle, () => {\n                callback && callback(er);\n              });\n            }\n            tryStat(null, st_);\n          });\n          return;\n        }\n\n        size = st.size || 0;\n        if (size === 0) {\n          // The kernel lies about many files.\n          // Go ahead and try to read some bytes.\n          buffers = [];\n          return read();\n        }\n\n        buffer = Buffer.allocUnsafe(size);\n        read();\n      };\n      this.fstat(handle, tryStat);\n    });\n  }\n  writeFile(path, data, options, callback_) {\n    if (this.server)\n      throw new Error('Client-only method called in server mode');\n\n    let callback;\n    if (typeof callback_ === 'function') {\n      callback = callback_;\n    } else if (typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n\n    if (typeof options === 'string')\n      options = { encoding: options, mode: 0o666, flag: 'w' };\n    else if (!options)\n      options = { encoding: 'utf8', mode: 0o666, flag: 'w' };\n    else if (typeof options !== 'object')\n      throw new TypeError('Bad arguments');\n\n    if (options.encoding && !Buffer.isEncoding(options.encoding))\n      throw new Error(`Unknown encoding: ${options.encoding}`);\n\n    const flag = options.flag || 'w';\n    this.open(path, flag, options.mode, (openErr, handle) => {\n      if (openErr) {\n        callback && callback(openErr);\n      } else {\n        const buffer = (Buffer.isBuffer(data)\n                        ? data\n                        : Buffer.from('' + data, options.encoding || 'utf8'));\n        const position = (/a/.test(flag) ? null : 0);\n\n        // SFTPv3 does not support the notion of 'current position'\n        // (null position), so we just attempt to append to the end of the file\n        // instead\n        if (position === null) {\n          const tryStat = (er, st) => {\n            if (er) {\n              // Try stat() for sftp servers that may not support fstat() for\n              // whatever reason\n              this.stat(path, (er_, st_) => {\n                if (er_) {\n                  return this.close(handle, () => {\n                    callback && callback(er);\n                  });\n                }\n                tryStat(null, st_);\n              });\n              return;\n            }\n            writeAll(this, handle, buffer, 0, buffer.length, st.size, callback);\n          };\n          this.fstat(handle, tryStat);\n          return;\n        }\n        writeAll(this, handle, buffer, 0, buffer.length, position, callback);\n      }\n    });\n  }\n  appendFile(path, data, options, callback_) {\n    if (this.server)\n      throw new Error('Client-only method called in server mode');\n\n    let callback;\n    if (typeof callback_ === 'function') {\n      callback = callback_;\n    } else if (typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n\n    if (typeof options === 'string')\n      options = { encoding: options, mode: 0o666, flag: 'a' };\n    else if (!options)\n      options = { encoding: 'utf8', mode: 0o666, flag: 'a' };\n    else if (typeof options !== 'object')\n      throw new TypeError('Bad arguments');\n\n    if (!options.flag)\n      options = Object.assign({ flag: 'a' }, options);\n    this.writeFile(path, data, options, callback);\n  }\n  exists(path, cb) {\n    if (this.server)\n      throw new Error('Client-only method called in server mode');\n\n    this.stat(path, (err) => {\n      cb && cb(err ? false : true);\n    });\n  }\n  unlink(filename, cb) {\n    if (this.server)\n      throw new Error('Client-only method called in server mode');\n\n    /*\n      uint32     id\n      string     filename\n    */\n    const fnameLen = Buffer.byteLength(filename);\n    let p = 9;\n    const buf = Buffer.allocUnsafe(4 + 1 + 4 + 4 + fnameLen);\n\n    writeUInt32BE(buf, buf.length - 4, 0);\n    buf[4] = REQUEST.REMOVE;\n    const reqid = this._writeReqid = (this._writeReqid + 1) & MAX_REQID;\n    writeUInt32BE(buf, reqid, 5);\n\n    writeUInt32BE(buf, fnameLen, p);\n    buf.utf8Write(filename, p += 4, fnameLen);\n\n    this._requests[reqid] = { cb };\n\n    const isBuffered = sendOrBuffer(this, buf);\n    this._debug && this._debug(\n      `SFTP: Outbound: ${isBuffered ? 'Buffered' : 'Sending'} REMOVE`\n    );\n  }\n  rename(oldPath, newPath, cb) {\n    if (this.server)\n      throw new Error('Client-only method called in server mode');\n\n    /*\n      uint32     id\n      string     oldpath\n      string     newpath\n    */\n    const oldLen = Buffer.byteLength(oldPath);\n    const newLen = Buffer.byteLength(newPath);\n    let p = 9;\n    const buf = Buffer.allocUnsafe(4 + 1 + 4 + 4 + oldLen + 4 + newLen);\n\n    writeUInt32BE(buf, buf.length - 4, 0);\n    buf[4] = REQUEST.RENAME;\n    const reqid = this._writeReqid = (this._writeReqid + 1) & MAX_REQID;\n    writeUInt32BE(buf, reqid, 5);\n\n    writeUInt32BE(buf, oldLen, p);\n    buf.utf8Write(oldPath, p += 4, oldLen);\n    writeUInt32BE(buf, newLen, p += oldLen);\n    buf.utf8Write(newPath, p += 4, newLen);\n\n    this._requests[reqid] = { cb };\n\n    const isBuffered = sendOrBuffer(this, buf);\n    this._debug && this._debug(\n      `SFTP: Outbound: ${isBuffered ? 'Buffered' : 'Sending'} RENAME`\n    );\n  }\n  mkdir(path, attrs, cb) {\n    if (this.server)\n      throw new Error('Client-only method called in server mode');\n\n    let flags = 0;\n    let attrsLen = 0;\n\n    if (typeof attrs === 'function') {\n      cb = attrs;\n      attrs = undefined;\n    }\n    if (typeof attrs === 'object' && attrs !== null) {\n      attrs = attrsToBytes(attrs);\n      flags = attrs.flags;\n      attrsLen = attrs.nb;\n    }\n\n    /*\n      uint32     id\n      string     path\n      ATTRS      attrs\n    */\n    const pathLen = Buffer.byteLength(path);\n    let p = 9;\n    const buf = Buffer.allocUnsafe(4 + 1 + 4 + 4 + pathLen + 4 + attrsLen);\n\n    writeUInt32BE(buf, buf.length - 4, 0);\n    buf[4] = REQUEST.MKDIR;\n    const reqid = this._writeReqid = (this._writeReqid + 1) & MAX_REQID;\n    writeUInt32BE(buf, reqid, 5);\n\n    writeUInt32BE(buf, pathLen, p);\n    buf.utf8Write(path, p += 4, pathLen);\n    writeUInt32BE(buf, flags, p += pathLen);\n    if (attrsLen) {\n      p += 4;\n\n      if (attrsLen === ATTRS_BUF.length)\n        buf.set(ATTRS_BUF, p);\n      else\n        bufferCopy(ATTRS_BUF, buf, 0, attrsLen, p);\n\n      p += attrsLen;\n    }\n\n    this._requests[reqid] = { cb };\n\n    const isBuffered = sendOrBuffer(this, buf);\n    this._debug && this._debug(\n      `SFTP: Outbound: ${isBuffered ? 'Buffered' : 'Sending'} MKDIR`\n    );\n  }\n  rmdir(path, cb) {\n    if (this.server)\n      throw new Error('Client-only method called in server mode');\n\n    /*\n      uint32     id\n      string     path\n    */\n    const pathLen = Buffer.byteLength(path);\n    let p = 9;\n    const buf = Buffer.allocUnsafe(4 + 1 + 4 + 4 + pathLen);\n\n    writeUInt32BE(buf, buf.length - 4, 0);\n    buf[4] = REQUEST.RMDIR;\n    const reqid = this._writeReqid = (this._writeReqid + 1) & MAX_REQID;\n    writeUInt32BE(buf, reqid, 5);\n\n    writeUInt32BE(buf, pathLen, p);\n    buf.utf8Write(path, p += 4, pathLen);\n\n    this._requests[reqid] = { cb };\n\n    const isBuffered = sendOrBuffer(this, buf);\n    this._debug && this._debug(\n      `SFTP: Outbound: ${isBuffered ? 'Buffered' : 'Sending'} RMDIR`\n    );\n  }\n  readdir(where, opts, cb) {\n    if (this.server)\n      throw new Error('Client-only method called in server mode');\n\n    if (typeof opts === 'function') {\n      cb = opts;\n      opts = {};\n    }\n    if (typeof opts !== 'object' || opts === null)\n      opts = {};\n\n    const doFilter = (opts && opts.full ? false : true);\n\n    if (!Buffer.isBuffer(where) && typeof where !== 'string')\n      throw new Error('missing directory handle or path');\n\n    if (typeof where === 'string') {\n      const entries = [];\n      let e = 0;\n\n      const reread = (err, handle) => {\n        if (err)\n          return cb(err);\n\n        this.readdir(handle, opts, (err, list) => {\n          const eof = (err && err.code === STATUS_CODE.EOF);\n\n          if (err && !eof)\n            return this.close(handle, () => cb(err));\n\n          if (eof) {\n            return this.close(handle, (err) => {\n              if (err)\n                return cb(err);\n              cb(undefined, entries);\n            });\n          }\n\n          for (let i = 0; i < list.length; ++i, ++e)\n            entries[e] = list[i];\n\n          reread(undefined, handle);\n        });\n      };\n      return this.opendir(where, reread);\n    }\n\n    /*\n      uint32     id\n      string     handle\n    */\n    const handleLen = where.length;\n    let p = 9;\n    const buf = Buffer.allocUnsafe(4 + 1 + 4 + 4 + handleLen);\n\n    writeUInt32BE(buf, buf.length - 4, 0);\n    buf[4] = REQUEST.READDIR;\n    const reqid = this._writeReqid = (this._writeReqid + 1) & MAX_REQID;\n    writeUInt32BE(buf, reqid, 5);\n\n    writeUInt32BE(buf, handleLen, p);\n    buf.set(where, p += 4);\n\n    this._requests[reqid] = {\n      cb: (doFilter\n           ? (err, list) => {\n               if (typeof cb !== 'function')\n                 return;\n               if (err)\n                 return cb(err);\n\n               for (let i = list.length - 1; i >= 0; --i) {\n                 if (list[i].filename === '.' || list[i].filename === '..')\n                   list.splice(i, 1);\n               }\n\n               cb(undefined, list);\n             }\n           : cb)\n    };\n\n    const isBuffered = sendOrBuffer(this, buf);\n    this._debug && this._debug(\n      `SFTP: Outbound: ${isBuffered ? 'Buffered' : 'Sending'} READDIR`\n    );\n  }\n  fstat(handle, cb) {\n    if (this.server)\n      throw new Error('Client-only method called in server mode');\n\n    if (!Buffer.isBuffer(handle))\n      throw new Error('handle is not a Buffer');\n\n    /*\n      uint32     id\n      string     handle\n    */\n    const handleLen = handle.length;\n    let p = 9;\n    const buf = Buffer.allocUnsafe(4 + 1 + 4 + 4 + handleLen);\n\n    writeUInt32BE(buf, buf.length - 4, 0);\n    buf[4] = REQUEST.FSTAT;\n    const reqid = this._writeReqid = (this._writeReqid + 1) & MAX_REQID;\n    writeUInt32BE(buf, reqid, 5);\n\n    writeUInt32BE(buf, handleLen, p);\n    buf.set(handle, p += 4);\n\n    this._requests[reqid] = { cb };\n\n    const isBuffered = sendOrBuffer(this, buf);\n    this._debug && this._debug(\n      `SFTP: Outbound: ${isBuffered ? 'Buffered' : 'Sending'} FSTAT`\n    );\n  }\n  stat(path, cb) {\n    if (this.server)\n      throw new Error('Client-only method called in server mode');\n\n    /*\n      uint32     id\n      string     path\n    */\n    const pathLen = Buffer.byteLength(path);\n    let p = 9;\n    const buf = Buffer.allocUnsafe(4 + 1 + 4 + 4 + pathLen);\n\n    writeUInt32BE(buf, buf.length - 4, 0);\n    buf[4] = REQUEST.STAT;\n    const reqid = this._writeReqid = (this._writeReqid + 1) & MAX_REQID;\n    writeUInt32BE(buf, reqid, 5);\n\n    writeUInt32BE(buf, pathLen, p);\n    buf.utf8Write(path, p += 4, pathLen);\n\n    this._requests[reqid] = { cb };\n\n    const isBuffered = sendOrBuffer(this, buf);\n    this._debug && this._debug(\n      `SFTP: Outbound: ${isBuffered ? 'Buffered' : 'Sending'} STAT`\n    );\n  }\n  lstat(path, cb) {\n    if (this.server)\n      throw new Error('Client-only method called in server mode');\n\n    /*\n      uint32     id\n      string     path\n    */\n    const pathLen = Buffer.byteLength(path);\n    let p = 9;\n    const buf = Buffer.allocUnsafe(4 + 1 + 4 + 4 + pathLen);\n\n    writeUInt32BE(buf, buf.length - 4, 0);\n    buf[4] = REQUEST.LSTAT;\n    const reqid = this._writeReqid = (this._writeReqid + 1) & MAX_REQID;\n    writeUInt32BE(buf, reqid, 5);\n\n    writeUInt32BE(buf, pathLen, p);\n    buf.utf8Write(path, p += 4, pathLen);\n\n    this._requests[reqid] = { cb };\n\n    const isBuffered = sendOrBuffer(this, buf);\n    this._debug && this._debug(\n      `SFTP: Outbound: ${isBuffered ? 'Buffered' : 'Sending'} LSTAT`\n    );\n  }\n  opendir(path, cb) {\n    if (this.server)\n      throw new Error('Client-only method called in server mode');\n\n    /*\n      uint32     id\n      string     path\n    */\n    const pathLen = Buffer.byteLength(path);\n    let p = 9;\n    const buf = Buffer.allocUnsafe(4 + 1 + 4 + 4 + pathLen);\n\n    writeUInt32BE(buf, buf.length - 4, 0);\n    buf[4] = REQUEST.OPENDIR;\n    const reqid = this._writeReqid = (this._writeReqid + 1) & MAX_REQID;\n    writeUInt32BE(buf, reqid, 5);\n\n    writeUInt32BE(buf, pathLen, p);\n    buf.utf8Write(path, p += 4, pathLen);\n\n    this._requests[reqid] = { cb };\n\n    const isBuffered = sendOrBuffer(this, buf);\n    this._debug && this._debug(\n      `SFTP: Outbound: ${isBuffered ? 'Buffered' : 'Sending'} OPENDIR`\n    );\n  }\n  setstat(path, attrs, cb) {\n    if (this.server)\n      throw new Error('Client-only method called in server mode');\n\n    let flags = 0;\n    let attrsLen = 0;\n\n    if (typeof attrs === 'object' && attrs !== null) {\n      attrs = attrsToBytes(attrs);\n      flags = attrs.flags;\n      attrsLen = attrs.nb;\n    } else if (typeof attrs === 'function') {\n      cb = attrs;\n    }\n\n    /*\n      uint32     id\n      string     path\n      ATTRS      attrs\n    */\n    const pathLen = Buffer.byteLength(path);\n    let p = 9;\n    const buf = Buffer.allocUnsafe(4 + 1 + 4 + 4 + pathLen + 4 + attrsLen);\n\n    writeUInt32BE(buf, buf.length - 4, 0);\n    buf[4] = REQUEST.SETSTAT;\n    const reqid = this._writeReqid = (this._writeReqid + 1) & MAX_REQID;\n    writeUInt32BE(buf, reqid, 5);\n\n    writeUInt32BE(buf, pathLen, p);\n    buf.utf8Write(path, p += 4, pathLen);\n    writeUInt32BE(buf, flags, p += pathLen);\n    if (attrsLen) {\n      p += 4;\n\n      if (attrsLen === ATTRS_BUF.length)\n        buf.set(ATTRS_BUF, p);\n      else\n        bufferCopy(ATTRS_BUF, buf, 0, attrsLen, p);\n\n      p += attrsLen;\n    }\n\n    this._requests[reqid] = { cb };\n\n    const isBuffered = sendOrBuffer(this, buf);\n    this._debug && this._debug(\n      `SFTP: Outbound: ${isBuffered ? 'Buffered' : 'Sending'} SETSTAT`\n    );\n  }\n  fsetstat(handle, attrs, cb) {\n    if (this.server)\n      throw new Error('Client-only method called in server mode');\n\n    if (!Buffer.isBuffer(handle))\n      throw new Error('handle is not a Buffer');\n\n    let flags = 0;\n    let attrsLen = 0;\n\n    if (typeof attrs === 'object' && attrs !== null) {\n      attrs = attrsToBytes(attrs);\n      flags = attrs.flags;\n      attrsLen = attrs.nb;\n    } else if (typeof attrs === 'function') {\n      cb = attrs;\n    }\n\n    /*\n      uint32     id\n      string     handle\n      ATTRS      attrs\n    */\n    const handleLen = handle.length;\n    let p = 9;\n    const buf = Buffer.allocUnsafe(4 + 1 + 4 + 4 + handleLen + 4 + attrsLen);\n\n    writeUInt32BE(buf, buf.length - 4, 0);\n    buf[4] = REQUEST.FSETSTAT;\n    const reqid = this._writeReqid = (this._writeReqid + 1) & MAX_REQID;\n    writeUInt32BE(buf, reqid, 5);\n\n    writeUInt32BE(buf, handleLen, p);\n    buf.set(handle, p += 4);\n    writeUInt32BE(buf, flags, p += handleLen);\n    if (attrsLen) {\n      p += 4;\n\n      if (attrsLen === ATTRS_BUF.length)\n        buf.set(ATTRS_BUF, p);\n      else\n        bufferCopy(ATTRS_BUF, buf, 0, attrsLen, p);\n\n      p += attrsLen;\n    }\n\n    this._requests[reqid] = { cb };\n\n    const isBuffered = sendOrBuffer(this, buf);\n    this._debug && this._debug(\n      `SFTP: Outbound: ${isBuffered ? 'Buffered' : 'Sending'} FSETSTAT`\n    );\n  }\n  futimes(handle, atime, mtime, cb) {\n    return this.fsetstat(handle, {\n      atime: toUnixTimestamp(atime),\n      mtime: toUnixTimestamp(mtime)\n    }, cb);\n  }\n  utimes(path, atime, mtime, cb) {\n    return this.setstat(path, {\n      atime: toUnixTimestamp(atime),\n      mtime: toUnixTimestamp(mtime)\n    }, cb);\n  }\n  fchown(handle, uid, gid, cb) {\n    return this.fsetstat(handle, {\n      uid: uid,\n      gid: gid\n    }, cb);\n  }\n  chown(path, uid, gid, cb) {\n    return this.setstat(path, {\n      uid: uid,\n      gid: gid\n    }, cb);\n  }\n  fchmod(handle, mode, cb) {\n    return this.fsetstat(handle, {\n      mode: mode\n    }, cb);\n  }\n  chmod(path, mode, cb) {\n    return this.setstat(path, {\n      mode: mode\n    }, cb);\n  }\n  readlink(path, cb) {\n    if (this.server)\n      throw new Error('Client-only method called in server mode');\n\n    /*\n      uint32     id\n      string     path\n    */\n    const pathLen = Buffer.byteLength(path);\n    let p = 9;\n    const buf = Buffer.allocUnsafe(4 + 1 + 4 + 4 + pathLen);\n\n    writeUInt32BE(buf, buf.length - 4, 0);\n    buf[4] = REQUEST.READLINK;\n    const reqid = this._writeReqid = (this._writeReqid + 1) & MAX_REQID;\n    writeUInt32BE(buf, reqid, 5);\n\n    writeUInt32BE(buf, pathLen, p);\n    buf.utf8Write(path, p += 4, pathLen);\n\n    this._requests[reqid] = {\n      cb: (err, names) => {\n        if (typeof cb !== 'function')\n          return;\n        if (err)\n          return cb(err);\n        if (!names || !names.length)\n          return cb(new Error('Response missing link info'));\n        cb(undefined, names[0].filename);\n      }\n    };\n\n    const isBuffered = sendOrBuffer(this, buf);\n    this._debug && this._debug(\n      `SFTP: Outbound: ${isBuffered ? 'Buffered' : 'Sending'} READLINK`\n    );\n  }\n  symlink(targetPath, linkPath, cb) {\n    if (this.server)\n      throw new Error('Client-only method called in server mode');\n\n    /*\n      uint32     id\n      string     linkpath\n      string     targetpath\n    */\n    const linkLen = Buffer.byteLength(linkPath);\n    const targetLen = Buffer.byteLength(targetPath);\n    let p = 9;\n    const buf = Buffer.allocUnsafe(4 + 1 + 4 + 4 + linkLen + 4 + targetLen);\n\n    writeUInt32BE(buf, buf.length - 4, 0);\n    buf[4] = REQUEST.SYMLINK;\n    const reqid = this._writeReqid = (this._writeReqid + 1) & MAX_REQID;\n    writeUInt32BE(buf, reqid, 5);\n\n    if (this._isOpenSSH) {\n      // OpenSSH has linkpath and targetpath positions switched\n      writeUInt32BE(buf, targetLen, p);\n      buf.utf8Write(targetPath, p += 4, targetLen);\n      writeUInt32BE(buf, linkLen, p += targetLen);\n      buf.utf8Write(linkPath, p += 4, linkLen);\n    } else {\n      writeUInt32BE(buf, linkLen, p);\n      buf.utf8Write(linkPath, p += 4, linkLen);\n      writeUInt32BE(buf, targetLen, p += linkLen);\n      buf.utf8Write(targetPath, p += 4, targetLen);\n    }\n\n    this._requests[reqid] = { cb };\n\n    const isBuffered = sendOrBuffer(this, buf);\n    this._debug && this._debug(\n      `SFTP: Outbound: ${isBuffered ? 'Buffered' : 'Sending'} SYMLINK`\n    );\n  }\n  realpath(path, cb) {\n    if (this.server)\n      throw new Error('Client-only method called in server mode');\n\n    /*\n      uint32     id\n      string     path\n    */\n    const pathLen = Buffer.byteLength(path);\n    let p = 9;\n    const buf = Buffer.allocUnsafe(4 + 1 + 4 + 4 + pathLen);\n\n    writeUInt32BE(buf, buf.length - 4, 0);\n    buf[4] = REQUEST.REALPATH;\n    const reqid = this._writeReqid = (this._writeReqid + 1) & MAX_REQID;\n    writeUInt32BE(buf, reqid, 5);\n\n    writeUInt32BE(buf, pathLen, p);\n    buf.utf8Write(path, p += 4, pathLen);\n\n    this._requests[reqid] = {\n      cb: (err, names) => {\n        if (typeof cb !== 'function')\n          return;\n        if (err)\n          return cb(err);\n        if (!names || !names.length)\n          return cb(new Error('Response missing path info'));\n        cb(undefined, names[0].filename);\n      }\n    };\n\n    const isBuffered = sendOrBuffer(this, buf);\n    this._debug && this._debug(\n      `SFTP: Outbound: ${isBuffered ? 'Buffered' : 'Sending'} REALPATH`\n    );\n  }\n  // extended requests\n  ext_openssh_rename(oldPath, newPath, cb) {\n    if (this.server)\n      throw new Error('Client-only method called in server mode');\n\n    const ext = this._extensions['posix-rename@openssh.com'];\n    if (!ext || ext !== '1')\n      throw new Error('Server does not support this extended request');\n\n    /*\n      uint32    id\n      string    \"posix-rename@openssh.com\"\n      string    oldpath\n      string    newpath\n    */\n    const oldLen = Buffer.byteLength(oldPath);\n    const newLen = Buffer.byteLength(newPath);\n    let p = 9;\n    const buf =\n      Buffer.allocUnsafe(4 + 1 + 4 + 4 + 24 + 4 + oldLen + 4 + newLen);\n\n    writeUInt32BE(buf, buf.length - 4, 0);\n    buf[4] = REQUEST.EXTENDED;\n    const reqid = this._writeReqid = (this._writeReqid + 1) & MAX_REQID;\n    writeUInt32BE(buf, reqid, 5);\n\n    writeUInt32BE(buf, 24, p);\n    buf.utf8Write('posix-rename@openssh.com', p += 4, 24);\n    writeUInt32BE(buf, oldLen, p += 24);\n    buf.utf8Write(oldPath, p += 4, oldLen);\n    writeUInt32BE(buf, newLen, p += oldLen);\n    buf.utf8Write(newPath, p += 4, newLen);\n\n    this._requests[reqid] = { cb };\n\n    const isBuffered = sendOrBuffer(this, buf);\n    if (this._debug) {\n      const which = (isBuffered ? 'Buffered' : 'Sending');\n      this._debug(`SFTP: Outbound: ${which} posix-rename@openssh.com`);\n    }\n  }\n  ext_openssh_statvfs(path, cb) {\n    if (this.server)\n      throw new Error('Client-only method called in server mode');\n\n    const ext = this._extensions['statvfs@openssh.com'];\n    if (!ext || ext !== '2')\n      throw new Error('Server does not support this extended request');\n\n    /*\n      uint32    id\n      string    \"statvfs@openssh.com\"\n      string    path\n    */\n    const pathLen = Buffer.byteLength(path);\n    let p = 9;\n    const buf = Buffer.allocUnsafe(4 + 1 + 4 + 4 + 19 + 4 + pathLen);\n\n    writeUInt32BE(buf, buf.length - 4, 0);\n    buf[4] = REQUEST.EXTENDED;\n    const reqid = this._writeReqid = (this._writeReqid + 1) & MAX_REQID;\n    writeUInt32BE(buf, reqid, 5);\n\n    writeUInt32BE(buf, 19, p);\n    buf.utf8Write('statvfs@openssh.com', p += 4, 19);\n    writeUInt32BE(buf, pathLen, p += 19);\n    buf.utf8Write(path, p += 4, pathLen);\n\n    this._requests[reqid] = { extended: 'statvfs@openssh.com', cb };\n\n    const isBuffered = sendOrBuffer(this, buf);\n    if (this._debug) {\n      const which = (isBuffered ? 'Buffered' : 'Sending');\n      this._debug(`SFTP: Outbound: ${which} statvfs@openssh.com`);\n    }\n  }\n  ext_openssh_fstatvfs(handle, cb) {\n    if (this.server)\n      throw new Error('Client-only method called in server mode');\n\n    const ext = this._extensions['fstatvfs@openssh.com'];\n    if (!ext || ext !== '2')\n      throw new Error('Server does not support this extended request');\n    if (!Buffer.isBuffer(handle))\n      throw new Error('handle is not a Buffer');\n\n    /*\n      uint32    id\n      string    \"fstatvfs@openssh.com\"\n      string    handle\n    */\n    const handleLen = handle.length;\n    let p = 9;\n    const buf = Buffer.allocUnsafe(4 + 1 + 4 + 4 + 20 + 4 + handleLen);\n\n    writeUInt32BE(buf, buf.length - 4, 0);\n    buf[4] = REQUEST.EXTENDED;\n    const reqid = this._writeReqid = (this._writeReqid + 1) & MAX_REQID;\n    writeUInt32BE(buf, reqid, 5);\n\n    writeUInt32BE(buf, 20, p);\n    buf.utf8Write('fstatvfs@openssh.com', p += 4, 20);\n    writeUInt32BE(buf, handleLen, p += 20);\n    buf.set(handle, p += 4);\n\n    this._requests[reqid] = { extended: 'fstatvfs@openssh.com', cb };\n\n    const isBuffered = sendOrBuffer(this, buf);\n    if (this._debug) {\n      const which = (isBuffered ? 'Buffered' : 'Sending');\n      this._debug(`SFTP: Outbound: ${which} fstatvfs@openssh.com`);\n    }\n  }\n  ext_openssh_hardlink(oldPath, newPath, cb) {\n    if (this.server)\n      throw new Error('Client-only method called in server mode');\n\n    const ext = this._extensions['hardlink@openssh.com'];\n    if (ext !== '1')\n      throw new Error('Server does not support this extended request');\n\n    /*\n      uint32    id\n      string    \"hardlink@openssh.com\"\n      string    oldpath\n      string    newpath\n    */\n    const oldLen = Buffer.byteLength(oldPath);\n    const newLen = Buffer.byteLength(newPath);\n    let p = 9;\n    const buf =\n      Buffer.allocUnsafe(4 + 1 + 4 + 4 + 20 + 4 + oldLen + 4 + newLen);\n\n    writeUInt32BE(buf, buf.length - 4, 0);\n    buf[4] = REQUEST.EXTENDED;\n    const reqid = this._writeReqid = (this._writeReqid + 1) & MAX_REQID;\n    writeUInt32BE(buf, reqid, 5);\n\n    writeUInt32BE(buf, 20, p);\n    buf.utf8Write('hardlink@openssh.com', p += 4, 20);\n    writeUInt32BE(buf, oldLen, p += 20);\n    buf.utf8Write(oldPath, p += 4, oldLen);\n    writeUInt32BE(buf, newLen, p += oldLen);\n    buf.utf8Write(newPath, p += 4, newLen);\n\n    this._requests[reqid] = { cb };\n\n    const isBuffered = sendOrBuffer(this, buf);\n    if (this._debug) {\n      const which = (isBuffered ? 'Buffered' : 'Sending');\n      this._debug(`SFTP: Outbound: ${which} hardlink@openssh.com`);\n    }\n  }\n  ext_openssh_fsync(handle, cb) {\n    if (this.server)\n      throw new Error('Client-only method called in server mode');\n\n    const ext = this._extensions['fsync@openssh.com'];\n    if (ext !== '1')\n      throw new Error('Server does not support this extended request');\n    if (!Buffer.isBuffer(handle))\n      throw new Error('handle is not a Buffer');\n\n    /*\n      uint32    id\n      string    \"fsync@openssh.com\"\n      string    handle\n    */\n    const handleLen = handle.length;\n    let p = 9;\n    const buf = Buffer.allocUnsafe(4 + 1 + 4 + 4 + 17 + 4 + handleLen);\n\n    writeUInt32BE(buf, buf.length - 4, 0);\n    buf[4] = REQUEST.EXTENDED;\n    const reqid = this._writeReqid = (this._writeReqid + 1) & MAX_REQID;\n    writeUInt32BE(buf, reqid, 5);\n\n    writeUInt32BE(buf, 17, p);\n    buf.utf8Write('fsync@openssh.com', p += 4, 17);\n    writeUInt32BE(buf, handleLen, p += 17);\n    buf.set(handle, p += 4);\n\n    this._requests[reqid] = { cb };\n\n    const isBuffered = sendOrBuffer(this, buf);\n    this._debug && this._debug(\n      `SFTP: Outbound: ${isBuffered ? 'Buffered' : 'Sending'} fsync@openssh.com`\n    );\n  }\n  ext_openssh_lsetstat(path, attrs, cb) {\n    if (this.server)\n      throw new Error('Client-only method called in server mode');\n\n    const ext = this._extensions['lsetstat@openssh.com'];\n    if (ext !== '1')\n      throw new Error('Server does not support this extended request');\n\n    let flags = 0;\n    let attrsLen = 0;\n\n    if (typeof attrs === 'object' && attrs !== null) {\n      attrs = attrsToBytes(attrs);\n      flags = attrs.flags;\n      attrsLen = attrs.nb;\n    } else if (typeof attrs === 'function') {\n      cb = attrs;\n    }\n\n    /*\n      uint32    id\n      string    \"lsetstat@openssh.com\"\n      string    path\n      ATTRS     attrs\n    */\n    const pathLen = Buffer.byteLength(path);\n    let p = 9;\n    const buf =\n      Buffer.allocUnsafe(4 + 1 + 4 + 4 + 20 + 4 + pathLen + 4 + attrsLen);\n\n    writeUInt32BE(buf, buf.length - 4, 0);\n    buf[4] = REQUEST.EXTENDED;\n    const reqid = this._writeReqid = (this._writeReqid + 1) & MAX_REQID;\n    writeUInt32BE(buf, reqid, 5);\n\n    writeUInt32BE(buf, 20, p);\n    buf.utf8Write('lsetstat@openssh.com', p += 4, 20);\n\n    writeUInt32BE(buf, pathLen, p += 20);\n    buf.utf8Write(path, p += 4, pathLen);\n\n    writeUInt32BE(buf, flags, p += pathLen);\n    if (attrsLen) {\n      p += 4;\n\n      if (attrsLen === ATTRS_BUF.length)\n        buf.set(ATTRS_BUF, p);\n      else\n        bufferCopy(ATTRS_BUF, buf, 0, attrsLen, p);\n\n      p += attrsLen;\n    }\n\n    this._requests[reqid] = { cb };\n\n    const isBuffered = sendOrBuffer(this, buf);\n    if (this._debug) {\n      const status = (isBuffered ? 'Buffered' : 'Sending');\n      this._debug(`SFTP: Outbound: ${status} lsetstat@openssh.com`);\n    }\n  }\n  ext_openssh_expandPath(path, cb) {\n    if (this.server)\n      throw new Error('Client-only method called in server mode');\n\n    const ext = this._extensions['expand-path@openssh.com'];\n    if (ext !== '1')\n      throw new Error('Server does not support this extended request');\n\n    /*\n      uint32    id\n      string    \"expand-path@openssh.com\"\n      string    path\n    */\n    const pathLen = Buffer.byteLength(path);\n    let p = 9;\n    const buf = Buffer.allocUnsafe(4 + 1 + 4 + 4 + 23 + 4 + pathLen);\n\n    writeUInt32BE(buf, buf.length - 4, 0);\n    buf[4] = REQUEST.EXTENDED;\n    const reqid = this._writeReqid = (this._writeReqid + 1) & MAX_REQID;\n    writeUInt32BE(buf, reqid, 5);\n\n    writeUInt32BE(buf, 23, p);\n    buf.utf8Write('expand-path@openssh.com', p += 4, 23);\n\n    writeUInt32BE(buf, pathLen, p += 20);\n    buf.utf8Write(path, p += 4, pathLen);\n\n    this._requests[reqid] = {\n      cb: (err, names) => {\n        if (typeof cb !== 'function')\n          return;\n        if (err)\n          return cb(err);\n        if (!names || !names.length)\n          return cb(new Error('Response missing expanded path'));\n        cb(undefined, names[0].filename);\n      }\n    };\n\n    const isBuffered = sendOrBuffer(this, buf);\n    if (this._debug) {\n      const status = (isBuffered ? 'Buffered' : 'Sending');\n      this._debug(`SFTP: Outbound: ${status} expand-path@openssh.com`);\n    }\n  }\n  ext_copy_data(srcHandle, srcOffset, len, dstHandle, dstOffset, cb) {\n    if (this.server)\n      throw new Error('Client-only method called in server mode');\n\n    const ext = this._extensions['copy-data'];\n    if (ext !== '1')\n      throw new Error('Server does not support this extended request');\n\n    if (!Buffer.isBuffer(srcHandle))\n      throw new Error('Source handle is not a Buffer');\n\n    if (!Buffer.isBuffer(dstHandle))\n      throw new Error('Destination handle is not a Buffer');\n\n    /*\n      uint32    id\n      string    \"copy-data\"\n      string    read-from-handle\n      uint64    read-from-offset\n      uint64    read-data-length\n      string    write-to-handle\n      uint64    write-to-offset\n    */\n    let p = 0;\n    const buf = Buffer.allocUnsafe(\n      4 + 1\n      + 4\n      + 4 + 9\n      + 4 + srcHandle.length\n      + 8\n      + 8\n      + 4 + dstHandle.length\n      + 8\n    );\n\n    writeUInt32BE(buf, buf.length - 4, p);\n    p += 4;\n\n    buf[p] = REQUEST.EXTENDED;\n    ++p;\n\n    const reqid = this._writeReqid = (this._writeReqid + 1) & MAX_REQID;\n    writeUInt32BE(buf, reqid, p);\n    p += 4;\n\n    writeUInt32BE(buf, 9, p);\n    p += 4;\n    buf.utf8Write('copy-data', p, 9);\n    p += 9;\n\n    writeUInt32BE(buf, srcHandle.length, p);\n    p += 4;\n    buf.set(srcHandle, p);\n    p += srcHandle.length;\n\n    for (let i = 7; i >= 0; --i) {\n      buf[p + i] = srcOffset & 0xFF;\n      srcOffset /= 256;\n    }\n    p += 8;\n\n    for (let i = 7; i >= 0; --i) {\n      buf[p + i] = len & 0xFF;\n      len /= 256;\n    }\n    p += 8;\n\n    writeUInt32BE(buf, dstHandle.length, p);\n    p += 4;\n    buf.set(dstHandle, p);\n    p += dstHandle.length;\n\n    for (let i = 7; i >= 0; --i) {\n      buf[p + i] = dstOffset & 0xFF;\n      dstOffset /= 256;\n    }\n\n    this._requests[reqid] = { cb };\n\n    const isBuffered = sendOrBuffer(this, buf);\n    if (this._debug) {\n      const status = (isBuffered ? 'Buffered' : 'Sending');\n      this._debug(`SFTP: Outbound: ${status} copy-data`);\n    }\n  }\n  ext_home_dir(username, cb) {\n    if (this.server)\n      throw new Error('Client-only method called in server mode');\n\n    const ext = this._extensions['home-directory'];\n    if (ext !== '1')\n      throw new Error('Server does not support this extended request');\n\n    if (typeof username !== 'string')\n      throw new TypeError('username is not a string');\n\n    /*\n      uint32    id\n      string    \"home-directory\"\n      string    username\n    */\n    let p = 0;\n    const usernameLen = Buffer.byteLength(username);\n    const buf = Buffer.allocUnsafe(\n      4 + 1\n      + 4\n      + 4 + 14\n      + 4 + usernameLen\n    );\n\n    writeUInt32BE(buf, buf.length - 4, p);\n    p += 4;\n\n    buf[p] = REQUEST.EXTENDED;\n    ++p;\n\n    const reqid = this._writeReqid = (this._writeReqid + 1) & MAX_REQID;\n    writeUInt32BE(buf, reqid, p);\n    p += 4;\n\n    writeUInt32BE(buf, 14, p);\n    p += 4;\n    buf.utf8Write('home-directory', p, 14);\n    p += 14;\n\n    writeUInt32BE(buf, usernameLen, p);\n    p += 4;\n    buf.utf8Write(username, p, usernameLen);\n    p += usernameLen;\n\n    this._requests[reqid] = {\n      cb: (err, names) => {\n        if (typeof cb !== 'function')\n          return;\n        if (err)\n          return cb(err);\n        if (!names || !names.length)\n          return cb(new Error('Response missing home directory'));\n        cb(undefined, names[0].filename);\n      }\n    };\n\n    const isBuffered = sendOrBuffer(this, buf);\n    if (this._debug) {\n      const status = (isBuffered ? 'Buffered' : 'Sending');\n      this._debug(`SFTP: Outbound: ${status} home-directory`);\n    }\n  }\n  ext_users_groups(uids, gids, cb) {\n    if (this.server)\n      throw new Error('Client-only method called in server mode');\n\n    const ext = this._extensions['users-groups-by-id@openssh.com'];\n    if (ext !== '1')\n      throw new Error('Server does not support this extended request');\n\n    if (!Array.isArray(uids))\n      throw new TypeError('uids is not an array');\n    for (const val of uids) {\n      if (!Number.isInteger(val) || val < 0 || val > (2 ** 32 - 1))\n        throw new Error('uid values must all be 32-bit unsigned integers');\n    }\n    if (!Array.isArray(gids))\n      throw new TypeError('gids is not an array');\n    for (const val of gids) {\n      if (!Number.isInteger(val) || val < 0 || val > (2 ** 32 - 1))\n        throw new Error('gid values must all be 32-bit unsigned integers');\n    }\n\n    /*\n      uint32    id\n      string    \"users-groups-by-id@openssh.com\"\n      string    uids\n        uint32    uid1\n        ...\n      string    gids\n        uint32    gid1\n        ...\n    */\n    let p = 0;\n    const buf = Buffer.allocUnsafe(\n      4 + 1\n      + 4\n      + 4 + 30\n      + 4 + (4 * uids.length)\n      + 4 + (4 * gids.length)\n    );\n\n    writeUInt32BE(buf, buf.length - 4, p);\n    p += 4;\n\n    buf[p] = REQUEST.EXTENDED;\n    ++p;\n\n    const reqid = this._writeReqid = (this._writeReqid + 1) & MAX_REQID;\n    writeUInt32BE(buf, reqid, p);\n    p += 4;\n\n    writeUInt32BE(buf, 30, p);\n    p += 4;\n    buf.utf8Write('users-groups-by-id@openssh.com', p, 30);\n    p += 30;\n\n    writeUInt32BE(buf, 4 * uids.length, p);\n    p += 4;\n    for (const val of uids) {\n      writeUInt32BE(buf, val, p);\n      p += 4;\n    }\n\n    writeUInt32BE(buf, 4 * gids.length, p);\n    p += 4;\n    for (const val of gids) {\n      writeUInt32BE(buf, val, p);\n      p += 4;\n    }\n\n    this._requests[reqid] = { extended: 'users-groups-by-id@openssh.com', cb };\n\n    const isBuffered = sendOrBuffer(this, buf);\n    if (this._debug) {\n      const status = (isBuffered ? 'Buffered' : 'Sending');\n      this._debug(`SFTP: Outbound: ${status} users-groups-by-id@openssh.com`);\n    }\n  }\n  // ===========================================================================\n  // Server-specific ===========================================================\n  // ===========================================================================\n  handle(reqid, handle) {\n    if (!this.server)\n      throw new Error('Server-only method called in client mode');\n\n    if (!Buffer.isBuffer(handle))\n      throw new Error('handle is not a Buffer');\n\n    const handleLen = handle.length;\n\n    if (handleLen > 256)\n      throw new Error('handle too large (> 256 bytes)');\n\n    let p = 9;\n    const buf = Buffer.allocUnsafe(4 + 1 + 4 + 4 + handleLen);\n\n    writeUInt32BE(buf, buf.length - 4, 0);\n    buf[4] = RESPONSE.HANDLE;\n    writeUInt32BE(buf, reqid, 5);\n\n    writeUInt32BE(buf, handleLen, p);\n    if (handleLen)\n      buf.set(handle, p += 4);\n\n    const isBuffered = sendOrBuffer(this, buf);\n    this._debug && this._debug(\n      `SFTP: Outbound: ${isBuffered ? 'Buffered' : 'Sending'} HANDLE`\n    );\n  }\n  status(reqid, code, message) {\n    if (!this.server)\n      throw new Error('Server-only method called in client mode');\n\n    if (!VALID_STATUS_CODES.has(code))\n      throw new Error(`Bad status code: ${code}`);\n\n    message || (message = '');\n\n    const msgLen = Buffer.byteLength(message);\n    let p = 9;\n    const buf = Buffer.allocUnsafe(4 + 1 + 4 + 4 + 4 + msgLen + 4);\n\n    writeUInt32BE(buf, buf.length - 4, 0);\n    buf[4] = RESPONSE.STATUS;\n    writeUInt32BE(buf, reqid, 5);\n\n    writeUInt32BE(buf, code, p);\n\n    writeUInt32BE(buf, msgLen, p += 4);\n    p += 4;\n    if (msgLen) {\n      buf.utf8Write(message, p, msgLen);\n      p += msgLen;\n    }\n\n    writeUInt32BE(buf, 0, p); // Empty language tag\n\n    const isBuffered = sendOrBuffer(this, buf);\n    this._debug && this._debug(\n      `SFTP: Outbound: ${isBuffered ? 'Buffered' : 'Sending'} STATUS`\n    );\n  }\n  data(reqid, data, encoding) {\n    if (!this.server)\n      throw new Error('Server-only method called in client mode');\n\n    const isBuffer = Buffer.isBuffer(data);\n\n    if (!isBuffer && typeof data !== 'string')\n      throw new Error('data is not a Buffer or string');\n\n    let isUTF8;\n    if (!isBuffer && !encoding) {\n      encoding = undefined;\n      isUTF8 = true;\n    }\n\n    const dataLen = (\n      isBuffer\n      ? data.length\n      : Buffer.byteLength(data, encoding)\n    );\n    let p = 9;\n    const buf = Buffer.allocUnsafe(4 + 1 + 4 + 4 + dataLen);\n\n    writeUInt32BE(buf, buf.length - 4, 0);\n    buf[4] = RESPONSE.DATA;\n    writeUInt32BE(buf, reqid, 5);\n\n    writeUInt32BE(buf, dataLen, p);\n    if (dataLen) {\n      if (isBuffer)\n        buf.set(data, p += 4);\n      else if (isUTF8)\n        buf.utf8Write(data, p += 4, dataLen);\n      else\n        buf.write(data, p += 4, dataLen, encoding);\n    }\n\n    const isBuffered = sendOrBuffer(this, buf);\n    this._debug && this._debug(\n      `SFTP: Outbound: ${isBuffered ? 'Buffered' : 'Sending'} DATA`\n    );\n  }\n  name(reqid, names) {\n    if (!this.server)\n      throw new Error('Server-only method called in client mode');\n\n    if (!Array.isArray(names)) {\n      if (typeof names !== 'object' || names === null)\n        throw new Error('names is not an object or array');\n      names = [ names ];\n    }\n\n    const count = names.length;\n    let namesLen = 0;\n    let nameAttrs;\n    const attrs = [];\n\n    for (let i = 0; i < count; ++i) {\n      const name = names[i];\n      const filename = (\n        !name || !name.filename || typeof name.filename !== 'string'\n        ? ''\n        : name.filename\n      );\n      namesLen += 4 + Buffer.byteLength(filename);\n      const longname = (\n        !name || !name.longname || typeof name.longname !== 'string'\n        ? ''\n        : name.longname\n      );\n      namesLen += 4 + Buffer.byteLength(longname);\n\n      if (typeof name.attrs === 'object' && name.attrs !== null) {\n        nameAttrs = attrsToBytes(name.attrs);\n        namesLen += 4 + nameAttrs.nb;\n\n        if (nameAttrs.nb) {\n          let bytes;\n\n          if (nameAttrs.nb === ATTRS_BUF.length) {\n            bytes = new Uint8Array(ATTRS_BUF);\n          } else {\n            bytes = new Uint8Array(nameAttrs.nb);\n            bufferCopy(ATTRS_BUF, bytes, 0, nameAttrs.nb, 0);\n          }\n\n          nameAttrs.bytes = bytes;\n        }\n\n        attrs.push(nameAttrs);\n      } else {\n        namesLen += 4;\n        attrs.push(null);\n      }\n    }\n\n    let p = 9;\n    const buf = Buffer.allocUnsafe(4 + 1 + 4 + 4 + namesLen);\n\n    writeUInt32BE(buf, buf.length - 4, 0);\n    buf[4] = RESPONSE.NAME;\n    writeUInt32BE(buf, reqid, 5);\n\n    writeUInt32BE(buf, count, p);\n\n    p += 4;\n\n    for (let i = 0; i < count; ++i) {\n      const name = names[i];\n\n      {\n        const filename = (\n          !name || !name.filename || typeof name.filename !== 'string'\n          ? ''\n          : name.filename\n        );\n        const len = Buffer.byteLength(filename);\n        writeUInt32BE(buf, len, p);\n        p += 4;\n        if (len) {\n          buf.utf8Write(filename, p, len);\n          p += len;\n        }\n      }\n\n      {\n        const longname = (\n          !name || !name.longname || typeof name.longname !== 'string'\n          ? ''\n          : name.longname\n        );\n        const len = Buffer.byteLength(longname);\n        writeUInt32BE(buf, len, p);\n        p += 4;\n        if (len) {\n          buf.utf8Write(longname, p, len);\n          p += len;\n        }\n      }\n\n      const attr = attrs[i];\n      if (attr) {\n        writeUInt32BE(buf, attr.flags, p);\n        p += 4;\n        if (attr.flags && attr.bytes) {\n          buf.set(attr.bytes, p);\n          p += attr.nb;\n        }\n      } else {\n        writeUInt32BE(buf, 0, p);\n        p += 4;\n      }\n    }\n\n    const isBuffered = sendOrBuffer(this, buf);\n    this._debug && this._debug(\n      `SFTP: Outbound: ${isBuffered ? 'Buffered' : 'Sending'} NAME`\n    );\n  }\n  attrs(reqid, attrs) {\n    if (!this.server)\n      throw new Error('Server-only method called in client mode');\n\n    if (typeof attrs !== 'object' || attrs === null)\n      throw new Error('attrs is not an object');\n\n    attrs = attrsToBytes(attrs);\n    const flags = attrs.flags;\n    const attrsLen = attrs.nb;\n    let p = 9;\n    const buf = Buffer.allocUnsafe(4 + 1 + 4 + 4 + attrsLen);\n\n    writeUInt32BE(buf, buf.length - 4, 0);\n    buf[4] = RESPONSE.ATTRS;\n    writeUInt32BE(buf, reqid, 5);\n\n    writeUInt32BE(buf, flags, p);\n    if (attrsLen) {\n      p += 4;\n\n      if (attrsLen === ATTRS_BUF.length)\n        buf.set(ATTRS_BUF, p);\n      else\n        bufferCopy(ATTRS_BUF, buf, 0, attrsLen, p);\n\n      p += attrsLen;\n    }\n\n    const isBuffered = sendOrBuffer(this, buf);\n    this._debug && this._debug(\n      `SFTP: Outbound: ${isBuffered ? 'Buffered' : 'Sending'} ATTRS`\n    );\n  }\n}\n\nfunction tryCreateBuffer(size) {\n  try {\n    return Buffer.allocUnsafe(size);\n  } catch (ex) {\n    return ex;\n  }\n}\n\nfunction read_(self, handle, buf, off, len, position, cb, req_) {\n  const maxDataLen = self._maxReadLen;\n  const overflow = Math.max(len - maxDataLen, 0);\n\n  if (overflow)\n    len = maxDataLen;\n\n  /*\n    uint32     id\n    string     handle\n    uint64     offset\n    uint32     len\n  */\n  const handleLen = handle.length;\n  let p = 9;\n  let pos = position;\n  const out = Buffer.allocUnsafe(4 + 1 + 4 + 4 + handleLen + 8 + 4);\n\n  writeUInt32BE(out, out.length - 4, 0);\n  out[4] = REQUEST.READ;\n  const reqid = self._writeReqid = (self._writeReqid + 1) & MAX_REQID;\n  writeUInt32BE(out, reqid, 5);\n\n  writeUInt32BE(out, handleLen, p);\n  out.set(handle, p += 4);\n  p += handleLen;\n  for (let i = 7; i >= 0; --i) {\n    out[p + i] = pos & 0xFF;\n    pos /= 256;\n  }\n  writeUInt32BE(out, len, p += 8);\n\n  if (typeof cb !== 'function')\n    cb = noop;\n\n  const req = (req_ || {\n    nb: 0,\n    position,\n    off,\n    origOff: off,\n    len: undefined,\n    overflow: undefined,\n    cb: (err, data, nb) => {\n      const len = req.len;\n      const overflow = req.overflow;\n\n      if (err) {\n        if (cb._wantEOFError || err.code !== STATUS_CODE.EOF)\n          return cb(err);\n      } else if (nb > len) {\n        return cb(new Error('Received more data than requested'));\n      } else if (nb === len && overflow) {\n        req.nb += nb;\n        req.position += nb;\n        req.off += nb;\n        read_(self, handle, buf, req.off, overflow, req.position, cb, req);\n        return;\n      }\n\n      nb = (nb || 0);\n      if (req.origOff === 0 && buf.length === req.nb)\n        data = buf;\n      else\n        data = bufferSlice(buf, req.origOff, req.origOff + req.nb + nb);\n      cb(undefined, req.nb + nb, data, req.position);\n    },\n    buffer: undefined,\n  });\n\n  req.len = len;\n  req.overflow = overflow;\n\n  // TODO: avoid creating multiple buffer slices when we need to re-call read_()\n  // because of overflow\n  req.buffer = bufferSlice(buf, off, off + len);\n\n  self._requests[reqid] = req;\n\n  const isBuffered = sendOrBuffer(self, out);\n  self._debug && self._debug(\n    `SFTP: Outbound: ${isBuffered ? 'Buffered' : 'Sending'} READ`\n  );\n}\n\nfunction fastXfer(src, dst, srcPath, dstPath, opts, cb) {\n  let concurrency = 64;\n  let chunkSize = 32768;\n  let onstep;\n  let mode;\n  let fileSize;\n\n  if (typeof opts === 'function') {\n    cb = opts;\n  } else if (typeof opts === 'object' && opts !== null) {\n    if (typeof opts.concurrency === 'number'\n        && opts.concurrency > 0\n        && !isNaN(opts.concurrency)) {\n      concurrency = opts.concurrency;\n    }\n    if (typeof opts.chunkSize === 'number'\n        && opts.chunkSize > 0\n        && !isNaN(opts.chunkSize)) {\n      chunkSize = opts.chunkSize;\n    }\n    if (typeof opts.fileSize === 'number'\n        && opts.fileSize > 0\n        && !isNaN(opts.fileSize)) {\n      fileSize = opts.fileSize;\n    }\n    if (typeof opts.step === 'function')\n      onstep = opts.step;\n\n    if (typeof opts.mode === 'string' || typeof opts.mode === 'number')\n      mode = modeNum(opts.mode);\n  }\n\n  // Internal state variables\n  let fsize;\n  let pdst = 0;\n  let total = 0;\n  let hadError = false;\n  let srcHandle;\n  let dstHandle;\n  let readbuf;\n  let bufsize = chunkSize * concurrency;\n\n  function onerror(err) {\n    if (hadError)\n      return;\n\n    hadError = true;\n\n    let left = 0;\n    let cbfinal;\n\n    if (srcHandle || dstHandle) {\n      cbfinal = () => {\n        if (--left === 0)\n          cb(err);\n      };\n      if (srcHandle && (src === fs || src.outgoing.state === 'open'))\n        ++left;\n      if (dstHandle && (dst === fs || dst.outgoing.state === 'open'))\n        ++left;\n      if (srcHandle && (src === fs || src.outgoing.state === 'open'))\n        src.close(srcHandle, cbfinal);\n      if (dstHandle && (dst === fs || dst.outgoing.state === 'open'))\n        dst.close(dstHandle, cbfinal);\n    } else {\n      cb(err);\n    }\n  }\n\n  src.open(srcPath, 'r', (err, sourceHandle) => {\n    if (err)\n      return onerror(err);\n\n    srcHandle = sourceHandle;\n\n    if (fileSize === undefined)\n      src.fstat(srcHandle, tryStat);\n    else\n      tryStat(null, { size: fileSize });\n\n    function tryStat(err, attrs) {\n      if (err) {\n        if (src !== fs) {\n          // Try stat() for sftp servers that may not support fstat() for\n          // whatever reason\n          src.stat(srcPath, (err_, attrs_) => {\n            if (err_)\n              return onerror(err);\n            tryStat(null, attrs_);\n          });\n          return;\n        }\n        return onerror(err);\n      }\n      fsize = attrs.size;\n\n      dst.open(dstPath, 'w', (err, destHandle) => {\n        if (err)\n          return onerror(err);\n\n        dstHandle = destHandle;\n\n        if (fsize <= 0)\n          return onerror();\n\n        // Use less memory where possible\n        while (bufsize > fsize) {\n          if (concurrency === 1) {\n            bufsize = fsize;\n            break;\n          }\n          bufsize -= chunkSize;\n          --concurrency;\n        }\n\n        readbuf = tryCreateBuffer(bufsize);\n        if (readbuf instanceof Error)\n          return onerror(readbuf);\n\n        if (mode !== undefined) {\n          dst.fchmod(dstHandle, mode, function tryAgain(err) {\n            if (err) {\n              // Try chmod() for sftp servers that may not support fchmod()\n              // for whatever reason\n              dst.chmod(dstPath, mode, (err_) => tryAgain());\n              return;\n            }\n            startReads();\n          });\n        } else {\n          startReads();\n        }\n\n        function onread(err, nb, data, dstpos, datapos, origChunkLen) {\n          if (err)\n            return onerror(err);\n\n          datapos = datapos || 0;\n\n          dst.write(dstHandle, readbuf, datapos, nb, dstpos, writeCb);\n\n          function writeCb(err) {\n            if (err)\n              return onerror(err);\n\n            total += nb;\n            onstep && onstep(total, nb, fsize);\n\n            if (nb < origChunkLen)\n              return singleRead(datapos, dstpos + nb, origChunkLen - nb);\n\n            if (total === fsize) {\n              dst.close(dstHandle, (err) => {\n                dstHandle = undefined;\n                if (err)\n                  return onerror(err);\n                src.close(srcHandle, (err) => {\n                  srcHandle = undefined;\n                  if (err)\n                    return onerror(err);\n                  cb();\n                });\n              });\n              return;\n            }\n\n            if (pdst >= fsize)\n              return;\n\n            const chunk =\n              (pdst + chunkSize > fsize ? fsize - pdst : chunkSize);\n            singleRead(datapos, pdst, chunk);\n            pdst += chunk;\n          }\n        }\n\n        function makeCb(psrc, pdst, chunk) {\n          return (err, nb, data) => {\n            onread(err, nb, data, pdst, psrc, chunk);\n          };\n        }\n\n        function singleRead(psrc, pdst, chunk) {\n          src.read(srcHandle,\n                   readbuf,\n                   psrc,\n                   chunk,\n                   pdst,\n                   makeCb(psrc, pdst, chunk));\n        }\n\n        function startReads() {\n          let reads = 0;\n          let psrc = 0;\n          while (pdst < fsize && reads < concurrency) {\n            const chunk =\n              (pdst + chunkSize > fsize ? fsize - pdst : chunkSize);\n            singleRead(psrc, pdst, chunk);\n            psrc += chunk;\n            pdst += chunk;\n            ++reads;\n          }\n        }\n      });\n    }\n  });\n}\n\nfunction writeAll(sftp, handle, buffer, offset, length, position, callback_) {\n  const callback = (typeof callback_ === 'function' ? callback_ : undefined);\n\n  sftp.write(handle,\n             buffer,\n             offset,\n             length,\n             position,\n             (writeErr, written) => {\n    if (writeErr) {\n      return sftp.close(handle, () => {\n        callback && callback(writeErr);\n      });\n    }\n    if (written === length) {\n      sftp.close(handle, callback);\n    } else {\n      offset += written;\n      length -= written;\n      position += written;\n      writeAll(sftp, handle, buffer, offset, length, position, callback);\n    }\n  });\n}\n\nclass Stats {\n  constructor(initial) {\n    this.mode = (initial && initial.mode);\n    this.uid = (initial && initial.uid);\n    this.gid = (initial && initial.gid);\n    this.size = (initial && initial.size);\n    this.atime = (initial && initial.atime);\n    this.mtime = (initial && initial.mtime);\n    this.extended = (initial && initial.extended);\n  }\n  isDirectory() {\n    return ((this.mode & constants.S_IFMT) === constants.S_IFDIR);\n  }\n  isFile() {\n    return ((this.mode & constants.S_IFMT) === constants.S_IFREG);\n  }\n  isBlockDevice() {\n    return ((this.mode & constants.S_IFMT) === constants.S_IFBLK);\n  }\n  isCharacterDevice() {\n    return ((this.mode & constants.S_IFMT) === constants.S_IFCHR);\n  }\n  isSymbolicLink() {\n    return ((this.mode & constants.S_IFMT) === constants.S_IFLNK);\n  }\n  isFIFO() {\n    return ((this.mode & constants.S_IFMT) === constants.S_IFIFO);\n  }\n  isSocket() {\n    return ((this.mode & constants.S_IFMT) === constants.S_IFSOCK);\n  }\n}\n\nfunction attrsToBytes(attrs) {\n  let flags = 0;\n  let nb = 0;\n\n  if (typeof attrs === 'object' && attrs !== null) {\n    if (typeof attrs.size === 'number') {\n      flags |= ATTR.SIZE;\n      const val = attrs.size;\n      // Big Endian\n      ATTRS_BUF[nb++] = val / 72057594037927940; // 2**56\n      ATTRS_BUF[nb++] = val / 281474976710656; // 2**48\n      ATTRS_BUF[nb++] = val / 1099511627776; // 2**40\n      ATTRS_BUF[nb++] = val / 4294967296; // 2**32\n      ATTRS_BUF[nb++] = val / 16777216; // 2**24\n      ATTRS_BUF[nb++] = val / 65536; // 2**16\n      ATTRS_BUF[nb++] = val / 256; // 2**8\n      ATTRS_BUF[nb++] = val;\n    }\n    if (typeof attrs.uid === 'number' && typeof attrs.gid === 'number') {\n      flags |= ATTR.UIDGID;\n      const uid = attrs.uid;\n      const gid = attrs.gid;\n      // Big Endian\n      ATTRS_BUF[nb++] = uid >>> 24;\n      ATTRS_BUF[nb++] = uid >>> 16;\n      ATTRS_BUF[nb++] = uid >>> 8;\n      ATTRS_BUF[nb++] = uid;\n      ATTRS_BUF[nb++] = gid >>> 24;\n      ATTRS_BUF[nb++] = gid >>> 16;\n      ATTRS_BUF[nb++] = gid >>> 8;\n      ATTRS_BUF[nb++] = gid;\n    }\n    if (typeof attrs.mode === 'number' || typeof attrs.mode === 'string') {\n      const mode = modeNum(attrs.mode);\n      flags |= ATTR.PERMISSIONS;\n      // Big Endian\n      ATTRS_BUF[nb++] = mode >>> 24;\n      ATTRS_BUF[nb++] = mode >>> 16;\n      ATTRS_BUF[nb++] = mode >>> 8;\n      ATTRS_BUF[nb++] = mode;\n    }\n    if ((typeof attrs.atime === 'number' || isDate(attrs.atime))\n        && (typeof attrs.mtime === 'number' || isDate(attrs.mtime))) {\n      const atime = toUnixTimestamp(attrs.atime);\n      const mtime = toUnixTimestamp(attrs.mtime);\n\n      flags |= ATTR.ACMODTIME;\n      // Big Endian\n      ATTRS_BUF[nb++] = atime >>> 24;\n      ATTRS_BUF[nb++] = atime >>> 16;\n      ATTRS_BUF[nb++] = atime >>> 8;\n      ATTRS_BUF[nb++] = atime;\n      ATTRS_BUF[nb++] = mtime >>> 24;\n      ATTRS_BUF[nb++] = mtime >>> 16;\n      ATTRS_BUF[nb++] = mtime >>> 8;\n      ATTRS_BUF[nb++] = mtime;\n    }\n    // TODO: extended attributes\n  }\n\n  return { flags, nb };\n}\n\nfunction toUnixTimestamp(time) {\n  // eslint-disable-next-line no-self-compare\n  if (typeof time === 'number' && time === time) // Valid, non-NaN number\n    return time;\n  if (isDate(time))\n    return parseInt(time.getTime() / 1000, 10);\n  throw new Error(`Cannot parse time: ${time}`);\n}\n\nfunction modeNum(mode) {\n  // eslint-disable-next-line no-self-compare\n  if (typeof mode === 'number' && mode === mode) // Valid, non-NaN number\n    return mode;\n  if (typeof mode === 'string')\n    return modeNum(parseInt(mode, 8));\n  throw new Error(`Cannot parse mode: ${mode}`);\n}\n\nconst stringFlagMap = {\n  'r': OPEN_MODE.READ,\n  'r+': OPEN_MODE.READ | OPEN_MODE.WRITE,\n  'w': OPEN_MODE.TRUNC | OPEN_MODE.CREAT | OPEN_MODE.WRITE,\n  'wx': OPEN_MODE.TRUNC | OPEN_MODE.CREAT | OPEN_MODE.WRITE | OPEN_MODE.EXCL,\n  'xw': OPEN_MODE.TRUNC | OPEN_MODE.CREAT | OPEN_MODE.WRITE | OPEN_MODE.EXCL,\n  'w+': OPEN_MODE.TRUNC | OPEN_MODE.CREAT | OPEN_MODE.READ | OPEN_MODE.WRITE,\n  'wx+': OPEN_MODE.TRUNC | OPEN_MODE.CREAT | OPEN_MODE.READ | OPEN_MODE.WRITE\n         | OPEN_MODE.EXCL,\n  'xw+': OPEN_MODE.TRUNC | OPEN_MODE.CREAT | OPEN_MODE.READ | OPEN_MODE.WRITE\n         | OPEN_MODE.EXCL,\n  'a': OPEN_MODE.APPEND | OPEN_MODE.CREAT | OPEN_MODE.WRITE,\n  'ax': OPEN_MODE.APPEND | OPEN_MODE.CREAT | OPEN_MODE.WRITE | OPEN_MODE.EXCL,\n  'xa': OPEN_MODE.APPEND | OPEN_MODE.CREAT | OPEN_MODE.WRITE | OPEN_MODE.EXCL,\n  'a+': OPEN_MODE.APPEND | OPEN_MODE.CREAT | OPEN_MODE.READ | OPEN_MODE.WRITE,\n  'ax+': OPEN_MODE.APPEND | OPEN_MODE.CREAT | OPEN_MODE.READ | OPEN_MODE.WRITE\n         | OPEN_MODE.EXCL,\n  'xa+': OPEN_MODE.APPEND | OPEN_MODE.CREAT | OPEN_MODE.READ | OPEN_MODE.WRITE\n         | OPEN_MODE.EXCL\n};\n\nfunction stringToFlags(str) {\n  const flags = stringFlagMap[str];\n  return (flags !== undefined ? flags : null);\n}\n\nconst flagsToString = (() => {\n  const stringFlagMapKeys = Object.keys(stringFlagMap);\n  return (flags) => {\n    for (let i = 0; i < stringFlagMapKeys.length; ++i) {\n      const key = stringFlagMapKeys[i];\n      if (stringFlagMap[key] === flags)\n        return key;\n    }\n    return null;\n  };\n})();\n\nfunction readAttrs(biOpt) {\n  /*\n    uint32   flags\n    uint64   size           present only if flag SSH_FILEXFER_ATTR_SIZE\n    uint32   uid            present only if flag SSH_FILEXFER_ATTR_UIDGID\n    uint32   gid            present only if flag SSH_FILEXFER_ATTR_UIDGID\n    uint32   permissions    present only if flag SSH_FILEXFER_ATTR_PERMISSIONS\n    uint32   atime          present only if flag SSH_FILEXFER_ACMODTIME\n    uint32   mtime          present only if flag SSH_FILEXFER_ACMODTIME\n    uint32   extended_count present only if flag SSH_FILEXFER_ATTR_EXTENDED\n    string   extended_type\n    string   extended_data\n    ...      more extended data (extended_type - extended_data pairs),\n               so that number of pairs equals extended_count\n  */\n  const flags = bufferParser.readUInt32BE();\n  if (flags === undefined)\n    return;\n\n  const attrs = new Stats();\n  if (flags & ATTR.SIZE) {\n    const size = bufferParser.readUInt64BE(biOpt);\n    if (size === undefined)\n      return;\n    attrs.size = size;\n  }\n\n  if (flags & ATTR.UIDGID) {\n    const uid = bufferParser.readUInt32BE();\n    const gid = bufferParser.readUInt32BE();\n    if (gid === undefined)\n      return;\n    attrs.uid = uid;\n    attrs.gid = gid;\n  }\n\n  if (flags & ATTR.PERMISSIONS) {\n    const mode = bufferParser.readUInt32BE();\n    if (mode === undefined)\n      return;\n    attrs.mode = mode;\n  }\n\n  if (flags & ATTR.ACMODTIME) {\n    const atime = bufferParser.readUInt32BE();\n    const mtime = bufferParser.readUInt32BE();\n    if (mtime === undefined)\n      return;\n    attrs.atime = atime;\n    attrs.mtime = mtime;\n  }\n\n  if (flags & ATTR.EXTENDED) {\n    const count = bufferParser.readUInt32BE();\n    if (count === undefined)\n      return;\n    const extended = {};\n    for (let i = 0; i < count; ++i) {\n      const type = bufferParser.readString(true);\n      const data = bufferParser.readString();\n      if (data === undefined)\n        return;\n      extended[type] = data;\n    }\n    attrs.extended = extended;\n  }\n\n  return attrs;\n}\n\nfunction sendOrBuffer(sftp, payload) {\n  const ret = tryWritePayload(sftp, payload);\n  if (ret !== undefined) {\n    sftp._buffer.push(ret);\n    return false;\n  }\n  return true;\n}\n\nfunction tryWritePayload(sftp, payload) {\n  const outgoing = sftp.outgoing;\n  if (outgoing.state !== 'open')\n    return;\n\n  if (outgoing.window === 0) {\n    sftp._waitWindow = true;\n    sftp._chunkcb = drainBuffer;\n    return payload;\n  }\n\n  let ret;\n  const len = payload.length;\n  let p = 0;\n\n  while (len - p > 0 && outgoing.window > 0) {\n    const actualLen = Math.min(len - p, outgoing.window, outgoing.packetSize);\n    outgoing.window -= actualLen;\n    if (outgoing.window === 0) {\n      sftp._waitWindow = true;\n      sftp._chunkcb = drainBuffer;\n    }\n\n    if (p === 0 && actualLen === len) {\n      sftp._protocol.channelData(sftp.outgoing.id, payload);\n    } else {\n      sftp._protocol.channelData(sftp.outgoing.id,\n                                 bufferSlice(payload, p, p + actualLen));\n    }\n\n    p += actualLen;\n  }\n\n  if (len - p > 0) {\n    if (p > 0)\n      ret = bufferSlice(payload, p, len);\n    else\n      ret = payload; // XXX: should never get here?\n  }\n\n  return ret;\n}\n\nfunction drainBuffer() {\n  this._chunkcb = undefined;\n  const buffer = this._buffer;\n  let i = 0;\n  while (i < buffer.length) {\n    const payload = buffer[i];\n    const ret = tryWritePayload(this, payload);\n    if (ret !== undefined) {\n      if (ret !== payload)\n        buffer[i] = ret;\n      if (i > 0)\n        this._buffer = buffer.slice(i);\n      return;\n    }\n    ++i;\n  }\n  if (i > 0)\n    this._buffer = [];\n}\n\nfunction doFatalSFTPError(sftp, msg, noDebug) {\n  const err = new Error(msg);\n  err.level = 'sftp-protocol';\n  if (!noDebug && sftp._debug)\n    sftp._debug(`SFTP: Inbound: ${msg}`);\n  sftp.emit('error', err);\n  sftp.destroy();\n  cleanupRequests(sftp);\n  return false;\n}\n\nfunction cleanupRequests(sftp) {\n  const keys = Object.keys(sftp._requests);\n  if (keys.length === 0)\n    return;\n\n  const reqs = sftp._requests;\n  sftp._requests = {};\n  const err = new Error('No response from server');\n  for (let i = 0; i < keys.length; ++i) {\n    const req = reqs[keys[i]];\n    if (typeof req.cb === 'function')\n      req.cb(err);\n  }\n}\n\nfunction requestLimits(sftp, cb) {\n  /*\n    uint32    id\n    string    \"limits@openssh.com\"\n  */\n  let p = 9;\n  const buf = Buffer.allocUnsafe(4 + 1 + 4 + 4 + 18);\n\n  writeUInt32BE(buf, buf.length - 4, 0);\n  buf[4] = REQUEST.EXTENDED;\n  const reqid = sftp._writeReqid = (sftp._writeReqid + 1) & MAX_REQID;\n  writeUInt32BE(buf, reqid, 5);\n\n  writeUInt32BE(buf, 18, p);\n  buf.utf8Write('limits@openssh.com', p += 4, 18);\n\n  sftp._requests[reqid] = { extended: 'limits@openssh.com', cb };\n\n  const isBuffered = sendOrBuffer(sftp, buf);\n  if (sftp._debug) {\n    const which = (isBuffered ? 'Buffered' : 'Sending');\n    sftp._debug(`SFTP: Outbound: ${which} limits@openssh.com`);\n  }\n}\n\nconst CLIENT_HANDLERS = {\n  [RESPONSE.VERSION]: (sftp, payload) => {\n    if (sftp._version !== -1)\n      return doFatalSFTPError(sftp, 'Duplicate VERSION packet');\n\n    const extensions = {};\n\n    /*\n      uint32 version\n      <extension data>\n    */\n    bufferParser.init(payload, 1);\n    let version = bufferParser.readUInt32BE();\n    while (bufferParser.avail()) {\n      const extName = bufferParser.readString(true);\n      const extData = bufferParser.readString(true);\n      if (extData === undefined) {\n        version = undefined;\n        break;\n      }\n      extensions[extName] = extData;\n    }\n    bufferParser.clear();\n\n    if (version === undefined)\n      return doFatalSFTPError(sftp, 'Malformed VERSION packet');\n\n    if (sftp._debug) {\n      const names = Object.keys(extensions);\n      if (names.length) {\n        sftp._debug(\n          `SFTP: Inbound: Received VERSION (v${version}, exts:${names})`\n        );\n      } else {\n        sftp._debug(`SFTP: Inbound: Received VERSION (v${version})`);\n      }\n    }\n\n    sftp._version = version;\n    sftp._extensions = extensions;\n\n    if (extensions['limits@openssh.com'] === '1') {\n      return requestLimits(sftp, (err, limits) => {\n        if (!err) {\n          if (limits.maxPktLen > 0)\n            sftp._maxOutPktLen = limits.maxPktLen;\n          if (limits.maxReadLen > 0)\n            sftp._maxReadLen = limits.maxReadLen;\n          if (limits.maxWriteLen > 0)\n            sftp._maxWriteLen = limits.maxWriteLen;\n          sftp.maxOpenHandles = (\n            limits.maxOpenHandles > 0 ? limits.maxOpenHandles : Infinity\n          );\n        }\n        sftp.emit('ready');\n      });\n    }\n\n    sftp.emit('ready');\n  },\n  [RESPONSE.STATUS]: (sftp, payload) => {\n    bufferParser.init(payload, 1);\n    const reqID = bufferParser.readUInt32BE();\n    /*\n      uint32     error/status code\n      string     error message (ISO-10646 UTF-8)\n      string     language tag\n    */\n    const errorCode = bufferParser.readUInt32BE();\n    const errorMsg = bufferParser.readString(true);\n    bufferParser.clear();\n\n    // Note: we avoid checking that the error message and language tag are in\n    // the packet because there are some broken implementations that incorrectly\n    // omit them. The language tag in general was never really used amongst ssh\n    // implementations, so in the case of a missing error message we just\n    // default to something sensible.\n\n    if (sftp._debug) {\n      const jsonMsg = JSON.stringify(errorMsg);\n      sftp._debug(\n        `SFTP: Inbound: Received STATUS (id:${reqID}, ${errorCode}, ${jsonMsg})`\n      );\n    }\n    const req = sftp._requests[reqID];\n    delete sftp._requests[reqID];\n    if (req && typeof req.cb === 'function') {\n      if (errorCode === STATUS_CODE.OK) {\n        req.cb();\n        return;\n      }\n      const err = new Error(errorMsg\n                            || STATUS_CODE_STR[errorCode]\n                            || 'Unknown status');\n      err.code = errorCode;\n      req.cb(err);\n    }\n  },\n  [RESPONSE.HANDLE]: (sftp, payload) => {\n    bufferParser.init(payload, 1);\n    const reqID = bufferParser.readUInt32BE();\n    /*\n      string     handle\n    */\n    const handle = bufferParser.readString();\n    bufferParser.clear();\n\n    if (handle === undefined) {\n      if (reqID !== undefined)\n        delete sftp._requests[reqID];\n      return doFatalSFTPError(sftp, 'Malformed HANDLE packet');\n    }\n\n    sftp._debug && sftp._debug(`SFTP: Inbound: Received HANDLE (id:${reqID})`);\n\n    const req = sftp._requests[reqID];\n    delete sftp._requests[reqID];\n    if (req && typeof req.cb === 'function')\n      req.cb(undefined, handle);\n  },\n  [RESPONSE.DATA]: (sftp, payload) => {\n    bufferParser.init(payload, 1);\n    const reqID = bufferParser.readUInt32BE();\n    let req;\n    if (reqID !== undefined) {\n      req = sftp._requests[reqID];\n      delete sftp._requests[reqID];\n    }\n    /*\n      string     data\n    */\n    if (req && typeof req.cb === 'function') {\n      if (req.buffer) {\n        // We have already pre-allocated space to store the data\n\n        const nb = bufferParser.readString(req.buffer);\n        bufferParser.clear();\n\n        if (nb !== undefined) {\n          sftp._debug && sftp._debug(\n            `SFTP: Inbound: Received DATA (id:${reqID}, ${nb})`\n          );\n          req.cb(undefined, req.buffer, nb);\n          return;\n        }\n      } else {\n        const data = bufferParser.readString();\n        bufferParser.clear();\n\n        if (data !== undefined) {\n          sftp._debug && sftp._debug(\n            `SFTP: Inbound: Received DATA (id:${reqID}, ${data.length})`\n          );\n          req.cb(undefined, data);\n          return;\n        }\n      }\n    } else {\n      const nb = bufferParser.skipString();\n      bufferParser.clear();\n      if (nb !== undefined) {\n        sftp._debug && sftp._debug(\n          `SFTP: Inbound: Received DATA (id:${reqID}, ${nb})`\n        );\n        return;\n      }\n    }\n\n    return doFatalSFTPError(sftp, 'Malformed DATA packet');\n  },\n  [RESPONSE.NAME]: (sftp, payload) => {\n    bufferParser.init(payload, 1);\n    const reqID = bufferParser.readUInt32BE();\n    let req;\n    if (reqID !== undefined) {\n      req = sftp._requests[reqID];\n      delete sftp._requests[reqID];\n    }\n    /*\n      uint32     count\n      repeats count times:\n              string     filename\n              string     longname\n              ATTRS      attrs\n    */\n    const count = bufferParser.readUInt32BE();\n    if (count !== undefined) {\n      let names = [];\n      for (let i = 0; i < count; ++i) {\n        // We are going to assume UTF-8 for filenames despite the SFTPv3\n        // spec not specifying an encoding because the specs for newer\n        // versions of the protocol all explicitly specify UTF-8 for\n        // filenames\n        const filename = bufferParser.readString(true);\n\n        // `longname` only exists in SFTPv3 and since it typically will\n        // contain the filename, we assume it is also UTF-8\n        const longname = bufferParser.readString(true);\n\n        const attrs = readAttrs(sftp._biOpt);\n        if (attrs === undefined) {\n          names = undefined;\n          break;\n        }\n        names.push({ filename, longname, attrs });\n      }\n      if (names !== undefined) {\n        sftp._debug && sftp._debug(\n          `SFTP: Inbound: Received NAME (id:${reqID}, ${names.length})`\n        );\n        bufferParser.clear();\n        if (req && typeof req.cb === 'function')\n          req.cb(undefined, names);\n        return;\n      }\n    }\n\n    bufferParser.clear();\n    return doFatalSFTPError(sftp, 'Malformed NAME packet');\n  },\n  [RESPONSE.ATTRS]: (sftp, payload) => {\n    bufferParser.init(payload, 1);\n    const reqID = bufferParser.readUInt32BE();\n    let req;\n    if (reqID !== undefined) {\n      req = sftp._requests[reqID];\n      delete sftp._requests[reqID];\n    }\n    /*\n      ATTRS      attrs\n    */\n    const attrs = readAttrs(sftp._biOpt);\n    bufferParser.clear();\n    if (attrs !== undefined) {\n      sftp._debug && sftp._debug(`SFTP: Inbound: Received ATTRS (id:${reqID})`);\n      if (req && typeof req.cb === 'function')\n        req.cb(undefined, attrs);\n      return;\n    }\n\n    return doFatalSFTPError(sftp, 'Malformed ATTRS packet');\n  },\n  [RESPONSE.EXTENDED]: (sftp, payload) => {\n    bufferParser.init(payload, 1);\n    const reqID = bufferParser.readUInt32BE();\n    if (reqID !== undefined) {\n      const req = sftp._requests[reqID];\n      if (req) {\n        delete sftp._requests[reqID];\n        switch (req.extended) {\n          case 'statvfs@openssh.com':\n          case 'fstatvfs@openssh.com': {\n            /*\n              uint64    f_bsize   // file system block size\n              uint64    f_frsize  // fundamental fs block size\n              uint64    f_blocks  // number of blocks (unit f_frsize)\n              uint64    f_bfree   // free blocks in file system\n              uint64    f_bavail  // free blocks for non-root\n              uint64    f_files   // total file inodes\n              uint64    f_ffree   // free file inodes\n              uint64    f_favail  // free file inodes for to non-root\n              uint64    f_fsid    // file system id\n              uint64    f_flag    // bit mask of f_flag values\n              uint64    f_namemax // maximum filename length\n            */\n            const biOpt = sftp._biOpt;\n            const stats = {\n              f_bsize: bufferParser.readUInt64BE(biOpt),\n              f_frsize: bufferParser.readUInt64BE(biOpt),\n              f_blocks: bufferParser.readUInt64BE(biOpt),\n              f_bfree: bufferParser.readUInt64BE(biOpt),\n              f_bavail: bufferParser.readUInt64BE(biOpt),\n              f_files: bufferParser.readUInt64BE(biOpt),\n              f_ffree: bufferParser.readUInt64BE(biOpt),\n              f_favail: bufferParser.readUInt64BE(biOpt),\n              f_sid: bufferParser.readUInt64BE(biOpt),\n              f_flag: bufferParser.readUInt64BE(biOpt),\n              f_namemax: bufferParser.readUInt64BE(biOpt),\n            };\n            if (stats.f_namemax === undefined)\n              break;\n            if (sftp._debug) {\n              sftp._debug(\n                'SFTP: Inbound: Received EXTENDED_REPLY '\n                  + `(id:${reqID}, ${req.extended})`\n              );\n            }\n            bufferParser.clear();\n            if (typeof req.cb === 'function')\n              req.cb(undefined, stats);\n            return;\n          }\n          case 'limits@openssh.com': {\n            /*\n              uint64          max-packet-length\n              uint64          max-read-length\n              uint64          max-write-length\n              uint64          max-open-handles\n            */\n            const limits = {\n              maxPktLen: bufferParser.readUInt64BE(),\n              maxReadLen: bufferParser.readUInt64BE(),\n              maxWriteLen: bufferParser.readUInt64BE(),\n              maxOpenHandles: bufferParser.readUInt64BE(),\n            };\n            if (limits.maxOpenHandles === undefined)\n              break;\n            if (sftp._debug) {\n              sftp._debug(\n                'SFTP: Inbound: Received EXTENDED_REPLY '\n                  + `(id:${reqID}, ${req.extended})`\n              );\n            }\n            bufferParser.clear();\n            if (typeof req.cb === 'function')\n              req.cb(undefined, limits);\n            return;\n          }\n          case 'users-groups-by-id@openssh.com': {\n            /*\n              string    usernames\n                string    username1\n                ...\n              string    groupnames\n                string    groupname1\n                ...\n            */\n            const usernameCount = bufferParser.readUInt32BE();\n            if (usernameCount === undefined)\n              break;\n            const usernames = new Array(usernameCount);\n            for (let i = 0; i < usernames.length; ++i)\n              usernames[i] = bufferParser.readString(true);\n\n            const groupnameCount = bufferParser.readUInt32BE();\n            if (groupnameCount === undefined)\n              break;\n            const groupnames = new Array(groupnameCount);\n            for (let i = 0; i < groupnames.length; ++i)\n              groupnames[i] = bufferParser.readString(true);\n            if (groupnames.length > 0\n                && groupnames[groupnames.length - 1] === undefined) {\n              break;\n            }\n\n            if (sftp._debug) {\n              sftp._debug(\n                'SFTP: Inbound: Received EXTENDED_REPLY '\n                  + `(id:${reqID}, ${req.extended})`\n              );\n            }\n            bufferParser.clear();\n            if (typeof req.cb === 'function')\n              req.cb(undefined, usernames, groupnames);\n            return;\n          }\n          default:\n            // Unknown extended request\n            sftp._debug && sftp._debug(\n              `SFTP: Inbound: Received EXTENDED_REPLY (id:${reqID}, ???)`\n            );\n            bufferParser.clear();\n            if (typeof req.cb === 'function')\n              req.cb();\n            return;\n        }\n      } else {\n        sftp._debug && sftp._debug(\n          `SFTP: Inbound: Received EXTENDED_REPLY (id:${reqID}, ???)`\n        );\n        bufferParser.clear();\n        return;\n      }\n    }\n\n    bufferParser.clear();\n    return doFatalSFTPError(sftp, 'Malformed EXTENDED_REPLY packet');\n  },\n};\nconst SERVER_HANDLERS = {\n  [REQUEST.INIT]: (sftp, payload) => {\n    if (sftp._version !== -1)\n      return doFatalSFTPError(sftp, 'Duplicate INIT packet');\n\n    const extensions = {};\n\n    /*\n      uint32 version\n      <extension data>\n    */\n    bufferParser.init(payload, 1);\n    let version = bufferParser.readUInt32BE();\n    while (bufferParser.avail()) {\n      const extName = bufferParser.readString(true);\n      const extData = bufferParser.readString(true);\n      if (extData === undefined) {\n        version = undefined;\n        break;\n      }\n      extensions[extName] = extData;\n    }\n    bufferParser.clear();\n\n    if (version === undefined)\n      return doFatalSFTPError(sftp, 'Malformed INIT packet');\n\n    if (sftp._debug) {\n      const names = Object.keys(extensions);\n      if (names.length) {\n        sftp._debug(\n          `SFTP: Inbound: Received INIT (v${version}, exts:${names})`\n        );\n      } else {\n        sftp._debug(`SFTP: Inbound: Received INIT (v${version})`);\n      }\n    }\n\n    sendOrBuffer(sftp, SERVER_VERSION_BUFFER);\n\n    sftp._version = version;\n    sftp._extensions = extensions;\n    sftp.emit('ready');\n  },\n  [REQUEST.OPEN]: (sftp, payload) => {\n    bufferParser.init(payload, 1);\n    const reqID = bufferParser.readUInt32BE();\n    /*\n      string        filename\n      uint32        pflags\n      ATTRS         attrs\n    */\n    const filename = bufferParser.readString(true);\n    const pflags = bufferParser.readUInt32BE();\n    const attrs = readAttrs(sftp._biOpt);\n    bufferParser.clear();\n\n    if (attrs === undefined)\n      return doFatalSFTPError(sftp, 'Malformed OPEN packet');\n\n    sftp._debug && sftp._debug(`SFTP: Inbound: Received OPEN (id:${reqID})`);\n\n    if (!sftp.emit('OPEN', reqID, filename, pflags, attrs)) {\n      // Automatically reject request if no handler for request type\n      sftp.status(reqID, STATUS_CODE.OP_UNSUPPORTED);\n    }\n  },\n  [REQUEST.CLOSE]: (sftp, payload) => {\n    bufferParser.init(payload, 1);\n    const reqID = bufferParser.readUInt32BE();\n    /*\n      string        handle\n    */\n    const handle = bufferParser.readString();\n    bufferParser.clear();\n\n    if (handle === undefined || handle.length > 256)\n      return doFatalSFTPError(sftp, 'Malformed CLOSE packet');\n\n    sftp._debug && sftp._debug(`SFTP: Inbound: Received CLOSE (id:${reqID})`);\n\n    if (!sftp.emit('CLOSE', reqID, handle)) {\n      // Automatically reject request if no handler for request type\n      sftp.status(reqID, STATUS_CODE.OP_UNSUPPORTED);\n    }\n  },\n  [REQUEST.READ]: (sftp, payload) => {\n    bufferParser.init(payload, 1);\n    const reqID = bufferParser.readUInt32BE();\n    /*\n      string     handle\n      uint64     offset\n      uint32     len\n    */\n    const handle = bufferParser.readString();\n    const offset = bufferParser.readUInt64BE(sftp._biOpt);\n    const len = bufferParser.readUInt32BE();\n    bufferParser.clear();\n\n    if (len === undefined || handle.length > 256)\n      return doFatalSFTPError(sftp, 'Malformed READ packet');\n\n    sftp._debug && sftp._debug(`SFTP: Inbound: Received READ (id:${reqID})`);\n\n    if (!sftp.emit('READ', reqID, handle, offset, len)) {\n      // Automatically reject request if no handler for request type\n      sftp.status(reqID, STATUS_CODE.OP_UNSUPPORTED);\n    }\n  },\n  [REQUEST.WRITE]: (sftp, payload) => {\n    bufferParser.init(payload, 1);\n    const reqID = bufferParser.readUInt32BE();\n    /*\n      string     handle\n      uint64     offset\n      string     data\n    */\n    const handle = bufferParser.readString();\n    const offset = bufferParser.readUInt64BE(sftp._biOpt);\n    const data = bufferParser.readString();\n    bufferParser.clear();\n\n    if (data === undefined || handle.length > 256)\n      return doFatalSFTPError(sftp, 'Malformed WRITE packet');\n\n    sftp._debug && sftp._debug(`SFTP: Inbound: Received WRITE (id:${reqID})`);\n\n    if (!sftp.emit('WRITE', reqID, handle, offset, data)) {\n      // Automatically reject request if no handler for request type\n      sftp.status(reqID, STATUS_CODE.OP_UNSUPPORTED);\n    }\n  },\n  [REQUEST.LSTAT]: (sftp, payload) => {\n    bufferParser.init(payload, 1);\n    const reqID = bufferParser.readUInt32BE();\n    /*\n      string     path\n    */\n    const path = bufferParser.readString(true);\n    bufferParser.clear();\n\n    if (path === undefined)\n      return doFatalSFTPError(sftp, 'Malformed LSTAT packet');\n\n    sftp._debug && sftp._debug(`SFTP: Inbound: Received LSTAT (id:${reqID})`);\n\n    if (!sftp.emit('LSTAT', reqID, path)) {\n      // Automatically reject request if no handler for request type\n      sftp.status(reqID, STATUS_CODE.OP_UNSUPPORTED);\n    }\n  },\n  [REQUEST.FSTAT]: (sftp, payload) => {\n    bufferParser.init(payload, 1);\n    const reqID = bufferParser.readUInt32BE();\n    /*\n      string        handle\n    */\n    const handle = bufferParser.readString();\n    bufferParser.clear();\n\n    if (handle === undefined || handle.length > 256)\n      return doFatalSFTPError(sftp, 'Malformed FSTAT packet');\n\n    sftp._debug && sftp._debug(`SFTP: Inbound: Received FSTAT (id:${reqID})`);\n\n    if (!sftp.emit('FSTAT', reqID, handle)) {\n      // Automatically reject request if no handler for request type\n      sftp.status(reqID, STATUS_CODE.OP_UNSUPPORTED);\n    }\n  },\n  [REQUEST.SETSTAT]: (sftp, payload) => {\n    bufferParser.init(payload, 1);\n    const reqID = bufferParser.readUInt32BE();\n    /*\n      string     path\n      ATTRS      attrs\n    */\n    const path = bufferParser.readString(true);\n    const attrs = readAttrs(sftp._biOpt);\n    bufferParser.clear();\n\n    if (attrs === undefined)\n      return doFatalSFTPError(sftp, 'Malformed SETSTAT packet');\n\n    sftp._debug && sftp._debug(`SFTP: Inbound: Received SETSTAT (id:${reqID})`);\n\n    if (!sftp.emit('SETSTAT', reqID, path, attrs)) {\n      // Automatically reject request if no handler for request type\n      sftp.status(reqID, STATUS_CODE.OP_UNSUPPORTED);\n    }\n  },\n  [REQUEST.FSETSTAT]: (sftp, payload) => {\n    bufferParser.init(payload, 1);\n    const reqID = bufferParser.readUInt32BE();\n    /*\n      string     handle\n      ATTRS      attrs\n    */\n    const handle = bufferParser.readString();\n    const attrs = readAttrs(sftp._biOpt);\n    bufferParser.clear();\n\n    if (attrs === undefined || handle.length > 256)\n      return doFatalSFTPError(sftp, 'Malformed FSETSTAT packet');\n\n    sftp._debug && sftp._debug(\n      `SFTP: Inbound: Received FSETSTAT (id:${reqID})`\n    );\n\n    if (!sftp.emit('FSETSTAT', reqID, handle, attrs)) {\n      // Automatically reject request if no handler for request type\n      sftp.status(reqID, STATUS_CODE.OP_UNSUPPORTED);\n    }\n  },\n  [REQUEST.OPENDIR]: (sftp, payload) => {\n    bufferParser.init(payload, 1);\n    const reqID = bufferParser.readUInt32BE();\n    /*\n      string     path\n    */\n    const path = bufferParser.readString(true);\n    bufferParser.clear();\n\n    if (path === undefined)\n      return doFatalSFTPError(sftp, 'Malformed OPENDIR packet');\n\n    sftp._debug && sftp._debug(`SFTP: Inbound: Received OPENDIR (id:${reqID})`);\n\n    if (!sftp.emit('OPENDIR', reqID, path)) {\n      // Automatically reject request if no handler for request type\n      sftp.status(reqID, STATUS_CODE.OP_UNSUPPORTED);\n    }\n  },\n  [REQUEST.READDIR]: (sftp, payload) => {\n    bufferParser.init(payload, 1);\n    const reqID = bufferParser.readUInt32BE();\n    /*\n      string        handle\n    */\n    const handle = bufferParser.readString();\n    bufferParser.clear();\n\n    if (handle === undefined || handle.length > 256)\n      return doFatalSFTPError(sftp, 'Malformed READDIR packet');\n\n    sftp._debug && sftp._debug(`SFTP: Inbound: Received READDIR (id:${reqID})`);\n\n    if (!sftp.emit('READDIR', reqID, handle)) {\n      // Automatically reject request if no handler for request type\n      sftp.status(reqID, STATUS_CODE.OP_UNSUPPORTED);\n    }\n  },\n  [REQUEST.REMOVE]: (sftp, payload) => {\n    bufferParser.init(payload, 1);\n    const reqID = bufferParser.readUInt32BE();\n    /*\n      string     path\n    */\n    const path = bufferParser.readString(true);\n    bufferParser.clear();\n\n    if (path === undefined)\n      return doFatalSFTPError(sftp, 'Malformed REMOVE packet');\n\n    sftp._debug && sftp._debug(`SFTP: Inbound: Received REMOVE (id:${reqID})`);\n\n    if (!sftp.emit('REMOVE', reqID, path)) {\n      // Automatically reject request if no handler for request type\n      sftp.status(reqID, STATUS_CODE.OP_UNSUPPORTED);\n    }\n  },\n  [REQUEST.MKDIR]: (sftp, payload) => {\n    bufferParser.init(payload, 1);\n    const reqID = bufferParser.readUInt32BE();\n    /*\n      string     path\n      ATTRS      attrs\n    */\n    const path = bufferParser.readString(true);\n    const attrs = readAttrs(sftp._biOpt);\n    bufferParser.clear();\n\n    if (attrs === undefined)\n      return doFatalSFTPError(sftp, 'Malformed MKDIR packet');\n\n    sftp._debug && sftp._debug(`SFTP: Inbound: Received MKDIR (id:${reqID})`);\n\n    if (!sftp.emit('MKDIR', reqID, path, attrs)) {\n      // Automatically reject request if no handler for request type\n      sftp.status(reqID, STATUS_CODE.OP_UNSUPPORTED);\n    }\n  },\n  [REQUEST.RMDIR]: (sftp, payload) => {\n    bufferParser.init(payload, 1);\n    const reqID = bufferParser.readUInt32BE();\n    /*\n      string     path\n    */\n    const path = bufferParser.readString(true);\n    bufferParser.clear();\n\n    if (path === undefined)\n      return doFatalSFTPError(sftp, 'Malformed RMDIR packet');\n\n    sftp._debug && sftp._debug(`SFTP: Inbound: Received RMDIR (id:${reqID})`);\n\n    if (!sftp.emit('RMDIR', reqID, path)) {\n      // Automatically reject request if no handler for request type\n      sftp.status(reqID, STATUS_CODE.OP_UNSUPPORTED);\n    }\n  },\n  [REQUEST.REALPATH]: (sftp, payload) => {\n    bufferParser.init(payload, 1);\n    const reqID = bufferParser.readUInt32BE();\n    /*\n      string     path\n    */\n    const path = bufferParser.readString(true);\n    bufferParser.clear();\n\n    if (path === undefined)\n      return doFatalSFTPError(sftp, 'Malformed REALPATH packet');\n\n    sftp._debug && sftp._debug(\n      `SFTP: Inbound: Received REALPATH (id:${reqID})`\n    );\n\n    if (!sftp.emit('REALPATH', reqID, path)) {\n      // Automatically reject request if no handler for request type\n      sftp.status(reqID, STATUS_CODE.OP_UNSUPPORTED);\n    }\n  },\n  [REQUEST.STAT]: (sftp, payload) => {\n    bufferParser.init(payload, 1);\n    const reqID = bufferParser.readUInt32BE();\n    /*\n      string     path\n    */\n    const path = bufferParser.readString(true);\n    bufferParser.clear();\n\n    if (path === undefined)\n      return doFatalSFTPError(sftp, 'Malformed STAT packet');\n\n    sftp._debug && sftp._debug(`SFTP: Inbound: Received STAT (id:${reqID})`);\n\n    if (!sftp.emit('STAT', reqID, path)) {\n      // Automatically reject request if no handler for request type\n      sftp.status(reqID, STATUS_CODE.OP_UNSUPPORTED);\n    }\n  },\n  [REQUEST.RENAME]: (sftp, payload) => {\n    bufferParser.init(payload, 1);\n    const reqID = bufferParser.readUInt32BE();\n    /*\n      string     oldpath\n      string     newpath\n    */\n    const oldPath = bufferParser.readString(true);\n    const newPath = bufferParser.readString(true);\n    bufferParser.clear();\n\n    if (newPath === undefined)\n      return doFatalSFTPError(sftp, 'Malformed RENAME packet');\n\n    sftp._debug && sftp._debug(`SFTP: Inbound: Received RENAME (id:${reqID})`);\n\n    if (!sftp.emit('RENAME', reqID, oldPath, newPath)) {\n      // Automatically reject request if no handler for request type\n      sftp.status(reqID, STATUS_CODE.OP_UNSUPPORTED);\n    }\n  },\n  [REQUEST.READLINK]: (sftp, payload) => {\n    bufferParser.init(payload, 1);\n    const reqID = bufferParser.readUInt32BE();\n    /*\n      string     path\n    */\n    const path = bufferParser.readString(true);\n    bufferParser.clear();\n\n    if (path === undefined)\n      return doFatalSFTPError(sftp, 'Malformed READLINK packet');\n\n    sftp._debug && sftp._debug(\n      `SFTP: Inbound: Received READLINK (id:${reqID})`\n    );\n\n    if (!sftp.emit('READLINK', reqID, path)) {\n      // Automatically reject request if no handler for request type\n      sftp.status(reqID, STATUS_CODE.OP_UNSUPPORTED);\n    }\n  },\n  [REQUEST.SYMLINK]: (sftp, payload) => {\n    bufferParser.init(payload, 1);\n    const reqID = bufferParser.readUInt32BE();\n    /*\n      string     linkpath\n      string     targetpath\n    */\n    const linkPath = bufferParser.readString(true);\n    const targetPath = bufferParser.readString(true);\n    bufferParser.clear();\n\n    if (targetPath === undefined)\n      return doFatalSFTPError(sftp, 'Malformed SYMLINK packet');\n\n    sftp._debug && sftp._debug(`SFTP: Inbound: Received SYMLINK (id:${reqID})`);\n\n    let handled;\n    if (sftp._isOpenSSH) {\n      // OpenSSH has linkpath and targetpath positions switched\n      handled = sftp.emit('SYMLINK', reqID, targetPath, linkPath);\n    } else {\n      handled = sftp.emit('SYMLINK', reqID, linkPath, targetPath);\n    }\n    if (!handled) {\n      // Automatically reject request if no handler for request type\n      sftp.status(reqID, STATUS_CODE.OP_UNSUPPORTED);\n    }\n  },\n  [REQUEST.EXTENDED]: (sftp, payload) => {\n    bufferParser.init(payload, 1);\n    const reqID = bufferParser.readUInt32BE();\n    /*\n      string     extended-request\n      ... any request-specific data ...\n    */\n    const extName = bufferParser.readString(true);\n    if (extName === undefined) {\n      bufferParser.clear();\n      return doFatalSFTPError(sftp, 'Malformed EXTENDED packet');\n    }\n\n    let extData;\n    if (bufferParser.avail())\n      extData = bufferParser.readRaw();\n    bufferParser.clear();\n\n    sftp._debug && sftp._debug(\n      `SFTP: Inbound: Received EXTENDED (id:${reqID})`\n    );\n\n    if (!sftp.emit('EXTENDED', reqID, extName, extData)) {\n      // Automatically reject request if no handler for request type\n      sftp.status(reqID, STATUS_CODE.OP_UNSUPPORTED);\n    }\n  },\n};\n\n// =============================================================================\n// ReadStream/WriteStream-related ==============================================\n// =============================================================================\nconst {\n  ERR_INVALID_ARG_TYPE,\n  ERR_OUT_OF_RANGE,\n  validateNumber\n} = require('./node-fs-compat');\n\nconst kMinPoolSpace = 128;\n\nlet pool;\n// It can happen that we expect to read a large chunk of data, and reserve\n// a large chunk of the pool accordingly, but the read() call only filled\n// a portion of it. If a concurrently executing read() then uses the same pool,\n// the \"reserved\" portion cannot be used, so we allow it to be re-used as a\n// new pool later.\nconst poolFragments = [];\n\nfunction allocNewPool(poolSize) {\n  if (poolFragments.length > 0)\n    pool = poolFragments.pop();\n  else\n    pool = Buffer.allocUnsafe(poolSize);\n  pool.used = 0;\n}\n\n// Check the `this.start` and `this.end` of stream.\nfunction checkPosition(pos, name) {\n  if (!Number.isSafeInteger(pos)) {\n    validateNumber(pos, name);\n    if (!Number.isInteger(pos))\n      throw new ERR_OUT_OF_RANGE(name, 'an integer', pos);\n    throw new ERR_OUT_OF_RANGE(name, '>= 0 and <= 2 ** 53 - 1', pos);\n  }\n  if (pos < 0)\n    throw new ERR_OUT_OF_RANGE(name, '>= 0 and <= 2 ** 53 - 1', pos);\n}\n\nfunction roundUpToMultipleOf8(n) {\n  return (n + 7) & ~7;  // Align to 8 byte boundary.\n}\n\nfunction ReadStream(sftp, path, options) {\n  if (options === undefined)\n    options = {};\n  else if (typeof options === 'string')\n    options = { encoding: options };\n  else if (options === null || typeof options !== 'object')\n    throw new TypeError('\"options\" argument must be a string or an object');\n  else\n    options = Object.create(options);\n\n  // A little bit bigger buffer and water marks by default\n  if (options.highWaterMark === undefined)\n    options.highWaterMark = 64 * 1024;\n\n  // For backwards compat do not emit close on destroy.\n  options.emitClose = false;\n  options.autoDestroy = false; // Node 14 major change.\n\n  ReadableStream.call(this, options);\n\n  this.path = path;\n  this.flags = options.flags === undefined ? 'r' : options.flags;\n  this.mode = options.mode === undefined ? 0o666 : options.mode;\n\n  this.start = options.start;\n  this.end = options.end;\n  this.autoClose = options.autoClose === undefined ? true : options.autoClose;\n  this.pos = 0;\n  this.bytesRead = 0;\n  this.isClosed = false;\n\n  this.handle = options.handle === undefined ? null : options.handle;\n  this.sftp = sftp;\n  this._opening = false;\n\n  if (this.start !== undefined) {\n    checkPosition(this.start, 'start');\n\n    this.pos = this.start;\n  }\n\n  if (this.end === undefined) {\n    this.end = Infinity;\n  } else if (this.end !== Infinity) {\n    checkPosition(this.end, 'end');\n\n    if (this.start !== undefined && this.start > this.end) {\n      throw new ERR_OUT_OF_RANGE(\n        'start',\n        `<= \"end\" (here: ${this.end})`,\n        this.start\n      );\n    }\n  }\n\n  this.on('end', function() {\n    if (this.autoClose)\n      this.destroy();\n  });\n\n  if (!Buffer.isBuffer(this.handle))\n    this.open();\n}\ninherits(ReadStream, ReadableStream);\n\nReadStream.prototype.open = function() {\n  if (this._opening)\n    return;\n\n  this._opening = true;\n\n  this.sftp.open(this.path, this.flags, this.mode, (er, handle) => {\n    this._opening = false;\n\n    if (er) {\n      this.emit('error', er);\n      if (this.autoClose)\n        this.destroy();\n      return;\n    }\n\n    this.handle = handle;\n    this.emit('open', handle);\n    this.emit('ready');\n    // Start the flow of data.\n    this.read();\n  });\n};\n\nReadStream.prototype._read = function(n) {\n  if (!Buffer.isBuffer(this.handle))\n    return this.once('open', () => this._read(n));\n\n  // XXX: safe to remove this?\n  if (this.destroyed)\n    return;\n\n  if (!pool || pool.length - pool.used < kMinPoolSpace) {\n    // Discard the old pool.\n    allocNewPool(this.readableHighWaterMark\n                 || this._readableState.highWaterMark);\n  }\n\n  // Grab another reference to the pool in the case that while we're\n  // in the thread pool another read() finishes up the pool, and\n  // allocates a new one.\n  const thisPool = pool;\n  let toRead = Math.min(pool.length - pool.used, n);\n  const start = pool.used;\n\n  if (this.end !== undefined)\n    toRead = Math.min(this.end - this.pos + 1, toRead);\n\n  // Already read everything we were supposed to read!\n  // treat as EOF.\n  if (toRead <= 0)\n    return this.push(null);\n\n  // the actual read.\n  this.sftp.read(this.handle,\n                 pool,\n                 pool.used,\n                 toRead,\n                 this.pos,\n                 (er, bytesRead) => {\n    if (er) {\n      this.emit('error', er);\n      if (this.autoClose)\n        this.destroy();\n      return;\n    }\n    let b = null;\n\n    // Now that we know how much data we have actually read, re-wind the\n    // 'used' field if we can, and otherwise allow the remainder of our\n    // reservation to be used as a new pool later.\n    if (start + toRead === thisPool.used && thisPool === pool) {\n      thisPool.used = roundUpToMultipleOf8(thisPool.used + bytesRead - toRead);\n    } else {\n      // Round down to the next lowest multiple of 8 to ensure the new pool\n      // fragment start and end positions are aligned to an 8 byte boundary.\n      const alignedEnd = (start + toRead) & ~7;\n      const alignedStart = roundUpToMultipleOf8(start + bytesRead);\n      if (alignedEnd - alignedStart >= kMinPoolSpace)\n        poolFragments.push(thisPool.slice(alignedStart, alignedEnd));\n    }\n\n    if (bytesRead > 0) {\n      this.bytesRead += bytesRead;\n      b = thisPool.slice(start, start + bytesRead);\n    }\n\n    // Move the pool positions, and internal position for reading.\n    this.pos += bytesRead;\n\n    this.push(b);\n  });\n\n  pool.used = roundUpToMultipleOf8(pool.used + toRead);\n};\n\nReadStream.prototype._destroy = function(err, cb) {\n  if (this._opening && !Buffer.isBuffer(this.handle)) {\n    this.once('open', closeStream.bind(null, this, cb, err));\n    return;\n  }\n\n  closeStream(this, cb, err);\n  this.handle = null;\n  this._opening = false;\n};\n\nfunction closeStream(stream, cb, err) {\n  if (!stream.handle)\n    return onclose();\n\n  stream.sftp.close(stream.handle, onclose);\n\n  function onclose(er) {\n    er = er || err;\n    cb(er);\n    stream.isClosed = true;\n    if (!er)\n      stream.emit('close');\n  }\n}\n\nReadStream.prototype.close = function(cb) {\n  this.destroy(null, cb);\n};\n\nObject.defineProperty(ReadStream.prototype, 'pending', {\n  get() {\n    return this.handle === null;\n  },\n  configurable: true\n});\n\n// TODO: add `concurrency` setting to allow more than one in-flight WRITE\n// request to server to improve throughput\nfunction WriteStream(sftp, path, options) {\n  if (options === undefined)\n    options = {};\n  else if (typeof options === 'string')\n    options = { encoding: options };\n  else if (options === null || typeof options !== 'object')\n    throw new TypeError('\"options\" argument must be a string or an object');\n  else\n    options = Object.create(options);\n\n  // For backwards compat do not emit close on destroy.\n  options.emitClose = false;\n  options.autoDestroy = false; // Node 14 major change.\n\n  WritableStream.call(this, options);\n\n  this.path = path;\n  this.flags = options.flags === undefined ? 'w' : options.flags;\n  this.mode = options.mode === undefined ? 0o666 : options.mode;\n\n  this.start = options.start;\n  this.autoClose = options.autoClose === undefined ? true : options.autoClose;\n  this.pos = 0;\n  this.bytesWritten = 0;\n  this.isClosed = false;\n\n  this.handle = options.handle === undefined ? null : options.handle;\n  this.sftp = sftp;\n  this._opening = false;\n\n  if (this.start !== undefined) {\n    checkPosition(this.start, 'start');\n\n    this.pos = this.start;\n  }\n\n  if (options.encoding)\n    this.setDefaultEncoding(options.encoding);\n\n  // Node v6.x only\n  this.on('finish', function() {\n    if (this._writableState.finalCalled)\n      return;\n    if (this.autoClose)\n      this.destroy();\n  });\n\n  if (!Buffer.isBuffer(this.handle))\n    this.open();\n}\ninherits(WriteStream, WritableStream);\n\nWriteStream.prototype._final = function(cb) {\n  if (this.autoClose)\n    this.destroy();\n  cb();\n};\n\nWriteStream.prototype.open = function() {\n  if (this._opening)\n    return;\n\n  this._opening = true;\n\n  this.sftp.open(this.path, this.flags, this.mode, (er, handle) => {\n    this._opening = false;\n\n    if (er) {\n      this.emit('error', er);\n      if (this.autoClose)\n        this.destroy();\n      return;\n    }\n\n    this.handle = handle;\n\n    const tryAgain = (err) => {\n      if (err) {\n        // Try chmod() for sftp servers that may not support fchmod() for\n        // whatever reason\n        this.sftp.chmod(this.path, this.mode, (err_) => tryAgain());\n        return;\n      }\n\n      // SFTPv3 requires absolute offsets, no matter the open flag used\n      if (this.flags[0] === 'a') {\n        const tryStat = (err, st) => {\n          if (err) {\n            // Try stat() for sftp servers that may not support fstat() for\n            // whatever reason\n            this.sftp.stat(this.path, (err_, st_) => {\n              if (err_) {\n                this.destroy();\n                this.emit('error', err);\n                return;\n              }\n              tryStat(null, st_);\n            });\n            return;\n          }\n\n          this.pos = st.size;\n          this.emit('open', handle);\n          this.emit('ready');\n        };\n\n        this.sftp.fstat(handle, tryStat);\n        return;\n      }\n\n      this.emit('open', handle);\n      this.emit('ready');\n    };\n\n    this.sftp.fchmod(handle, this.mode, tryAgain);\n  });\n};\n\nWriteStream.prototype._write = function(data, encoding, cb) {\n  if (!Buffer.isBuffer(data)) {\n    const err = new ERR_INVALID_ARG_TYPE('data', 'Buffer', data);\n    return this.emit('error', err);\n  }\n\n  if (!Buffer.isBuffer(this.handle)) {\n    return this.once('open', function() {\n      this._write(data, encoding, cb);\n    });\n  }\n\n  this.sftp.write(this.handle,\n                  data,\n                  0,\n                  data.length,\n                  this.pos,\n                  (er, bytes) => {\n    if (er) {\n      if (this.autoClose)\n        this.destroy();\n      return cb(er);\n    }\n    this.bytesWritten += bytes;\n    cb();\n  });\n\n  this.pos += data.length;\n};\n\nWriteStream.prototype._writev = function(data, cb) {\n  if (!Buffer.isBuffer(this.handle)) {\n    return this.once('open', function() {\n      this._writev(data, cb);\n    });\n  }\n\n  const sftp = this.sftp;\n  const handle = this.handle;\n  let writesLeft = data.length;\n\n  const onwrite = (er, bytes) => {\n    if (er) {\n      this.destroy();\n      return cb(er);\n    }\n    this.bytesWritten += bytes;\n    if (--writesLeft === 0)\n      cb();\n  };\n\n  // TODO: try to combine chunks to reduce number of requests to the server?\n  for (let i = 0; i < data.length; ++i) {\n    const chunk = data[i].chunk;\n\n    sftp.write(handle, chunk, 0, chunk.length, this.pos, onwrite);\n    this.pos += chunk.length;\n  }\n};\n\nif (typeof WritableStream.prototype.destroy !== 'function')\n  WriteStream.prototype.destroy = ReadStream.prototype.destroy;\n\nWriteStream.prototype._destroy = ReadStream.prototype._destroy;\nWriteStream.prototype.close = function(cb) {\n  if (cb) {\n    if (this.isClosed) {\n      process.nextTick(cb);\n      return;\n    }\n    this.on('close', cb);\n  }\n\n  // If we are not autoClosing, we should call\n  // destroy on 'finish'.\n  if (!this.autoClose)\n    this.on('finish', this.destroy.bind(this));\n\n  this.end();\n};\n\n// There is no shutdown() for files.\nWriteStream.prototype.destroySoon = WriteStream.prototype.end;\n\nObject.defineProperty(WriteStream.prototype, 'pending', {\n  get() {\n    return this.handle === null;\n  },\n  configurable: true\n});\n// =============================================================================\n\nmodule.exports = {\n  flagsToString,\n  OPEN_MODE,\n  SFTP,\n  Stats,\n  STATUS_CODE,\n  stringToFlags,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}