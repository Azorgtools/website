{"ast":null,"code":"var _jsxFileName = \"/home/user/jackal_website/src/Components/Molecules/SshConnection/ssh.tsx\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { NodeSSH } from 'node-ssh';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RemoteDirectory = () => {\n  _s();\n  const [directoryContent, setDirectoryContent] = useState([]);\n  const [sshConnection, setSshConnection] = useState(null);\n  const [isConnecting, setIsConnecting] = useState(false);\n  const connectToRemoteServer = async () => {\n    setIsConnecting(true);\n    const ssh = new NodeSSH();\n    const remoteHost = '100.121.193.21'; // Replace with the hostname or IP address of your remote server\n    const username = 'administrator'; // Replace with your SSH username\n    const password = 'clearpath'; // Replace with your SSH password\n\n    try {\n      // Connect to the remote server using username and password\n      await ssh.connect({\n        host: remoteHost,\n        username,\n        password\n      });\n      setSshConnection(ssh);\n    } catch (error) {\n      console.error('Error connecting to remote server:', error);\n    } finally {\n      setIsConnecting(false);\n    }\n  };\n  const getDirectoryContent = async () => {\n    if (!sshConnection) {\n      return;\n    }\n\n    // Execute the \"ls\" command on the remote server to get the content of the home directory\n    const {\n      stdout\n    } = await sshConnection.execCommand('ls');\n    setDirectoryContent(stdout.trim().split('\\n'));\n  };\n  const handleClick = async () => {\n    if (!sshConnection) {\n      await connectToRemoteServer();\n    }\n    await getDirectoryContent();\n  };\n  if (isConnecting) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Connecting to remote server...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleClick,\n      children: \"Get Directory Content\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Contents of home directory:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: directoryContent.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: item\n      }, item, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n_s(RemoteDirectory, \"utz+ajHRo9a9I4oInIO2cgHn5h8=\");\n_c = RemoteDirectory;\nexport default RemoteDirectory;\nvar _c;\n$RefreshReg$(_c, \"RemoteDirectory\");","map":{"version":3,"names":["useState","NodeSSH","jsxDEV","_jsxDEV","RemoteDirectory","_s","directoryContent","setDirectoryContent","sshConnection","setSshConnection","isConnecting","setIsConnecting","connectToRemoteServer","ssh","remoteHost","username","password","connect","host","error","console","getDirectoryContent","stdout","execCommand","trim","split","handleClick","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","item","_c","$RefreshReg$"],"sources":["/home/user/jackal_website/src/Components/Molecules/SshConnection/ssh.tsx"],"sourcesContent":["import { useState } from 'react';\nimport {NodeSSH}  from 'node-ssh';\n\nconst RemoteDirectory = () => {\n  const [directoryContent, setDirectoryContent] = useState<string[]>([]);\n  const [sshConnection, setSshConnection] = useState<NodeSSH | null>(null);\n  const [isConnecting, setIsConnecting] = useState(false);\n\n  const connectToRemoteServer = async () => {\n    setIsConnecting(true);\n\n    const ssh = new NodeSSH();\n    const remoteHost = '100.121.193.21'; // Replace with the hostname or IP address of your remote server\n    const username = 'administrator'; // Replace with your SSH username\n    const password = 'clearpath'; // Replace with your SSH password\n\n    try {\n      // Connect to the remote server using username and password\n      await ssh.connect({\n        host: remoteHost,\n        username,\n        password,\n      });\n      setSshConnection(ssh);\n    } catch (error) {\n      console.error('Error connecting to remote server:', error);\n    } finally {\n      setIsConnecting(false);\n    }\n  };\n\n  const getDirectoryContent = async () => {\n    if (!sshConnection) {\n      return;\n    }\n\n    // Execute the \"ls\" command on the remote server to get the content of the home directory\n    const { stdout } = await sshConnection.execCommand('ls');\n    setDirectoryContent(stdout.trim().split('\\n'));\n  };\n\n  const handleClick = async () => {\n    if (!sshConnection) {\n      await connectToRemoteServer();\n    }\n\n    await getDirectoryContent();\n  };\n\n  if (isConnecting) {\n    return <div>Connecting to remote server...</div>;\n  }\n\n  return (\n    <div>\n      <button onClick={handleClick}>Get Directory Content</button>\n      <p>Contents of home directory:</p>\n      <ul>\n        {directoryContent.map((item) => (\n          <li key={item}>{item}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default RemoteDirectory;"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAAQC,OAAO,QAAQ,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAM,CAACC,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGP,QAAQ,CAAW,EAAE,CAAC;EACtE,MAAM,CAACQ,aAAa,EAAEC,gBAAgB,CAAC,GAAGT,QAAQ,CAAiB,IAAI,CAAC;EACxE,MAAM,CAACU,YAAY,EAAEC,eAAe,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EAEvD,MAAMY,qBAAqB,GAAG,MAAAA,CAAA,KAAY;IACxCD,eAAe,CAAC,IAAI,CAAC;IAErB,MAAME,GAAG,GAAG,IAAIZ,OAAO,EAAE;IACzB,MAAMa,UAAU,GAAG,gBAAgB,CAAC,CAAC;IACrC,MAAMC,QAAQ,GAAG,eAAe,CAAC,CAAC;IAClC,MAAMC,QAAQ,GAAG,WAAW,CAAC,CAAC;;IAE9B,IAAI;MACF;MACA,MAAMH,GAAG,CAACI,OAAO,CAAC;QAChBC,IAAI,EAAEJ,UAAU;QAChBC,QAAQ;QACRC;MACF,CAAC,CAAC;MACFP,gBAAgB,CAACI,GAAG,CAAC;IACvB,CAAC,CAAC,OAAOM,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;IAC5D,CAAC,SAAS;MACRR,eAAe,CAAC,KAAK,CAAC;IACxB;EACF,CAAC;EAED,MAAMU,mBAAmB,GAAG,MAAAA,CAAA,KAAY;IACtC,IAAI,CAACb,aAAa,EAAE;MAClB;IACF;;IAEA;IACA,MAAM;MAAEc;IAAO,CAAC,GAAG,MAAMd,aAAa,CAACe,WAAW,CAAC,IAAI,CAAC;IACxDhB,mBAAmB,CAACe,MAAM,CAACE,IAAI,EAAE,CAACC,KAAK,CAAC,IAAI,CAAC,CAAC;EAChD,CAAC;EAED,MAAMC,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9B,IAAI,CAAClB,aAAa,EAAE;MAClB,MAAMI,qBAAqB,EAAE;IAC/B;IAEA,MAAMS,mBAAmB,EAAE;EAC7B,CAAC;EAED,IAAIX,YAAY,EAAE;IAChB,oBAAOP,OAAA;MAAAwB,QAAA,EAAK;IAA8B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAM;EAClD;EAEA,oBACE5B,OAAA;IAAAwB,QAAA,gBACExB,OAAA;MAAQ6B,OAAO,EAAEN,WAAY;MAAAC,QAAA,EAAC;IAAqB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAS,eAC5D5B,OAAA;MAAAwB,QAAA,EAAG;IAA2B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAI,eAClC5B,OAAA;MAAAwB,QAAA,EACGrB,gBAAgB,CAAC2B,GAAG,CAAEC,IAAI,iBACzB/B,OAAA;QAAAwB,QAAA,EAAgBO;MAAI,GAAXA,IAAI;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QACd;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACD;AAEV,CAAC;AAAC1B,EAAA,CA7DID,eAAe;AAAA+B,EAAA,GAAf/B,eAAe;AA+DrB,eAAeA,eAAe;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}