{"ast":null,"code":"var _jsxFileName = \"/home/user/jackal_website/src/Components/Molecules/SshConnection/ssh.tsx\",\n  _s = $RefreshSig$();\nimport SSH from \"node-ssh\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SshConnection = () => {\n  _s();\n  const [directoryContent, setDirectoryContent] = useState([]);\n  const [sshConnection, setSshConnection] = useState(null);\n  useEffect(() => {\n    const ssh = new SSH();\n    const remoteHost = 'example.com'; // Replace with the hostname or IP address of your remote server\n    const username = 'myusername'; // Replace with your SSH username\n    const password = 'mypassword'; // Replace with your SSH password\n\n    async function connectToRemoteServer() {\n      try {\n        // Connect to the remote server using username and password\n        await ssh.connect({\n          host: remoteHost,\n          username,\n          password\n        });\n        setSshConnection(ssh);\n      } catch (error) {\n        console.error('Error connecting to remote server:', error);\n      }\n    }\n    connectToRemoteServer();\n\n    // Disconnect from the remote server when the component unmounts\n    return () => {\n      if (sshConnection) {\n        sshConnection.dispose();\n      }\n    };\n  }, []);\n  useEffect(() => {\n    async function getDirectoryContent() {\n      if (!sshConnection) {\n        return;\n      }\n\n      // Execute the \"ls\" command on the remote server to get the content of the home directory\n      const {\n        stdout\n      } = await sshConnection.execCommand('ls');\n      setDirectoryContent(stdout.trim().split('\\n'));\n    }\n    getDirectoryContent();\n  }, [sshConnection]);\n  if (!sshConnection) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Connecting to remote server...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Contents of home directory:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: directoryContent.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: item\n      }, item, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n_s(SshConnection, \"szEJvfUV+ZSghyPB8vC2VGSsLdQ=\");\n_c = SshConnection;\nexport default SshConnection;\nvar _c;\n$RefreshReg$(_c, \"SshConnection\");","map":{"version":3,"names":["SSH","jsxDEV","_jsxDEV","SshConnection","_s","directoryContent","setDirectoryContent","useState","sshConnection","setSshConnection","useEffect","ssh","remoteHost","username","password","connectToRemoteServer","connect","host","error","console","dispose","getDirectoryContent","stdout","execCommand","trim","split","children","fileName","_jsxFileName","lineNumber","columnNumber","map","item","_c","$RefreshReg$"],"sources":["/home/user/jackal_website/src/Components/Molecules/SshConnection/ssh.tsx"],"sourcesContent":["import { Fragment, FunctionComponent } from \"react\";\nimport SSH from \"node-ssh\";\n\nconst SshConnection: FunctionComponent = () => {\n  const [directoryContent, setDirectoryContent] = useState<string[]>([]);\n  const [sshConnection, setSshConnection] = useState<SSH | null>(null);\n\n  useEffect(() => {\n    const ssh = new SSH();\n    const remoteHost = 'example.com'; // Replace with the hostname or IP address of your remote server\n    const username = 'myusername'; // Replace with your SSH username\n    const password = 'mypassword'; // Replace with your SSH password\n\n    async function connectToRemoteServer() {\n      try {\n        // Connect to the remote server using username and password\n        await ssh.connect({\n          host: remoteHost,\n          username,\n          password\n        });\n        setSshConnection(ssh);\n      } catch (error) {\n        console.error('Error connecting to remote server:', error);\n      }\n    }\n\n    connectToRemoteServer();\n\n    // Disconnect from the remote server when the component unmounts\n    return () => {\n      if (sshConnection) {\n        sshConnection.dispose();\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    async function getDirectoryContent() {\n      if (!sshConnection) {\n        return;\n      }\n\n      // Execute the \"ls\" command on the remote server to get the content of the home directory\n      const { stdout } = await sshConnection.execCommand('ls');\n      setDirectoryContent(stdout.trim().split('\\n'));\n    }\n\n    getDirectoryContent();\n  }, [sshConnection]);\n\n  if (!sshConnection) {\n    return <div>Connecting to remote server...</div>;\n  }\n\n  return (\n    <div>\n      <p>Contents of home directory:</p>\n      <ul>\n        {directoryContent.map((item) => (\n          <li key={item}>{item}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\n\nexport default SshConnection;\n"],"mappings":";;AACA,OAAOA,GAAG,MAAM,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3B,MAAMC,aAAgC,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC7C,MAAM,CAACC,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGC,QAAQ,CAAW,EAAE,CAAC;EACtE,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGF,QAAQ,CAAa,IAAI,CAAC;EAEpEG,SAAS,CAAC,MAAM;IACd,MAAMC,GAAG,GAAG,IAAIX,GAAG,EAAE;IACrB,MAAMY,UAAU,GAAG,aAAa,CAAC,CAAC;IAClC,MAAMC,QAAQ,GAAG,YAAY,CAAC,CAAC;IAC/B,MAAMC,QAAQ,GAAG,YAAY,CAAC,CAAC;;IAE/B,eAAeC,qBAAqBA,CAAA,EAAG;MACrC,IAAI;QACF;QACA,MAAMJ,GAAG,CAACK,OAAO,CAAC;UAChBC,IAAI,EAAEL,UAAU;UAChBC,QAAQ;UACRC;QACF,CAAC,CAAC;QACFL,gBAAgB,CAACE,GAAG,CAAC;MACvB,CAAC,CAAC,OAAOO,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;MAC5D;IACF;IAEAH,qBAAqB,EAAE;;IAEvB;IACA,OAAO,MAAM;MACX,IAAIP,aAAa,EAAE;QACjBA,aAAa,CAACY,OAAO,EAAE;MACzB;IACF,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAENV,SAAS,CAAC,MAAM;IACd,eAAeW,mBAAmBA,CAAA,EAAG;MACnC,IAAI,CAACb,aAAa,EAAE;QAClB;MACF;;MAEA;MACA,MAAM;QAAEc;MAAO,CAAC,GAAG,MAAMd,aAAa,CAACe,WAAW,CAAC,IAAI,CAAC;MACxDjB,mBAAmB,CAACgB,MAAM,CAACE,IAAI,EAAE,CAACC,KAAK,CAAC,IAAI,CAAC,CAAC;IAChD;IAEAJ,mBAAmB,EAAE;EACvB,CAAC,EAAE,CAACb,aAAa,CAAC,CAAC;EAEnB,IAAI,CAACA,aAAa,EAAE;IAClB,oBAAON,OAAA;MAAAwB,QAAA,EAAK;IAA8B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAM;EAClD;EAEA,oBACE5B,OAAA;IAAAwB,QAAA,gBACExB,OAAA;MAAAwB,QAAA,EAAG;IAA2B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAI,eAClC5B,OAAA;MAAAwB,QAAA,EACGrB,gBAAgB,CAAC0B,GAAG,CAAEC,IAAI,iBACzB9B,OAAA;QAAAwB,QAAA,EAAgBM;MAAI,GAAXA,IAAI;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QACd;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACD;AAEV,CAAC;AAAC1B,EAAA,CA9DID,aAAgC;AAAA8B,EAAA,GAAhC9B,aAAgC;AAiEtC,eAAeA,aAAa;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}